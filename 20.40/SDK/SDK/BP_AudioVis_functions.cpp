#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioVis

#include "Basic.hpp"

#include "BP_AudioVis_classes.hpp"
#include "BP_AudioVis_parameters.hpp"


namespace SDK
{

// Function BP_AudioVis.BP_AudioVis_C.ExecuteUbergraph_BP_AudioVis
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ExecuteUbergraph_BP_AudioVis(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ExecuteUbergraph_BP_AudioVis");

	Params::BP_AudioVis_C_ExecuteUbergraph_BP_AudioVis Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.LogAmplitudeValues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AudioVis_C::LogAmplitudeValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "LogAmplitudeValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioVis.BP_AudioVis_C.LogoRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::LogoRotation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "LogoRotation");

	Params::BP_AudioVis_C_LogoRotation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AudioVis_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioVis.BP_AudioVis_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ReceiveEndPlay");

	Params::BP_AudioVis_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ReceiveTick");

	Params::BP_AudioVis_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.ToggleAudioVisualizer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVoPlaying_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ToggleAudioVisualizer(bool IsVoPlaying_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ToggleAudioVisualizer");

	Params::BP_AudioVis_C_ToggleAudioVisualizer Parms{};

	Parms.IsVoPlaying_0 = IsVoPlaying_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.ToggleLogoMesh
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVoPlaying_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ToggleLogoMesh(bool IsVoPlaying_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ToggleLogoMesh");

	Params::BP_AudioVis_C_ToggleLogoMesh Parms{};

	Parms.IsVoPlaying_0 = IsVoPlaying_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.ToggleVisualizerMeshes
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVoPlaying_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AudioVis_C::ToggleVisualizerMeshes(bool IsVoPlaying_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "ToggleVisualizerMeshes");

	Params::BP_AudioVis_C_ToggleVisualizerMeshes Parms{};

	Parms.IsVoPlaying_0 = IsVoPlaying_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AudioVis.BP_AudioVis_C.VisualizerVisibilityTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_AudioVis_C::VisualizerVisibilityTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "VisualizerVisibilityTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AudioVis.BP_AudioVis_C.VisualizerVisibilityTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_AudioVis_C::VisualizerVisibilityTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AudioVis_C", "VisualizerVisibilityTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}

}

