#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivityBrowserSoloButton

#include "Basic.hpp"

#include "DiscoveryBrowserUI_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivityBrowserSoloButton.ActivityBrowserSoloButton_C
// 0x0090 (0x1160 - 0x10D0)
class UActivityBrowserSoloButton_C final : public UFortActivityBrowserSoloButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x10D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Pressed;                                           // 0x10D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x10E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                ButtonMaterialBorder;                              // 0x10E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                DynamicPaddingBorder;                              // 0x10F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               MinSizesSB;                                        // 0x10F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         TextShearX;                                        // 0x1100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextShearY;                                        // 0x1104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                TextPadding;                                       // 0x1108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDisabled;                                        // 0x1118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1119[0x7];                                     // 0x1119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ButtonMaterial;                                    // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonSharpnessX;                                  // 0x1128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonSharpnessY;                                  // 0x112C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseBoxScalingX;                                    // 0x1130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseBoxScalingY;                                    // 0x1134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonBoxScaleSizeX;                               // 0x1138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonBoxScaleSizeY;                               // 0x113C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DisabledParamName;                                 // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessVParamName;                               // 0x1144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessUParamName;                               // 0x1148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleUParamName;                             // 0x114C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleVParamName;                             // 0x1150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideButtonBackingOnGamepad;                        // 0x1154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayReversed;                                // 0x1155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void Construct();
	void Destruct();
	void EventOnInputMethodChanged(ECommonInputType bNewInputType);
	void ExecuteUbergraph_ActivityBrowserSoloButton(int32 EntryPoint);
	void Finished_3B04A1D04A2128E7C8B3D5BC22792871();
	void MakeButtonBrush(class UObject* ResourceObject, struct FSlateBrush* SlateBrush);
	void OnVisibilityChange(ESlateVisibility InVisibility);
	void PreConstruct(bool IsDesignTime);
	void ResetFontMaterial();
	void ResetMaterials();
	void SetButtonMaterial();
	void SetText(const class FText& Text);
	void SetTextStyle();
	void Toggle_Mobile_Overrides(bool bApplyMobileOverrides);
	void UpdateStylingOnInputType(ECommonInputType Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivityBrowserSoloButton_C">();
	}
	static class UActivityBrowserSoloButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityBrowserSoloButton_C>();
	}
};
static_assert(alignof(UActivityBrowserSoloButton_C) == 0x000010, "Wrong alignment on UActivityBrowserSoloButton_C");
static_assert(sizeof(UActivityBrowserSoloButton_C) == 0x001160, "Wrong size on UActivityBrowserSoloButton_C");
static_assert(offsetof(UActivityBrowserSoloButton_C, UberGraphFrame) == 0x0010D0, "Member 'UActivityBrowserSoloButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, Pressed) == 0x0010D8, "Member 'UActivityBrowserSoloButton_C::Pressed' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, Hover) == 0x0010E0, "Member 'UActivityBrowserSoloButton_C::Hover' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonMaterialBorder) == 0x0010E8, "Member 'UActivityBrowserSoloButton_C::ButtonMaterialBorder' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, DynamicPaddingBorder) == 0x0010F0, "Member 'UActivityBrowserSoloButton_C::DynamicPaddingBorder' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, MinSizesSB) == 0x0010F8, "Member 'UActivityBrowserSoloButton_C::MinSizesSB' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextShearX) == 0x001100, "Member 'UActivityBrowserSoloButton_C::TextShearX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextShearY) == 0x001104, "Member 'UActivityBrowserSoloButton_C::TextShearY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, TextPadding) == 0x001108, "Member 'UActivityBrowserSoloButton_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, IsDisabled) == 0x001118, "Member 'UActivityBrowserSoloButton_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonMaterial) == 0x001120, "Member 'UActivityBrowserSoloButton_C::ButtonMaterial' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonSharpnessX) == 0x001128, "Member 'UActivityBrowserSoloButton_C::ButtonSharpnessX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonSharpnessY) == 0x00112C, "Member 'UActivityBrowserSoloButton_C::ButtonSharpnessY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScalingX) == 0x001130, "Member 'UActivityBrowserSoloButton_C::UseBoxScalingX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScalingY) == 0x001134, "Member 'UActivityBrowserSoloButton_C::UseBoxScalingY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonBoxScaleSizeX) == 0x001138, "Member 'UActivityBrowserSoloButton_C::ButtonBoxScaleSizeX' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ButtonBoxScaleSizeY) == 0x00113C, "Member 'UActivityBrowserSoloButton_C::ButtonBoxScaleSizeY' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, DisabledParamName) == 0x001140, "Member 'UActivityBrowserSoloButton_C::DisabledParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, SharpnessVParamName) == 0x001144, "Member 'UActivityBrowserSoloButton_C::SharpnessVParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, SharpnessUParamName) == 0x001148, "Member 'UActivityBrowserSoloButton_C::SharpnessUParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScaleUParamName) == 0x00114C, "Member 'UActivityBrowserSoloButton_C::UseBoxScaleUParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, UseBoxScaleVParamName) == 0x001150, "Member 'UActivityBrowserSoloButton_C::UseBoxScaleVParamName' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, HideButtonBackingOnGamepad) == 0x001154, "Member 'UActivityBrowserSoloButton_C::HideButtonBackingOnGamepad' has a wrong offset!");
static_assert(offsetof(UActivityBrowserSoloButton_C, ShouldPlayReversed) == 0x001155, "Member 'UActivityBrowserSoloButton_C::ShouldPlayReversed' has a wrong offset!");

}

