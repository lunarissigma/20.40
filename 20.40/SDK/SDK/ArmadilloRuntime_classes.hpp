#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmadilloRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ArmadilloRuntime_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ArmadilloRuntime.ArmadilloAnimInstance_BGAEnemyGuard
// 0x00F0 (0x0440 - 0x0350)
class UArmadilloAnimInstance_BGAEnemyGuard final : public UAnimInstance
{
public:
	uint8                                         bRunNativeUpdateAnimation : 1;                     // 0x0348(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsMoving : 1;                                     // 0x0348(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWantsToTurn : 1;                                  // 0x0348(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bTurnLeft : 1;                                     // 0x0348(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAttack : 1;                                       // 0x0348(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldWalkRightFootForward : 1;                   // 0x0348(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bJogging : 1;                                      // 0x0348(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCrouch : 1;                                       // 0x0348(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTimeValue;                                    // 0x034C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PreviousUpdateLocation;                            // 0x0350(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x0368(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumSpeedForMovingSquared;                      // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TargetTurnRootYaw;                                 // 0x0384(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceAngleErrorTolerance;                    // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceRotationSpeed;                          // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceEnableAimYawThreshold;                  // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WantsToTurnAimYawInterpSpeed;                      // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinAimYawInterpSpeed;                              // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAimYawInterpSpeed;                              // 0x039C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinAimPitchInterpSpeed;                            // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxAimPitchInterpSpeed;                            // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinRootYawInterpSpeed;                             // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRootYawInterpSpeed;                             // 0x03AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkRightFootForwardDirectionBwdMin;               // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkRightFootForwardDirectionBwdMax;               // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkRightFootForwardDirectionFwdMin;               // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkRightFootForwardDirectionFwdMax;               // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FArmadilloEnemyGuardAimAnimInfoStruct  AnimInfo;                                          // 0x03C0(0x0018)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   ZeroOutPitchWeightCurveName;                       // 0x03D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MannequinAimStartLocationOffset;                   // 0x03E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               MannequinRotationOffset;                           // 0x03F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   RootSocketName;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnInPlaceYawMagnitude;                           // 0x0414(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AuthoredWalkSpeed;                                 // 0x0418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AuthoredJogSpeed;                                  // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovementDirection;                                 // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedAdjustedPlayrate;                             // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Speed2D;                                           // 0x0428(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedAdjustedPlayRateInterpSpeed;                  // 0x042C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CrouchStateActorTag;                               // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AttackStateActorTag;                               // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_438[0x8];                                      // 0x0438(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintUpdateAnim(const float DeltaTime);
	void GetCurrentTargetLocation(bool* bOutValidTarget, struct FVector* OutTargetLocation);
	void NativeUpdateAim();
	void NativeUpdateAttacking();
	void NativeUpdateCrouch();
	void NativeUpdateMovementDirection();
	void NativeUpdateSpeedAdjustedPlayRate();
	void NativeUpdateTurning();
	void NativeUpdateVelocity();

	class AActor* GetRelevantOwningActor() const;
	class USkeletalMeshComponent* GetSkeletalMeshComponent() const;
	struct FTransform GetSkeletalMeshRootSocketTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArmadilloAnimInstance_BGAEnemyGuard">();
	}
	static class UArmadilloAnimInstance_BGAEnemyGuard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArmadilloAnimInstance_BGAEnemyGuard>();
	}
};
static_assert(alignof(UArmadilloAnimInstance_BGAEnemyGuard) == 0x000010, "Wrong alignment on UArmadilloAnimInstance_BGAEnemyGuard");
static_assert(sizeof(UArmadilloAnimInstance_BGAEnemyGuard) == 0x000440, "Wrong size on UArmadilloAnimInstance_BGAEnemyGuard");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, DeltaTimeValue) == 0x00034C, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::DeltaTimeValue' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, PreviousUpdateLocation) == 0x000350, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::PreviousUpdateLocation' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, Velocity) == 0x000368, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::Velocity' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MinimumSpeedForMovingSquared) == 0x000380, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MinimumSpeedForMovingSquared' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, TargetTurnRootYaw) == 0x000384, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::TargetTurnRootYaw' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, TurnInPlaceAngleErrorTolerance) == 0x000388, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::TurnInPlaceAngleErrorTolerance' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, TurnInPlaceRotationSpeed) == 0x00038C, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::TurnInPlaceRotationSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, TurnInPlaceEnableAimYawThreshold) == 0x000390, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::TurnInPlaceEnableAimYawThreshold' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, WantsToTurnAimYawInterpSpeed) == 0x000394, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::WantsToTurnAimYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MinAimYawInterpSpeed) == 0x000398, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MinAimYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MaxAimYawInterpSpeed) == 0x00039C, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MaxAimYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MinAimPitchInterpSpeed) == 0x0003A0, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MinAimPitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MaxAimPitchInterpSpeed) == 0x0003A4, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MaxAimPitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MinRootYawInterpSpeed) == 0x0003A8, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MinRootYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MaxRootYawInterpSpeed) == 0x0003AC, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MaxRootYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, WalkRightFootForwardDirectionBwdMin) == 0x0003B0, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::WalkRightFootForwardDirectionBwdMin' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, WalkRightFootForwardDirectionBwdMax) == 0x0003B4, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::WalkRightFootForwardDirectionBwdMax' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, WalkRightFootForwardDirectionFwdMin) == 0x0003B8, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::WalkRightFootForwardDirectionFwdMin' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, WalkRightFootForwardDirectionFwdMax) == 0x0003BC, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::WalkRightFootForwardDirectionFwdMax' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, AnimInfo) == 0x0003C0, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::AnimInfo' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, ZeroOutPitchWeightCurveName) == 0x0003D8, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::ZeroOutPitchWeightCurveName' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MannequinAimStartLocationOffset) == 0x0003E0, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MannequinAimStartLocationOffset' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MannequinRotationOffset) == 0x0003F8, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MannequinRotationOffset' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, RootSocketName) == 0x000410, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::RootSocketName' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, TurnInPlaceYawMagnitude) == 0x000414, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::TurnInPlaceYawMagnitude' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, AuthoredWalkSpeed) == 0x000418, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::AuthoredWalkSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, AuthoredJogSpeed) == 0x00041C, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::AuthoredJogSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, MovementDirection) == 0x000420, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::MovementDirection' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, SpeedAdjustedPlayrate) == 0x000424, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::SpeedAdjustedPlayrate' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, Speed2D) == 0x000428, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::Speed2D' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, SpeedAdjustedPlayRateInterpSpeed) == 0x00042C, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::SpeedAdjustedPlayRateInterpSpeed' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, CrouchStateActorTag) == 0x000430, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::CrouchStateActorTag' has a wrong offset!");
static_assert(offsetof(UArmadilloAnimInstance_BGAEnemyGuard, AttackStateActorTag) == 0x000434, "Member 'UArmadilloAnimInstance_BGAEnemyGuard::AttackStateActorTag' has a wrong offset!");

}

