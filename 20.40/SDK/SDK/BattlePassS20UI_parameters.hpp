#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassS20UI

#include "Basic.hpp"

#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function BattlePassS20UI.FortBattlePassTutorialTooltipS20.SetText
// 0x0018 (0x0018 - 0x0000)
struct FortBattlePassTutorialTooltipS20_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassTutorialTooltipS20_SetText) == 0x000008, "Wrong alignment on FortBattlePassTutorialTooltipS20_SetText");
static_assert(sizeof(FortBattlePassTutorialTooltipS20_SetText) == 0x000018, "Wrong size on FortBattlePassTutorialTooltipS20_SetText");
static_assert(offsetof(FortBattlePassTutorialTooltipS20_SetText, Text) == 0x000000, "Member 'FortBattlePassTutorialTooltipS20_SetText::Text' has a wrong offset!");

// Function BattlePassS20UI.BattlePassLandingPageS20.OnBattlePassGiftingAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS20_OnBattlePassGiftingAllowed final
{
public:
	bool                                          bGiftingAllowed;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS20_OnBattlePassGiftingAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS20_OnBattlePassGiftingAllowed");
static_assert(sizeof(BattlePassLandingPageS20_OnBattlePassGiftingAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS20_OnBattlePassGiftingAllowed");
static_assert(offsetof(BattlePassLandingPageS20_OnBattlePassGiftingAllowed, bGiftingAllowed) == 0x000000, "Member 'BattlePassLandingPageS20_OnBattlePassGiftingAllowed::bGiftingAllowed' has a wrong offset!");

// Function BattlePassS20UI.BattlePassLandingPageS20.OnBattlePassSubscriptionAllowed
// 0x0001 (0x0001 - 0x0000)
struct BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed final
{
public:
	bool                                          bSubscriptionAllowed;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong alignment on BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed");
static_assert(sizeof(BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed) == 0x000001, "Wrong size on BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed");
static_assert(offsetof(BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed, bSubscriptionAllowed) == 0x000000, "Member 'BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed::bSubscriptionAllowed' has a wrong offset!");

// Function BattlePassS20UI.BattlePassRewardPageS20.OnInitForPageType
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS20_OnInitForPageType final
{
public:
	ERewardPageType                               InRewardPageType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS20_OnInitForPageType) == 0x000001, "Wrong alignment on BattlePassRewardPageS20_OnInitForPageType");
static_assert(sizeof(BattlePassRewardPageS20_OnInitForPageType) == 0x000001, "Wrong size on BattlePassRewardPageS20_OnInitForPageType");
static_assert(offsetof(BattlePassRewardPageS20_OnInitForPageType, InRewardPageType) == 0x000000, "Member 'BattlePassRewardPageS20_OnInitForPageType::InRewardPageType' has a wrong offset!");

// Function BattlePassS20UI.BattlePassRewardPageS20.OnInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct BattlePassRewardPageS20_OnInputMethodChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS20_OnInputMethodChanged) == 0x000001, "Wrong alignment on BattlePassRewardPageS20_OnInputMethodChanged");
static_assert(sizeof(BattlePassRewardPageS20_OnInputMethodChanged) == 0x000001, "Wrong size on BattlePassRewardPageS20_OnInputMethodChanged");
static_assert(offsetof(BattlePassRewardPageS20_OnInputMethodChanged, InputType) == 0x000000, "Member 'BattlePassRewardPageS20_OnInputMethodChanged::InputType' has a wrong offset!");

// Function BattlePassS20UI.BattlePassRewardPageS20.OnPageChanged
// 0x0004 (0x0004 - 0x0000)
struct BattlePassRewardPageS20_OnPageChanged final
{
public:
	int32                                         PageNumber;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassRewardPageS20_OnPageChanged) == 0x000004, "Wrong alignment on BattlePassRewardPageS20_OnPageChanged");
static_assert(sizeof(BattlePassRewardPageS20_OnPageChanged) == 0x000004, "Wrong size on BattlePassRewardPageS20_OnPageChanged");
static_assert(offsetof(BattlePassRewardPageS20_OnPageChanged, PageNumber) == 0x000000, "Member 'BattlePassRewardPageS20_OnPageChanged::PageNumber' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.HandleClaimRewardComplete
// 0x0018 (0x0018 - 0x0000)
struct BattlePassScreenS20_HandleClaimRewardComplete final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         OfferTemplateIdList;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_HandleClaimRewardComplete) == 0x000008, "Wrong alignment on BattlePassScreenS20_HandleClaimRewardComplete");
static_assert(sizeof(BattlePassScreenS20_HandleClaimRewardComplete) == 0x000018, "Wrong size on BattlePassScreenS20_HandleClaimRewardComplete");
static_assert(offsetof(BattlePassScreenS20_HandleClaimRewardComplete, bSuccess) == 0x000000, "Member 'BattlePassScreenS20_HandleClaimRewardComplete::bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_HandleClaimRewardComplete, OfferTemplateIdList) == 0x000008, "Member 'BattlePassScreenS20_HandleClaimRewardComplete::OfferTemplateIdList' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnInsufficientFunds
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS20_OnInsufficientFunds final
{
public:
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnInsufficientFunds) == 0x000001, "Wrong alignment on BattlePassScreenS20_OnInsufficientFunds");
static_assert(sizeof(BattlePassScreenS20_OnInsufficientFunds) == 0x000001, "Wrong size on BattlePassScreenS20_OnInsufficientFunds");
static_assert(offsetof(BattlePassScreenS20_OnInsufficientFunds, CurrencyType) == 0x000000, "Member 'BattlePassScreenS20_OnInsufficientFunds::CurrencyType' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnInsufficientResource
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS20_OnInsufficientResource final
{
public:
	const class UFortPersistentResourceItemDefinition* PersistentResource;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnInsufficientResource) == 0x000008, "Wrong alignment on BattlePassScreenS20_OnInsufficientResource");
static_assert(sizeof(BattlePassScreenS20_OnInsufficientResource) == 0x000008, "Wrong size on BattlePassScreenS20_OnInsufficientResource");
static_assert(offsetof(BattlePassScreenS20_OnInsufficientResource, PersistentResource) == 0x000000, "Member 'BattlePassScreenS20_OnInsufficientResource::PersistentResource' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnItemDelayed
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS20_OnItemDelayed final
{
public:
	struct FTimespan                              Delay;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnItemDelayed) == 0x000008, "Wrong alignment on BattlePassScreenS20_OnItemDelayed");
static_assert(sizeof(BattlePassScreenS20_OnItemDelayed) == 0x000008, "Wrong size on BattlePassScreenS20_OnItemDelayed");
static_assert(offsetof(BattlePassScreenS20_OnItemDelayed, Delay) == 0x000000, "Member 'BattlePassScreenS20_OnItemDelayed::Delay' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct BattlePassScreenS20_OnLevelChanged final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnLevelChanged) == 0x000004, "Wrong alignment on BattlePassScreenS20_OnLevelChanged");
static_assert(sizeof(BattlePassScreenS20_OnLevelChanged) == 0x000004, "Wrong size on BattlePassScreenS20_OnLevelChanged");
static_assert(offsetof(BattlePassScreenS20_OnLevelChanged, Level) == 0x000000, "Member 'BattlePassScreenS20_OnLevelChanged::Level' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnSetClaimedRewardInfo
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS20_OnSetClaimedRewardInfo final
{
public:
	int32                                         OwnedRewards;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRewards;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnSetClaimedRewardInfo) == 0x000004, "Wrong alignment on BattlePassScreenS20_OnSetClaimedRewardInfo");
static_assert(sizeof(BattlePassScreenS20_OnSetClaimedRewardInfo) == 0x000008, "Wrong size on BattlePassScreenS20_OnSetClaimedRewardInfo");
static_assert(offsetof(BattlePassScreenS20_OnSetClaimedRewardInfo, OwnedRewards) == 0x000000, "Member 'BattlePassScreenS20_OnSetClaimedRewardInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetClaimedRewardInfo, TotalRewards) == 0x000004, "Member 'BattlePassScreenS20_OnSetClaimedRewardInfo::TotalRewards' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnSetDynamicInput
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS20_OnSetDynamicInput final
{
public:
	EBattlePassInputs                             InputType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UBattlePassInputData*             InputData;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnSetDynamicInput) == 0x000008, "Wrong alignment on BattlePassScreenS20_OnSetDynamicInput");
static_assert(sizeof(BattlePassScreenS20_OnSetDynamicInput) == 0x000010, "Wrong size on BattlePassScreenS20_OnSetDynamicInput");
static_assert(offsetof(BattlePassScreenS20_OnSetDynamicInput, InputType) == 0x000000, "Member 'BattlePassScreenS20_OnSetDynamicInput::InputType' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetDynamicInput, InputData) == 0x000008, "Member 'BattlePassScreenS20_OnSetDynamicInput::InputData' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnSetItemPrice
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS20_OnSetItemPrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattlePassCurrencyType                       CurrencyType;                                      // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS20_OnSetItemPrice) == 0x000004, "Wrong alignment on BattlePassScreenS20_OnSetItemPrice");
static_assert(sizeof(BattlePassScreenS20_OnSetItemPrice) == 0x000008, "Wrong size on BattlePassScreenS20_OnSetItemPrice");
static_assert(offsetof(BattlePassScreenS20_OnSetItemPrice, Cost) == 0x000000, "Member 'BattlePassScreenS20_OnSetItemPrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetItemPrice, CurrencyType) == 0x000004, "Member 'BattlePassScreenS20_OnSetItemPrice::CurrencyType' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnSetPrerequisiteInfo
// 0x0028 (0x0028 - 0x0000)
struct BattlePassScreenS20_OnSetPrerequisiteInfo final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OwnedRewards;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NeededRewards;                                     // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrerequisiteLock;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassScreenS20_OnSetPrerequisiteInfo) == 0x000008, "Wrong alignment on BattlePassScreenS20_OnSetPrerequisiteInfo");
static_assert(sizeof(BattlePassScreenS20_OnSetPrerequisiteInfo) == 0x000028, "Wrong size on BattlePassScreenS20_OnSetPrerequisiteInfo");
static_assert(offsetof(BattlePassScreenS20_OnSetPrerequisiteInfo, Description) == 0x000000, "Member 'BattlePassScreenS20_OnSetPrerequisiteInfo::Description' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetPrerequisiteInfo, OwnedRewards) == 0x000018, "Member 'BattlePassScreenS20_OnSetPrerequisiteInfo::OwnedRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetPrerequisiteInfo, NeededRewards) == 0x00001C, "Member 'BattlePassScreenS20_OnSetPrerequisiteInfo::NeededRewards' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetPrerequisiteInfo, bShowPrerequisiteLock) == 0x000020, "Member 'BattlePassScreenS20_OnSetPrerequisiteInfo::bShowPrerequisiteLock' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnSetResourcePrice
// 0x0010 (0x0010 - 0x0000)
struct BattlePassScreenS20_OnSetResourcePrice final
{
public:
	int32                                         Cost;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFortPersistentResourceItemDefinition* PersistentResource;                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnSetResourcePrice) == 0x000008, "Wrong alignment on BattlePassScreenS20_OnSetResourcePrice");
static_assert(sizeof(BattlePassScreenS20_OnSetResourcePrice) == 0x000010, "Wrong size on BattlePassScreenS20_OnSetResourcePrice");
static_assert(offsetof(BattlePassScreenS20_OnSetResourcePrice, Cost) == 0x000000, "Member 'BattlePassScreenS20_OnSetResourcePrice::Cost' has a wrong offset!");
static_assert(offsetof(BattlePassScreenS20_OnSetResourcePrice, PersistentResource) == 0x000008, "Member 'BattlePassScreenS20_OnSetResourcePrice::PersistentResource' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.OnTransitionItemDetails
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS20_OnTransitionItemDetails final
{
public:
	bool                                          bTransitionForward;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_OnTransitionItemDetails) == 0x000001, "Wrong alignment on BattlePassScreenS20_OnTransitionItemDetails");
static_assert(sizeof(BattlePassScreenS20_OnTransitionItemDetails) == 0x000001, "Wrong size on BattlePassScreenS20_OnTransitionItemDetails");
static_assert(offsetof(BattlePassScreenS20_OnTransitionItemDetails, bTransitionForward) == 0x000000, "Member 'BattlePassScreenS20_OnTransitionItemDetails::bTransitionForward' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.GetQuestPageDelay
// 0x0008 (0x0008 - 0x0000)
struct BattlePassScreenS20_GetQuestPageDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_GetQuestPageDelay) == 0x000008, "Wrong alignment on BattlePassScreenS20_GetQuestPageDelay");
static_assert(sizeof(BattlePassScreenS20_GetQuestPageDelay) == 0x000008, "Wrong size on BattlePassScreenS20_GetQuestPageDelay");
static_assert(offsetof(BattlePassScreenS20_GetQuestPageDelay, ReturnValue) == 0x000000, "Member 'BattlePassScreenS20_GetQuestPageDelay::ReturnValue' has a wrong offset!");

// Function BattlePassS20UI.BattlePassScreenS20.IsSeasonalCustomizationItemOwned
// 0x0001 (0x0001 - 0x0000)
struct BattlePassScreenS20_IsSeasonalCustomizationItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassScreenS20_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong alignment on BattlePassScreenS20_IsSeasonalCustomizationItemOwned");
static_assert(sizeof(BattlePassScreenS20_IsSeasonalCustomizationItemOwned) == 0x000001, "Wrong size on BattlePassScreenS20_IsSeasonalCustomizationItemOwned");
static_assert(offsetof(BattlePassScreenS20_IsSeasonalCustomizationItemOwned, ReturnValue) == 0x000000, "Member 'BattlePassScreenS20_IsSeasonalCustomizationItemOwned::ReturnValue' has a wrong offset!");

// Function BattlePassS20UI.FortBattlePassResourcesWidgetS20.OnBattleStarRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet::Rewards' has a wrong offset!");

// Function BattlePassS20UI.FortBattlePassResourcesWidgetS20.OnStylePointsRewardsSet
// 0x0004 (0x0004 - 0x0000)
struct FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet final
{
public:
	int32                                         Rewards;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet) == 0x000004, "Wrong alignment on FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet");
static_assert(sizeof(FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet) == 0x000004, "Wrong size on FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet");
static_assert(offsetof(FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet, Rewards) == 0x000000, "Member 'FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet::Rewards' has a wrong offset!");

}

