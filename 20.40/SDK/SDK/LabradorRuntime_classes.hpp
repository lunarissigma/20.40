#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LabradorRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "IrwinRuntime_classes.hpp"
#include "LabradorRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class LabradorRuntime.FortAIFaunaAnimInstance_Labrador
// 0x0060 (0x05E0 - 0x0580)
class UFortAIFaunaAnimInstance_Labrador final : public UFortAIFaunaAnimInstance
{
public:
	bool                                          bHighVelocity;                                     // 0x0580(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInterruptible;                                  // 0x0581(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocoToIdle;                                       // 0x0582(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdleToLoco;                                       // 0x0583(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpStartToJumpLoop;                              // 0x0584(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpLandToMovement;                               // 0x0585(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRunning;                                        // 0x0586(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdleToFalling;                                    // 0x0587(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToppledOnGround;                                  // 0x0588(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransitionToLand;                                 // 0x0589(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58A[0x2];                                      // 0x058A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDistance;                                    // 0x058C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetIsClose;                                    // 0x0590(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInTractorBeam;                                  // 0x0591(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFloating;                                       // 0x0592(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsToppled;                                        // 0x0593(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeaking;                                        // 0x0594(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinHighVelocityMagnitude;                          // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInterruptibleCurveValue;                        // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocoIdleTransitionThreshold;                       // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeedThreshold;                                 // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpLandToMovementInterruptibleThreshold;          // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTargetIsCloseDistance;                          // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName_Interruptible;                           // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TractorBeamStatusTags;                             // 0x05B8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D8[0x8];                                      // 0x05D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAIFaunaAnimInstance_Labrador">();
	}
	static class UFortAIFaunaAnimInstance_Labrador* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAIFaunaAnimInstance_Labrador>();
	}
};
static_assert(alignof(UFortAIFaunaAnimInstance_Labrador) == 0x000010, "Wrong alignment on UFortAIFaunaAnimInstance_Labrador");
static_assert(sizeof(UFortAIFaunaAnimInstance_Labrador) == 0x0005E0, "Wrong size on UFortAIFaunaAnimInstance_Labrador");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bHighVelocity) == 0x000580, "Member 'UFortAIFaunaAnimInstance_Labrador::bHighVelocity' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsInterruptible) == 0x000581, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsInterruptible' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bLocoToIdle) == 0x000582, "Member 'UFortAIFaunaAnimInstance_Labrador::bLocoToIdle' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIdleToLoco) == 0x000583, "Member 'UFortAIFaunaAnimInstance_Labrador::bIdleToLoco' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bJumpStartToJumpLoop) == 0x000584, "Member 'UFortAIFaunaAnimInstance_Labrador::bJumpStartToJumpLoop' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bJumpLandToMovement) == 0x000585, "Member 'UFortAIFaunaAnimInstance_Labrador::bJumpLandToMovement' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsRunning) == 0x000586, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsRunning' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIdleToFalling) == 0x000587, "Member 'UFortAIFaunaAnimInstance_Labrador::bIdleToFalling' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bToppledOnGround) == 0x000588, "Member 'UFortAIFaunaAnimInstance_Labrador::bToppledOnGround' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bTransitionToLand) == 0x000589, "Member 'UFortAIFaunaAnimInstance_Labrador::bTransitionToLand' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, TargetDistance) == 0x00058C, "Member 'UFortAIFaunaAnimInstance_Labrador::TargetDistance' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bTargetIsClose) == 0x000590, "Member 'UFortAIFaunaAnimInstance_Labrador::bTargetIsClose' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsInTractorBeam) == 0x000591, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsInTractorBeam' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsFloating) == 0x000592, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsFloating' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsToppled) == 0x000593, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsToppled' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, bIsLeaking) == 0x000594, "Member 'UFortAIFaunaAnimInstance_Labrador::bIsLeaking' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, MinHighVelocityMagnitude) == 0x000598, "Member 'UFortAIFaunaAnimInstance_Labrador::MinHighVelocityMagnitude' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, MaxInterruptibleCurveValue) == 0x00059C, "Member 'UFortAIFaunaAnimInstance_Labrador::MaxInterruptibleCurveValue' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, LocoIdleTransitionThreshold) == 0x0005A0, "Member 'UFortAIFaunaAnimInstance_Labrador::LocoIdleTransitionThreshold' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, RunSpeedThreshold) == 0x0005A4, "Member 'UFortAIFaunaAnimInstance_Labrador::RunSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, JumpLandToMovementInterruptibleThreshold) == 0x0005A8, "Member 'UFortAIFaunaAnimInstance_Labrador::JumpLandToMovementInterruptibleThreshold' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, MinTargetIsCloseDistance) == 0x0005AC, "Member 'UFortAIFaunaAnimInstance_Labrador::MinTargetIsCloseDistance' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, CurveName_Interruptible) == 0x0005B0, "Member 'UFortAIFaunaAnimInstance_Labrador::CurveName_Interruptible' has a wrong offset!");
static_assert(offsetof(UFortAIFaunaAnimInstance_Labrador, TractorBeamStatusTags) == 0x0005B8, "Member 'UFortAIFaunaAnimInstance_Labrador::TractorBeamStatusTags' has a wrong offset!");

// Class LabradorRuntime.FortLabradorComponent_Telemetry
// 0x0020 (0x0118 - 0x00F8)
class UFortLabradorComponent_Telemetry final : public UFortAIComponent_Telemetry
{
public:
	bool                                          bWasAwake;                                         // 0x00F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstigatorAwakeNetIDString;                        // 0x0100(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELabradorDespawnReason                        DespawnReason;                                     // 0x0110(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageReceivedFromPlayers;                         // 0x0114(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnTeleport();
	void OnWakeUp(class AActor* GoalActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLabradorComponent_Telemetry">();
	}
	static class UFortLabradorComponent_Telemetry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLabradorComponent_Telemetry>();
	}
};
static_assert(alignof(UFortLabradorComponent_Telemetry) == 0x000008, "Wrong alignment on UFortLabradorComponent_Telemetry");
static_assert(sizeof(UFortLabradorComponent_Telemetry) == 0x000118, "Wrong size on UFortLabradorComponent_Telemetry");
static_assert(offsetof(UFortLabradorComponent_Telemetry, bWasAwake) == 0x0000F8, "Member 'UFortLabradorComponent_Telemetry::bWasAwake' has a wrong offset!");
static_assert(offsetof(UFortLabradorComponent_Telemetry, InstigatorAwakeNetIDString) == 0x000100, "Member 'UFortLabradorComponent_Telemetry::InstigatorAwakeNetIDString' has a wrong offset!");
static_assert(offsetof(UFortLabradorComponent_Telemetry, DespawnReason) == 0x000110, "Member 'UFortLabradorComponent_Telemetry::DespawnReason' has a wrong offset!");
static_assert(offsetof(UFortLabradorComponent_Telemetry, DamageReceivedFromPlayers) == 0x000114, "Member 'UFortLabradorComponent_Telemetry::DamageReceivedFromPlayers' has a wrong offset!");

}

