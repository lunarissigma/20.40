#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_BoostJumpPack

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Enum_BoostJumpStates_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_BoostJumpPack.GA_BoostJumpPack_C
// 0x0220 (0x0CF8 - 0x0AD8)
class UGA_BoostJumpPack_C : public UFortGameplayAbility_JumpBoostPack
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AD8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Jump_Multiple;                                     // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE4[0x4];                                      // 0x0AE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Basic_Jump_Z_Adjust;                               // 0x0AE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FinalJumpHeight;                                   // 0x0B00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     EventTriggerData;                                  // 0x0B18(0x00B0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bJumpButtonHeld;                                   // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHoverButtonHeld;                                  // 0x0BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAtApex;                                           // 0x0BCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCB[0x1];                                      // 0x0BCB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            JetpackEffectHandle;                               // 0x0BCC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD4[0x4];                                      // 0x0BD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelFudge;                                         // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            RegenEffectHandle;                                 // 0x0BE4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bRegenEffectActive;                                // 0x0BEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BED[0x3];                                      // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BoostExecuteTags;                                  // 0x0BF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HoverButtonHeldCount;                              // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C14[0x4];                                      // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  HoverExecuteTags;                                  // 0x0C18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         JumpButtonHeldCount;                               // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3C[0x4];                                      // 0x0C3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  HoverReleaseTags;                                  // 0x0C40(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TimeStartedHovering;                               // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeStartedFalling;                                // 0x0C64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndHoverDelay;                                     // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndFallingDelay;                                   // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  BoostReleaseTags;                                  // 0x0C70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHasDied;                                          // 0x0C90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C91[0x3];                                      // 0x0C91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BoostCue;                                          // 0x0C94(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BoostJumpPackCue;                                  // 0x0C98(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9C[0x4];                                      // 0x0C9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 JetpackInUseEffect;                                // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggeredByJump;                                   // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockExecuteTags;                                  // 0x0CB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 JetpackInUseEffect_Alt;                            // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HidingPropTag;                                     // 0x0CD8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ZiplineTag;                                        // 0x0CDC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GliderRedeployTag;                                 // 0x0CE0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InitialBoostCue;                                   // 0x0CE4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirstBoost;                                       // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE9[0x3];                                      // 0x0CE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BoostEndCue;                                       // 0x0CEC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BoostOutOfFuelEndCue;                              // 0x0CF0(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Added_A54C58044C5CE8F3DABC60A214FC45E0();
	void Added_B611282348ECFDA3CD120D87734E357C();
	void Added_D3A68EA84FC920CD9E2949BE05D3A5AC();
	void Added_F6D39ED5491065B2594D37A44C404CA7();
	void Consider_Starting_Regen_Effect();
	void Consider_Stopping_Regen_Effect();
	void Delay_ProcessAbilityStateMachine();
	void DetermineStateToTransitionTo(Enum_BoostJumpStates* BoostState);
	void ExecuteUbergraph_GA_BoostJumpPack(int32 EntryPoint);
	void Handle_Jetpack_Equipped();
	void HandleBoostEnded();
	void HandleBoostJump();
	void HandleCurrentBoostStateChanged(EJumpBoostPackState PreviousState, EJumpBoostPackState CurrentState_0);
	void HandleFalling();
	void HandleHovering();
	void HandleIdle(bool bForceEndHovering);
	void HandleJetpackInitialBoost();
	bool IsUsingJetpackEffectActive();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void On_Reached_Jump_Apex();
	void OnAbilityCanceled();
	void OnCurrentStateChanged(EJumpBoostPackState InPreviousState, EJumpBoostPackState InCurrentState);
	void OnEnterVehicle();
	void OnFuelIsEmpty();
	void OnFuelIsFull();
	void OnPawnLanded(const struct FHitResult& Hit);
	void OnSavedPawnChanged_(class AFortPlayerPawn* PreviousPawn, class AFortPlayerPawn* NewPawn);
	void PotentiallyEndHovering(bool bForceEndHovering);
	void ProcessAbilityStateMachine();
	void ProcessTriggerData(const struct FGameplayTag& TagOne);
	void Reengage_Falling_Movement();
	void Reengage_Hovering_Movement();
	void Reset_Toggle_Input_State();
	void ResetTransitionVariables(bool bForceEndHovering);
	void SavePlayerPawn();
	void SetCurrentBoostState(EJumpBoostPackState NewState);
	void SetJumpHeight(class AFortPlayerPawn* Pawn, class AFortPlayerPawn** Pawn_Out, struct FVector* Jump_Height);
	void Setup_Notify_at_Apex(bool bNotifyApex);
	void Setup_PlayerPawn();
	void SetupTransitionVariables(const struct FGameplayTag& InTag);
	void Start_Regen_Effect();
	void Stop_Regen_Effect();
	void TransitionFromBoost(Enum_BoostJumpStates* TargetBoostState);
	void TransitionFromFalling(Enum_BoostJumpStates* TargetBoostState);
	void TransitionFromHovering(Enum_BoostJumpStates* TargetBoostState);

	class AFortPlayerPawn* Get_Player_Pawn(class UObject* Object) const;
	void GetFuel(float* Fuel) const;
	void GetMaxFuel(float* MaxFuel) const;
	float GetReserveFuel() const;
	bool IsBoostAllowed() const;
	bool IsCurrentlyDead(const struct FGameplayTag& TagOne) const;
	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;
	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload) const;
	bool NotInHidingSpot() const;
	bool Reasons_To_Reset_on_Transition(const struct FGameplayTag& Tag) const;
	void TransitionFromIdle(Enum_BoostJumpStates* TargetBoostState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_BoostJumpPack_C">();
	}
	static class UGA_BoostJumpPack_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_BoostJumpPack_C>();
	}
};
static_assert(alignof(UGA_BoostJumpPack_C) == 0x000008, "Wrong alignment on UGA_BoostJumpPack_C");
static_assert(sizeof(UGA_BoostJumpPack_C) == 0x000CF8, "Wrong size on UGA_BoostJumpPack_C");
static_assert(offsetof(UGA_BoostJumpPack_C, UberGraphFrame) == 0x000AD8, "Member 'UGA_BoostJumpPack_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, Jump_Multiple) == 0x000AE0, "Member 'UGA_BoostJumpPack_C::Jump_Multiple' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, Basic_Jump_Z_Adjust) == 0x000AE8, "Member 'UGA_BoostJumpPack_C::Basic_Jump_Z_Adjust' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, FinalJumpHeight) == 0x000B00, "Member 'UGA_BoostJumpPack_C::FinalJumpHeight' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, EventTriggerData) == 0x000B18, "Member 'UGA_BoostJumpPack_C::EventTriggerData' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bJumpButtonHeld) == 0x000BC8, "Member 'UGA_BoostJumpPack_C::bJumpButtonHeld' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bHoverButtonHeld) == 0x000BC9, "Member 'UGA_BoostJumpPack_C::bHoverButtonHeld' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bAtApex) == 0x000BCA, "Member 'UGA_BoostJumpPack_C::bAtApex' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, JetpackEffectHandle) == 0x000BCC, "Member 'UGA_BoostJumpPack_C::JetpackEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, FortPlayerPawn) == 0x000BD8, "Member 'UGA_BoostJumpPack_C::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, FuelFudge) == 0x000BE0, "Member 'UGA_BoostJumpPack_C::FuelFudge' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, RegenEffectHandle) == 0x000BE4, "Member 'UGA_BoostJumpPack_C::RegenEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bRegenEffectActive) == 0x000BEC, "Member 'UGA_BoostJumpPack_C::bRegenEffectActive' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostExecuteTags) == 0x000BF0, "Member 'UGA_BoostJumpPack_C::BoostExecuteTags' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, HoverButtonHeldCount) == 0x000C10, "Member 'UGA_BoostJumpPack_C::HoverButtonHeldCount' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, HoverExecuteTags) == 0x000C18, "Member 'UGA_BoostJumpPack_C::HoverExecuteTags' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, JumpButtonHeldCount) == 0x000C38, "Member 'UGA_BoostJumpPack_C::JumpButtonHeldCount' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, HoverReleaseTags) == 0x000C40, "Member 'UGA_BoostJumpPack_C::HoverReleaseTags' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, TimeStartedHovering) == 0x000C60, "Member 'UGA_BoostJumpPack_C::TimeStartedHovering' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, TimeStartedFalling) == 0x000C64, "Member 'UGA_BoostJumpPack_C::TimeStartedFalling' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, EndHoverDelay) == 0x000C68, "Member 'UGA_BoostJumpPack_C::EndHoverDelay' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, EndFallingDelay) == 0x000C6C, "Member 'UGA_BoostJumpPack_C::EndFallingDelay' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostReleaseTags) == 0x000C70, "Member 'UGA_BoostJumpPack_C::BoostReleaseTags' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bHasDied) == 0x000C90, "Member 'UGA_BoostJumpPack_C::bHasDied' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostCue) == 0x000C94, "Member 'UGA_BoostJumpPack_C::BoostCue' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostJumpPackCue) == 0x000C98, "Member 'UGA_BoostJumpPack_C::BoostJumpPackCue' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, JetpackInUseEffect) == 0x000CA0, "Member 'UGA_BoostJumpPack_C::JetpackInUseEffect' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, TriggeredByJump) == 0x000CA8, "Member 'UGA_BoostJumpPack_C::TriggeredByJump' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BlockExecuteTags) == 0x000CB0, "Member 'UGA_BoostJumpPack_C::BlockExecuteTags' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, JetpackInUseEffect_Alt) == 0x000CD0, "Member 'UGA_BoostJumpPack_C::JetpackInUseEffect_Alt' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, HidingPropTag) == 0x000CD8, "Member 'UGA_BoostJumpPack_C::HidingPropTag' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, ZiplineTag) == 0x000CDC, "Member 'UGA_BoostJumpPack_C::ZiplineTag' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, GliderRedeployTag) == 0x000CE0, "Member 'UGA_BoostJumpPack_C::GliderRedeployTag' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, InitialBoostCue) == 0x000CE4, "Member 'UGA_BoostJumpPack_C::InitialBoostCue' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, bFirstBoost) == 0x000CE8, "Member 'UGA_BoostJumpPack_C::bFirstBoost' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostEndCue) == 0x000CEC, "Member 'UGA_BoostJumpPack_C::BoostEndCue' has a wrong offset!");
static_assert(offsetof(UGA_BoostJumpPack_C, BoostOutOfFuelEndCue) == 0x000CF0, "Member 'UGA_BoostJumpPack_C::BoostOutOfFuelEndCue' has a wrong offset!");

}

