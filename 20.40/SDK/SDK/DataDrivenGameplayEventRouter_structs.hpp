#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataDrivenGameplayEventRouter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayEventRouter_structs.hpp"


namespace SDK
{

// Enum DataDrivenGameplayEventRouter.EGameplayEventNetPolicy
// NumValues: 0x0003
enum class EGameplayEventNetPolicy : uint8
{
	ServerOnly                               = 0,
	ClientOrServer                           = 1,
	EGameplayEventNetPolicy_MAX              = 2,
};

// ScriptStruct DataDrivenGameplayEventRouter.GameplayEventDescriptor
// 0x0010 (0x0010 - 0x0000)
struct FGameplayEventDescriptor final
{
public:
	class UScriptStruct*                          EventType;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStateful;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEventNetPolicy                       NetPolicy;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEventDescriptor) == 0x000008, "Wrong alignment on FGameplayEventDescriptor");
static_assert(sizeof(FGameplayEventDescriptor) == 0x000010, "Wrong size on FGameplayEventDescriptor");
static_assert(offsetof(FGameplayEventDescriptor, EventType) == 0x000000, "Member 'FGameplayEventDescriptor::EventType' has a wrong offset!");
static_assert(offsetof(FGameplayEventDescriptor, bIsStateful) == 0x000008, "Member 'FGameplayEventDescriptor::bIsStateful' has a wrong offset!");
static_assert(offsetof(FGameplayEventDescriptor, NetPolicy) == 0x000009, "Member 'FGameplayEventDescriptor::NetPolicy' has a wrong offset!");

// ScriptStruct DataDrivenGameplayEventRouter.GameplayEventSubscription
// 0x0050 (0x0050 - 0x0000)
struct FGameplayEventSubscription final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMemberReference                       EventDescriptor;                                   // 0x0008(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayEventListenerHandle           EventHandle;                                       // 0x0038(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventSubscription) == 0x000008, "Wrong alignment on FGameplayEventSubscription");
static_assert(sizeof(FGameplayEventSubscription) == 0x000050, "Wrong size on FGameplayEventSubscription");
static_assert(offsetof(FGameplayEventSubscription, Object) == 0x000000, "Member 'FGameplayEventSubscription::Object' has a wrong offset!");
static_assert(offsetof(FGameplayEventSubscription, EventDescriptor) == 0x000008, "Member 'FGameplayEventSubscription::EventDescriptor' has a wrong offset!");
static_assert(offsetof(FGameplayEventSubscription, EventHandle) == 0x000038, "Member 'FGameplayEventSubscription::EventHandle' has a wrong offset!");

// ScriptStruct DataDrivenGameplayEventRouter.GameplayEventHandlerFunction
// 0x0080 (0x0080 - 0x0000)
struct FGameplayEventHandlerFunction final
{
public:
	struct FMemberReference                       EventHandlerFunction;                              // 0x0000(0x0030)(Edit, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              EventHandlerFunctionDefaultValues;                 // 0x0030(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventHandlerFunction) == 0x000008, "Wrong alignment on FGameplayEventHandlerFunction");
static_assert(sizeof(FGameplayEventHandlerFunction) == 0x000080, "Wrong size on FGameplayEventHandlerFunction");
static_assert(offsetof(FGameplayEventHandlerFunction, EventHandlerFunction) == 0x000000, "Member 'FGameplayEventHandlerFunction::EventHandlerFunction' has a wrong offset!");
static_assert(offsetof(FGameplayEventHandlerFunction, EventHandlerFunctionDefaultValues) == 0x000030, "Member 'FGameplayEventHandlerFunction::EventHandlerFunctionDefaultValues' has a wrong offset!");

// ScriptStruct DataDrivenGameplayEventRouter.GameplayEventHandlerFunctions
// 0x0180 (0x0180 - 0x0000)
struct FGameplayEventHandlerFunctions final
{
public:
	struct FGameplayEventHandlerFunction          OnEventReceived;                                   // 0x0000(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayEventHandlerFunction          OnStatefulEventApplied;                            // 0x0080(0x0080)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayEventHandlerFunction          OnStatefulEventCleared;                            // 0x0100(0x0080)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventHandlerFunctions) == 0x000008, "Wrong alignment on FGameplayEventHandlerFunctions");
static_assert(sizeof(FGameplayEventHandlerFunctions) == 0x000180, "Wrong size on FGameplayEventHandlerFunctions");
static_assert(offsetof(FGameplayEventHandlerFunctions, OnEventReceived) == 0x000000, "Member 'FGameplayEventHandlerFunctions::OnEventReceived' has a wrong offset!");
static_assert(offsetof(FGameplayEventHandlerFunctions, OnStatefulEventApplied) == 0x000080, "Member 'FGameplayEventHandlerFunctions::OnStatefulEventApplied' has a wrong offset!");
static_assert(offsetof(FGameplayEventHandlerFunctions, OnStatefulEventCleared) == 0x000100, "Member 'FGameplayEventHandlerFunctions::OnStatefulEventCleared' has a wrong offset!");

// ScriptStruct DataDrivenGameplayEventRouter.GameplayEventFunction
// 0x0018 (0x0018 - 0x0000)
struct FGameplayEventFunction final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEventSubscription>     EventSubscriptions;                                // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventFunction) == 0x000008, "Wrong alignment on FGameplayEventFunction");
static_assert(sizeof(FGameplayEventFunction) == 0x000018, "Wrong size on FGameplayEventFunction");
static_assert(offsetof(FGameplayEventFunction, EventSubscriptions) == 0x000008, "Member 'FGameplayEventFunction::EventSubscriptions' has a wrong offset!");

}

