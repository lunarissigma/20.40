#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WarOverlay_CalendarManager

#include "Basic.hpp"

#include "Bp_E_WarMinimap_Progression_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_WarOverlay_CalendarManager.B_WarOverlay_CalendarManager_C
// 0x0360 (0x05D0 - 0x0270)
class AB_WarOverlay_CalendarManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<EBp_E_WarMinimap_Progression, TSoftObjectPtr<class UTexture>> OutlineTextures;              // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture*                               OverlayTexture;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, EBp_E_WarMinimap_Progression> CalendarEventsServer;                          // 0x02D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBp_E_WarMinimap_Progression                  WarMinimapProgression;                             // 0x0328(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, EBp_E_WarMinimap_Progression> CalendarEventsClient;                          // 0x0330(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ExportToDiskFileName;                              // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DiskRenderTarget;                                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     RenderTargetMaterial;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     RenderTargetFOWMaterial;                           // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderTargetMID;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderTargetFOWMID;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DiskFOWRenderTarget;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureRenderTarget2D>  DiskRenderTargetSoftReference;                     // 0x03C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureRenderTarget2D>  FOWDiskRenderTargetSoftReference;                  // 0x03E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RenderTargetMaterialSoftReference;                 // 0x0410(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RenderTargetFOWMaterialSoftReference;              // 0x0438(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture*                               FOWTexture;                                        // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBp_E_WarMinimap_Progression, TSoftObjectPtr<class UTexture>> MapTextures;                  // 0x0468(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EBp_E_WarMinimap_Progression                  WarMinimapProgressionRT;                           // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 DiskMaskRenderTarget;                              // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTextureRenderTarget2D>  MaskDiskRenderTargetSoftReference;                 // 0x04C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      RenderTargetMaskMaterialSoftReference;             // 0x04F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     RenderTargetMaskMaterial;                          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderTargetMaskMID;                               // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBp_E_WarMinimap_Progression, TSoftObjectPtr<class UTexture>> FOWTextures;                  // 0x0528(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EBp_E_WarMinimap_Progression, TSoftObjectPtr<class UTexture>> CutoutTextures;               // 0x0578(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture*                               CutoutTexture;                                     // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void WriteRTs_Export();
	void UpdateMinimap();
	void ReceiveBeginPlay();
	void QueryCalendarEvents(const TMap<class FString, EBp_E_WarMinimap_Progression>& Events, bool* EventFound, class FString* FoundEventName, float* EventTimespanRatio);
	void OnSyncComplete_12BC77C74A5CD039BEC03891F923418F();
	void OnRep_WarMinimapProgression();
	void OnReady_FBF86A384B85D297CFEC6B991AFC2469(TScriptInterface<class IFortMiniMapInterface> MiniMapInterface);
	void OnReady_633EF2064DFEAB780A2DD58061CF9E92();
	void OnLoaded_D1CE24C24DAB6D66E97E7D87F1194270(class UObject* Loaded);
	void OnLoaded_1E549B584FBE88E89239A0843F49FBAC(class UObject* Loaded);
	void OnExportMiniMapComplete(bool bSuccess);
	void LoadSoftReferences();
	void FindAndSetProgression(const TMap<class FString, EBp_E_WarMinimap_Progression>& Events);
	void ExecuteUbergraph_B_WarOverlay_CalendarManager(int32 EntryPoint);
	void ClearVariables();
	void ClearRT();
	void ClearMaskRT();
	void ClearFOWRT();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_WarOverlay_CalendarManager_C">();
	}
	static class AB_WarOverlay_CalendarManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_WarOverlay_CalendarManager_C>();
	}
};
static_assert(alignof(AB_WarOverlay_CalendarManager_C) == 0x000008, "Wrong alignment on AB_WarOverlay_CalendarManager_C");
static_assert(sizeof(AB_WarOverlay_CalendarManager_C) == 0x0005D0, "Wrong size on AB_WarOverlay_CalendarManager_C");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, UberGraphFrame) == 0x000270, "Member 'AB_WarOverlay_CalendarManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, DefaultSceneRoot) == 0x000278, "Member 'AB_WarOverlay_CalendarManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, OutlineTextures) == 0x000280, "Member 'AB_WarOverlay_CalendarManager_C::OutlineTextures' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, OverlayTexture) == 0x0002D0, "Member 'AB_WarOverlay_CalendarManager_C::OverlayTexture' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, CalendarEventsServer) == 0x0002D8, "Member 'AB_WarOverlay_CalendarManager_C::CalendarEventsServer' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, WarMinimapProgression) == 0x000328, "Member 'AB_WarOverlay_CalendarManager_C::WarMinimapProgression' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, CalendarEventsClient) == 0x000330, "Member 'AB_WarOverlay_CalendarManager_C::CalendarEventsClient' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, ExportToDiskFileName) == 0x000380, "Member 'AB_WarOverlay_CalendarManager_C::ExportToDiskFileName' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, DiskRenderTarget) == 0x000390, "Member 'AB_WarOverlay_CalendarManager_C::DiskRenderTarget' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMaterial) == 0x000398, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMaterial' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetFOWMaterial) == 0x0003A0, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetFOWMaterial' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMID) == 0x0003A8, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMID' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetFOWMID) == 0x0003B0, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetFOWMID' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, DiskFOWRenderTarget) == 0x0003B8, "Member 'AB_WarOverlay_CalendarManager_C::DiskFOWRenderTarget' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, DiskRenderTargetSoftReference) == 0x0003C0, "Member 'AB_WarOverlay_CalendarManager_C::DiskRenderTargetSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, FOWDiskRenderTargetSoftReference) == 0x0003E8, "Member 'AB_WarOverlay_CalendarManager_C::FOWDiskRenderTargetSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMaterialSoftReference) == 0x000410, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMaterialSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetFOWMaterialSoftReference) == 0x000438, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetFOWMaterialSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, FOWTexture) == 0x000460, "Member 'AB_WarOverlay_CalendarManager_C::FOWTexture' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, MapTextures) == 0x000468, "Member 'AB_WarOverlay_CalendarManager_C::MapTextures' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, WarMinimapProgressionRT) == 0x0004B8, "Member 'AB_WarOverlay_CalendarManager_C::WarMinimapProgressionRT' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, DiskMaskRenderTarget) == 0x0004C0, "Member 'AB_WarOverlay_CalendarManager_C::DiskMaskRenderTarget' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, MaskDiskRenderTargetSoftReference) == 0x0004C8, "Member 'AB_WarOverlay_CalendarManager_C::MaskDiskRenderTargetSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMaskMaterialSoftReference) == 0x0004F0, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMaskMaterialSoftReference' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMaskMaterial) == 0x000518, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMaskMaterial' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, RenderTargetMaskMID) == 0x000520, "Member 'AB_WarOverlay_CalendarManager_C::RenderTargetMaskMID' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, FOWTextures) == 0x000528, "Member 'AB_WarOverlay_CalendarManager_C::FOWTextures' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, CutoutTextures) == 0x000578, "Member 'AB_WarOverlay_CalendarManager_C::CutoutTextures' has a wrong offset!");
static_assert(offsetof(AB_WarOverlay_CalendarManager_C, CutoutTexture) == 0x0005C8, "Member 'AB_WarOverlay_CalendarManager_C::CutoutTexture' has a wrong offset!");

}

