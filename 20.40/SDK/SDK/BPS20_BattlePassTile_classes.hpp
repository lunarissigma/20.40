#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS20_BattlePassTile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BattlePassBase_structs.hpp"
#include "BattlePassBase_classes.hpp"
#include "FortniteUI_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BPS20_BattlePassTile.BPS20_BattlePassTile_C
// 0x0110 (0x11E0 - 0x10D0)
class UBPS20_BattlePassTile_C final : public UFortBattlePassTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x10D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hold_Completed;                                    // 0x10D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Secondary_Hold_Progress;                           // 0x10E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hold_Progress;                                     // 0x10E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       GrowTile;                                          // 0x10F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_Burst;                                       // 0x10F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal_Hide;                                       // 0x1100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal;                                            // 0x1108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TintOnpeek;                                        // 0x1110(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Select;                                            // 0x1118(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Item_Hover;                                        // 0x1120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              Availability_Switcher;                             // 0x1128(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Available_State;                                   // 0x1130(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_FreeViolator;                               // 0x1138(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 EmptyBackground;                                   // 0x1140(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PriceInfo;                                      // 0x1148(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HBox_locks;                                        // 0x1150(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x1158(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_32;                                          // 0x1160(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Lock_Purple;                                 // 0x1168(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Lock_Red;                                    // 0x1170(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Owned;                                       // 0x1178(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Preview;                                     // 0x1180(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Progress;                                    // 0x1188(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_selected_LR;                                 // 0x1190(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_selected_TB;                                 // 0x1198(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Locked_Overlay;                                    // 0x11A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OffscreenOverlay;                                  // 0x11A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Delayed;                                   // 0x11B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Input;                                     // 0x11B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Price;                                        // 0x11C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonVisibilitySwitcher*              VisibilitySwitcher_Included;                       // 0x11C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          has_prerequisite;                                  // 0x11D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Selected;                                          // 0x11D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hovered;                                           // 0x11D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnHoldCompleted();
	void BP_OnHoldEnded(const float HoldPercentage, const bool bInUseSecondaryHoldAnimation);
	void BP_OnHoldReset();
	void BP_OnHoldStarted(const float HoldPercentage, const bool bInUseSecondaryHoldAnimation);
	void BP_OnHovered();
	void BP_OnUnhovered();
	void ExecuteUbergraph_BPS20_BattlePassTile(int32 EntryPoint);
	void OnAffordabilityChanged(const bool bHasEnougCurrency);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnHighlighted();
	void OnLockedProgressUpdated(const float Progress, const int32 CurrentlyOwnedRewards, const int32 NeededRewards);
	void OnLockedStateUpdated(const bool OwnsBattlePass, const bool ParentUnlocked, const bool HasRemainingPrerequisites, const bool bIsDelayed);
	void OnPeeked();
	void OnPreviewed();
	void OnRevealed();
	void OnSetCurrencyAndPrice(const EBattlePassCurrencyType Currency, const int32 Price);
	void OnSetTrack(const bool bIsFreeTrack, const bool bOwnsBattlePass);
	void OnStateChanged(const EBattlePassTileAvailabilityStates NewState);
	void OnUnhighlighted();
	void OnUnpreviewed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPS20_BattlePassTile_C">();
	}
	static class UBPS20_BattlePassTile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPS20_BattlePassTile_C>();
	}
};
static_assert(alignof(UBPS20_BattlePassTile_C) == 0x000010, "Wrong alignment on UBPS20_BattlePassTile_C");
static_assert(sizeof(UBPS20_BattlePassTile_C) == 0x0011E0, "Wrong size on UBPS20_BattlePassTile_C");
static_assert(offsetof(UBPS20_BattlePassTile_C, UberGraphFrame) == 0x0010D0, "Member 'UBPS20_BattlePassTile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Hold_Completed) == 0x0010D8, "Member 'UBPS20_BattlePassTile_C::Hold_Completed' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Secondary_Hold_Progress) == 0x0010E0, "Member 'UBPS20_BattlePassTile_C::Secondary_Hold_Progress' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Hold_Progress) == 0x0010E8, "Member 'UBPS20_BattlePassTile_C::Hold_Progress' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, GrowTile) == 0x0010F0, "Member 'UBPS20_BattlePassTile_C::GrowTile' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Hover_Burst) == 0x0010F8, "Member 'UBPS20_BattlePassTile_C::Hover_Burst' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Reveal_Hide) == 0x001100, "Member 'UBPS20_BattlePassTile_C::Reveal_Hide' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Reveal) == 0x001108, "Member 'UBPS20_BattlePassTile_C::Reveal' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, TintOnpeek) == 0x001110, "Member 'UBPS20_BattlePassTile_C::TintOnpeek' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Select) == 0x001118, "Member 'UBPS20_BattlePassTile_C::Select' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Item_Hover) == 0x001120, "Member 'UBPS20_BattlePassTile_C::Item_Hover' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Availability_Switcher) == 0x001128, "Member 'UBPS20_BattlePassTile_C::Availability_Switcher' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Available_State) == 0x001130, "Member 'UBPS20_BattlePassTile_C::Available_State' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Border_FreeViolator) == 0x001138, "Member 'UBPS20_BattlePassTile_C::Border_FreeViolator' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, EmptyBackground) == 0x001140, "Member 'UBPS20_BattlePassTile_C::EmptyBackground' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, HB_PriceInfo) == 0x001148, "Member 'UBPS20_BattlePassTile_C::HB_PriceInfo' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, HBox_locks) == 0x001150, "Member 'UBPS20_BattlePassTile_C::HBox_locks' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image) == 0x001158, "Member 'UBPS20_BattlePassTile_C::Image' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_32) == 0x001160, "Member 'UBPS20_BattlePassTile_C::Image_32' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_Lock_Purple) == 0x001168, "Member 'UBPS20_BattlePassTile_C::Image_Lock_Purple' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_Lock_Red) == 0x001170, "Member 'UBPS20_BattlePassTile_C::Image_Lock_Red' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_Owned) == 0x001178, "Member 'UBPS20_BattlePassTile_C::Image_Owned' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_Preview) == 0x001180, "Member 'UBPS20_BattlePassTile_C::Image_Preview' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_Progress) == 0x001188, "Member 'UBPS20_BattlePassTile_C::Image_Progress' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_selected_LR) == 0x001190, "Member 'UBPS20_BattlePassTile_C::Image_selected_LR' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Image_selected_TB) == 0x001198, "Member 'UBPS20_BattlePassTile_C::Image_selected_TB' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Locked_Overlay) == 0x0011A0, "Member 'UBPS20_BattlePassTile_C::Locked_Overlay' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, OffscreenOverlay) == 0x0011A8, "Member 'UBPS20_BattlePassTile_C::OffscreenOverlay' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Overlay_Delayed) == 0x0011B0, "Member 'UBPS20_BattlePassTile_C::Overlay_Delayed' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Overlay_Input) == 0x0011B8, "Member 'UBPS20_BattlePassTile_C::Overlay_Input' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Text_Price) == 0x0011C0, "Member 'UBPS20_BattlePassTile_C::Text_Price' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, VisibilitySwitcher_Included) == 0x0011C8, "Member 'UBPS20_BattlePassTile_C::VisibilitySwitcher_Included' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, has_prerequisite) == 0x0011D0, "Member 'UBPS20_BattlePassTile_C::has_prerequisite' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Selected) == 0x0011D1, "Member 'UBPS20_BattlePassTile_C::Selected' has a wrong offset!");
static_assert(offsetof(UBPS20_BattlePassTile_C, Hovered) == 0x0011D2, "Member 'UBPS20_BattlePassTile_C::Hovered' has a wrong offset!");

}

