#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePassS20UI

#include "Basic.hpp"

#include "BattlePassS20UI_classes.hpp"
#include "BattlePassS20UI_parameters.hpp"


namespace SDK
{

// Function BattlePassS20UI.FortBattlePassTutorialTooltipS20.HideTooltip
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTutorialTooltipS20::HideTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltipS20", "HideTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassS20UI.FortBattlePassTutorialTooltipS20.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Text                                                   (Parm, NativeAccessSpecifierPublic)

void UFortBattlePassTutorialTooltipS20::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltipS20", "SetText");

	Params::FortBattlePassTutorialTooltipS20_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassS20UI.FortBattlePassTutorialTooltipS20.ShowTooltip
// (Event, Protected, BlueprintEvent)

void UFortBattlePassTutorialTooltipS20::ShowTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassTutorialTooltipS20", "ShowTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassS20UI.BattlePassLandingPageS20.OnBattlePassGiftingAllowed
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bGiftingAllowed                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassLandingPageS20::OnBattlePassGiftingAllowed(const bool bGiftingAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageS20", "OnBattlePassGiftingAllowed");

	Params::BattlePassLandingPageS20_OnBattlePassGiftingAllowed Parms{};

	Parms.bGiftingAllowed = bGiftingAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassLandingPageS20.OnBattlePassOwned
// (Event, Public, BlueprintEvent)

void UBattlePassLandingPageS20::OnBattlePassOwned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageS20", "OnBattlePassOwned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassS20UI.BattlePassLandingPageS20.OnBattlePassSubscriptionAllowed
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bSubscriptionAllowed                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassLandingPageS20::OnBattlePassSubscriptionAllowed(const bool bSubscriptionAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassLandingPageS20", "OnBattlePassSubscriptionAllowed");

	Params::BattlePassLandingPageS20_OnBattlePassSubscriptionAllowed Parms{};

	Parms.bSubscriptionAllowed = bSubscriptionAllowed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassRewardPageS20.OnInitForPageType
// (Event, Public, BlueprintEvent)
// Parameters:
// const ERewardPageType                   InRewardPageType                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassRewardPageS20::OnInitForPageType(const ERewardPageType InRewardPageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassRewardPageS20", "OnInitForPageType");

	Params::BattlePassRewardPageS20_OnInitForPageType Parms{};

	Parms.InRewardPageType = InRewardPageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassRewardPageS20.OnInputMethodChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const ECommonInputType                  InputType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassRewardPageS20::OnInputMethodChanged(const ECommonInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassRewardPageS20", "OnInputMethodChanged");

	Params::BattlePassRewardPageS20_OnInputMethodChanged Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassRewardPageS20.OnPageChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const int32                             PageNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassRewardPageS20::OnPageChanged(const int32 PageNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassRewardPageS20", "OnPageChanged");

	Params::BattlePassRewardPageS20_OnPageChanged Parms{};

	Parms.PageNumber = PageNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.HandleClaimRewardComplete
// (Final, Native, Private, HasOutParams)
// Parameters:
// const bool                              bSuccess                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            OfferTemplateIdList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::HandleClaimRewardComplete(const bool bSuccess, const TArray<class FString>& OfferTemplateIdList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "HandleClaimRewardComplete");

	Params::BattlePassScreenS20_HandleClaimRewardComplete Parms{};

	Parms.bSuccess = bSuccess;
	Parms.OfferTemplateIdList = std::move(OfferTemplateIdList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassS20UI.BattlePassScreenS20.HandleSwitcherVisibilityShown
// (Final, Native, Public, BlueprintCallable)

void UBattlePassScreenS20::HandleSwitcherVisibilityShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "HandleSwitcherVisibilityShown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassS20UI.BattlePassScreenS20.OnBattlePassOwned
// (Event, Protected, BlueprintEvent)

void UBattlePassScreenS20::OnBattlePassOwned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnBattlePassOwned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnInsufficientFunds
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EBattlePassCurrencyType           CurrencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnInsufficientFunds(const EBattlePassCurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnInsufficientFunds");

	Params::BattlePassScreenS20_OnInsufficientFunds Parms{};

	Parms.CurrencyType = CurrencyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnInsufficientResource
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortPersistentResourceItemDefinition*PersistentResource                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnInsufficientResource(const class UFortPersistentResourceItemDefinition* PersistentResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnInsufficientResource");

	Params::BattlePassScreenS20_OnInsufficientResource Parms{};

	Parms.PersistentResource = PersistentResource;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnItemDelayed
// (Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FTimespan&                 Delay                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnItemDelayed(const struct FTimespan& Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnItemDelayed");

	Params::BattlePassScreenS20_OnItemDelayed Parms{};

	Parms.Delay = std::move(Delay);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnLevelChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Level                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnLevelChanged(const int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnLevelChanged");

	Params::BattlePassScreenS20_OnLevelChanged Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnSetClaimedRewardInfo
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             OwnedRewards                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TotalRewards                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnSetClaimedRewardInfo(const int32 OwnedRewards, const int32 TotalRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnSetClaimedRewardInfo");

	Params::BattlePassScreenS20_OnSetClaimedRewardInfo Parms{};

	Parms.OwnedRewards = OwnedRewards;
	Parms.TotalRewards = TotalRewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnSetDynamicInput
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EBattlePassInputs                 InputType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UBattlePassInputData*       InputData                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnSetDynamicInput(const EBattlePassInputs InputType, const class UBattlePassInputData* InputData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnSetDynamicInput");

	Params::BattlePassScreenS20_OnSetDynamicInput Parms{};

	Parms.InputType = InputType;
	Parms.InputData = InputData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnSetItemPrice
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Cost                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EBattlePassCurrencyType           CurrencyType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnSetItemPrice(const int32 Cost, const EBattlePassCurrencyType CurrencyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnSetItemPrice");

	Params::BattlePassScreenS20_OnSetItemPrice Parms{};

	Parms.Cost = Cost;
	Parms.CurrencyType = CurrencyType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnSetPrerequisiteInfo
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Description                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             OwnedRewards                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             NeededRewards                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bShowPrerequisiteLock                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnSetPrerequisiteInfo(const class FText& Description, const int32 OwnedRewards, const int32 NeededRewards, const bool bShowPrerequisiteLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnSetPrerequisiteInfo");

	Params::BattlePassScreenS20_OnSetPrerequisiteInfo Parms{};

	Parms.Description = std::move(Description);
	Parms.OwnedRewards = OwnedRewards;
	Parms.NeededRewards = NeededRewards;
	Parms.bShowPrerequisiteLock = bShowPrerequisiteLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnSetResourcePrice
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Cost                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortPersistentResourceItemDefinition*PersistentResource                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnSetResourcePrice(const int32 Cost, const class UFortPersistentResourceItemDefinition* PersistentResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnSetResourcePrice");

	Params::BattlePassScreenS20_OnSetResourcePrice Parms{};

	Parms.Cost = Cost;
	Parms.PersistentResource = PersistentResource;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OnTransitionItemDetails
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bTransitionForward                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBattlePassScreenS20::OnTransitionItemDetails(const bool bTransitionForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OnTransitionItemDetails");

	Params::BattlePassScreenS20_OnTransitionItemDetails Parms{};

	Parms.bTransitionForward = bTransitionForward;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.BattlePassScreenS20.OverviewShowAnimationFinished
// (Final, Native, Public, BlueprintCallable)

void UBattlePassScreenS20::OverviewShowAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "OverviewShowAnimationFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BattlePassS20UI.BattlePassScreenS20.GetQuestPageDelay
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan UBattlePassScreenS20::GetQuestPageDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "GetQuestPageDelay");

	Params::BattlePassScreenS20_GetQuestPageDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassS20UI.BattlePassScreenS20.IsSeasonalCustomizationItemOwned
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBattlePassScreenS20::IsSeasonalCustomizationItemOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BattlePassScreenS20", "IsSeasonalCustomizationItemOwned");

	Params::BattlePassScreenS20_IsSeasonalCustomizationItemOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlePassS20UI.FortBattlePassResourcesWidgetS20.OnBattleStarRewardsSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Rewards                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassResourcesWidgetS20::OnBattleStarRewardsSet(const int32 Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassResourcesWidgetS20", "OnBattleStarRewardsSet");

	Params::FortBattlePassResourcesWidgetS20_OnBattleStarRewardsSet Parms{};

	Parms.Rewards = Rewards;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlePassS20UI.FortBattlePassResourcesWidgetS20.OnStylePointsRewardsSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Rewards                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortBattlePassResourcesWidgetS20::OnStylePointsRewardsSet(const int32 Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortBattlePassResourcesWidgetS20", "OnStylePointsRewardsSet");

	Params::FortBattlePassResourcesWidgetS20_OnStylePointsRewardsSet Parms{};

	Parms.Rewards = Rewards;

	UObject::ProcessEvent(Func, &Parms);
}

}

