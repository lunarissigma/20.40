#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_structs.hpp"
#include "MovieScene_classes.hpp"
#include "MovieSceneTracks_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class UMG.DragDropOperation
// 0x0068 (0x0090 - 0x0028)
class UDragDropOperation : public UObject
{
public:
	class FString                                 Tag;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Payload;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                DefaultDragVisual;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDragPivot                                    Pivot;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UDragDropOperation* Operation)> OnDrop;                      // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UDragDropOperation* Operation)> OnDragCancelled;             // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UDragDropOperation* Operation)> OnDragged;                   // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void DragCancelled(const struct FPointerEvent& PointerEvent);
	void Dragged(const struct FPointerEvent& PointerEvent);
	void Drop(const struct FPointerEvent& PointerEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragDropOperation">();
	}
	static class UDragDropOperation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragDropOperation>();
	}
};
static_assert(alignof(UDragDropOperation) == 0x000008, "Wrong alignment on UDragDropOperation");
static_assert(sizeof(UDragDropOperation) == 0x000090, "Wrong size on UDragDropOperation");
static_assert(offsetof(UDragDropOperation, Tag) == 0x000028, "Member 'UDragDropOperation::Tag' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, Payload) == 0x000038, "Member 'UDragDropOperation::Payload' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, DefaultDragVisual) == 0x000040, "Member 'UDragDropOperation::DefaultDragVisual' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, Pivot) == 0x000048, "Member 'UDragDropOperation::Pivot' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, Offset) == 0x000050, "Member 'UDragDropOperation::Offset' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, OnDrop) == 0x000060, "Member 'UDragDropOperation::OnDrop' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, OnDragCancelled) == 0x000070, "Member 'UDragDropOperation::OnDragCancelled' has a wrong offset!");
static_assert(offsetof(UDragDropOperation, OnDragged) == 0x000080, "Member 'UDragDropOperation::OnDragged' has a wrong offset!");

// Class UMG.Visual
// 0x0000 (0x0028 - 0x0028)
class UVisual : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Visual">();
	}
	static class UVisual* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisual>();
	}
};
static_assert(alignof(UVisual) == 0x000008, "Wrong alignment on UVisual");
static_assert(sizeof(UVisual) == 0x000028, "Wrong size on UVisual");

// Class UMG.Widget
// 0x00F0 (0x0118 - 0x0028)
class UWidget : public UVisual
{
public:
	class UPanelSlot*                             Slot;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, TextExportTransient, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             bIsEnabledDelegate;                                // 0x0030(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ToolTipTextDelegate;                               // 0x003C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UWidget*                                ToolTipWidget;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ToolTipWidgetDelegate;                             // 0x0068(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             VisibilityDelegate;                                // 0x0074(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetTransform                       RenderTransform;                                   // 0x0080(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              RenderTransformPivot;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlowDirectionPreference                      FlowDirectionPreference;                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsVariable : 1;                                   // 0x00C9(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCreatedByConstructionScript : 1;                  // 0x00C9(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEnabled : 1;                                    // 0x00C9(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Cursor : 1;                              // 0x00C9(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsVolatile : 1;                                   // 0x00C9(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	EMouseCursor                                  Cursor;                                            // 0x00CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetClipping                               Clipping;                                          // 0x00CB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderOpacity;                                     // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateAccessibleWidgetData*             AccessibleWidgetData;                              // 0x00D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetNavigation*                      Navigation;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPropertyBinding*>               NativeBindings;                                    // 0x0108(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void ForceLayoutPrepass();
	void ForceVolatile(bool bForce);
	void InvalidateLayoutAndVolatility();
	void RemoveFromParent();
	void ResetCursor();
	void SetAllNavigationRules(EUINavigationRule Rule, class FName WidgetToFocus);
	void SetClipping(EWidgetClipping InClipping);
	void SetCursor(EMouseCursor InCursor);
	void SetFocus();
	void SetIsEnabled(bool bInIsEnabled);
	void SetKeyboardFocus();
	void SetNavigationRule(EUINavigation Direction, EUINavigationRule Rule, class FName WidgetToFocus);
	void SetNavigationRuleBase(EUINavigation Direction, EUINavigationRule Rule);
	void SetNavigationRuleCustom(EUINavigation Direction, TDelegate<void(EUINavigation Navigation)> InCustomDelegate);
	void SetNavigationRuleCustomBoundary(EUINavigation Direction, TDelegate<void(EUINavigation Navigation)> InCustomDelegate);
	void SetNavigationRuleExplicit(EUINavigation Direction, class UWidget* InWidget);
	void SetRenderOpacity(float InOpacity);
	void SetRenderScale(const struct FVector2D& Scale);
	void SetRenderShear(const struct FVector2D& Shear);
	void SetRenderTransform(const struct FWidgetTransform& InTransform);
	void SetRenderTransformAngle(float Angle);
	void SetRenderTransformPivot(const struct FVector2D& Pivot);
	void SetRenderTranslation(const struct FVector2D& Translation);
	void SetToolTip(class UWidget* Widget);
	void SetToolTipText(const class FText& InToolTipText);
	void SetUserFocus(class APlayerController* PlayerController);
	void SetVisibility(ESlateVisibility InVisibility);

	class FText GetAccessibleSummaryText() const;
	class FText GetAccessibleText() const;
	const struct FGeometry GetCachedGeometry() const;
	EWidgetClipping GetClipping() const;
	struct FVector2D GetDesiredSize() const;
	class UGameInstance* GetGameInstance() const;
	bool GetIsEnabled() const;
	class ULocalPlayer* GetOwningLocalPlayer() const;
	class APlayerController* GetOwningPlayer() const;
	const struct FGeometry GetPaintSpaceGeometry() const;
	class UPanelWidget* GetParent() const;
	float GetRenderOpacity() const;
	float GetRenderTransformAngle() const;
	const struct FGeometry GetTickSpaceGeometry() const;
	ESlateVisibility GetVisibility() const;
	bool HasAnyUserFocus() const;
	bool HasFocusedDescendants() const;
	bool HasKeyboardFocus() const;
	bool HasMouseCapture() const;
	bool HasMouseCaptureByUser(int32 UserIndex, int32 PointerIndex) const;
	bool HasUserFocus(class APlayerController* PlayerController) const;
	bool HasUserFocusedDescendants(class APlayerController* PlayerController) const;
	bool IsHovered() const;
	bool IsVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget">();
	}
	static class UWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget>();
	}
};
static_assert(alignof(UWidget) == 0x000008, "Wrong alignment on UWidget");
static_assert(sizeof(UWidget) == 0x000118, "Wrong size on UWidget");
static_assert(offsetof(UWidget, Slot) == 0x000028, "Member 'UWidget::Slot' has a wrong offset!");
static_assert(offsetof(UWidget, bIsEnabledDelegate) == 0x000030, "Member 'UWidget::bIsEnabledDelegate' has a wrong offset!");
static_assert(offsetof(UWidget, ToolTipTextDelegate) == 0x00003C, "Member 'UWidget::ToolTipTextDelegate' has a wrong offset!");
static_assert(offsetof(UWidget, ToolTipText) == 0x000048, "Member 'UWidget::ToolTipText' has a wrong offset!");
static_assert(offsetof(UWidget, ToolTipWidget) == 0x000060, "Member 'UWidget::ToolTipWidget' has a wrong offset!");
static_assert(offsetof(UWidget, ToolTipWidgetDelegate) == 0x000068, "Member 'UWidget::ToolTipWidgetDelegate' has a wrong offset!");
static_assert(offsetof(UWidget, VisibilityDelegate) == 0x000074, "Member 'UWidget::VisibilityDelegate' has a wrong offset!");
static_assert(offsetof(UWidget, RenderTransform) == 0x000080, "Member 'UWidget::RenderTransform' has a wrong offset!");
static_assert(offsetof(UWidget, RenderTransformPivot) == 0x0000B8, "Member 'UWidget::RenderTransformPivot' has a wrong offset!");
static_assert(offsetof(UWidget, FlowDirectionPreference) == 0x0000C8, "Member 'UWidget::FlowDirectionPreference' has a wrong offset!");
static_assert(offsetof(UWidget, Cursor) == 0x0000CA, "Member 'UWidget::Cursor' has a wrong offset!");
static_assert(offsetof(UWidget, Clipping) == 0x0000CB, "Member 'UWidget::Clipping' has a wrong offset!");
static_assert(offsetof(UWidget, Visibility) == 0x0000CC, "Member 'UWidget::Visibility' has a wrong offset!");
static_assert(offsetof(UWidget, RenderOpacity) == 0x0000D0, "Member 'UWidget::RenderOpacity' has a wrong offset!");
static_assert(offsetof(UWidget, AccessibleWidgetData) == 0x0000D8, "Member 'UWidget::AccessibleWidgetData' has a wrong offset!");
static_assert(offsetof(UWidget, Navigation) == 0x0000E0, "Member 'UWidget::Navigation' has a wrong offset!");
static_assert(offsetof(UWidget, NativeBindings) == 0x000108, "Member 'UWidget::NativeBindings' has a wrong offset!");

// Class UMG.Slider
// 0x0548 (0x0660 - 0x0118)
class USlider : public UWidget
{
public:
	float                                         Value;                                             // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x011C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSliderStyle                           WidgetStyle;                                       // 0x0130(0x04A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x05D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SliderBarColor;                                    // 0x05D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x05E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x05F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x05F5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouseUsesStep;                                     // 0x05F6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiresControllerLock;                            // 0x05F7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x05FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMouseCaptureBegin;                               // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseCaptureEnd;                                 // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureBegin;                          // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureEnd;                            // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetMaxValue(float InValue);
	void SetMinValue(float InValue);
	void SetSliderBarColor(const struct FLinearColor& InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	float GetNormalizedValue() const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Slider">();
	}
	static class USlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlider>();
	}
};
static_assert(alignof(USlider) == 0x000010, "Wrong alignment on USlider");
static_assert(sizeof(USlider) == 0x000660, "Wrong size on USlider");
static_assert(offsetof(USlider, Value) == 0x000118, "Member 'USlider::Value' has a wrong offset!");
static_assert(offsetof(USlider, ValueDelegate) == 0x00011C, "Member 'USlider::ValueDelegate' has a wrong offset!");
static_assert(offsetof(USlider, MinValue) == 0x000128, "Member 'USlider::MinValue' has a wrong offset!");
static_assert(offsetof(USlider, MaxValue) == 0x00012C, "Member 'USlider::MaxValue' has a wrong offset!");
static_assert(offsetof(USlider, WidgetStyle) == 0x000130, "Member 'USlider::WidgetStyle' has a wrong offset!");
static_assert(offsetof(USlider, Orientation) == 0x0005D0, "Member 'USlider::Orientation' has a wrong offset!");
static_assert(offsetof(USlider, SliderBarColor) == 0x0005D4, "Member 'USlider::SliderBarColor' has a wrong offset!");
static_assert(offsetof(USlider, SliderHandleColor) == 0x0005E4, "Member 'USlider::SliderHandleColor' has a wrong offset!");
static_assert(offsetof(USlider, IndentHandle) == 0x0005F4, "Member 'USlider::IndentHandle' has a wrong offset!");
static_assert(offsetof(USlider, Locked) == 0x0005F5, "Member 'USlider::Locked' has a wrong offset!");
static_assert(offsetof(USlider, MouseUsesStep) == 0x0005F6, "Member 'USlider::MouseUsesStep' has a wrong offset!");
static_assert(offsetof(USlider, RequiresControllerLock) == 0x0005F7, "Member 'USlider::RequiresControllerLock' has a wrong offset!");
static_assert(offsetof(USlider, StepSize) == 0x0005F8, "Member 'USlider::StepSize' has a wrong offset!");
static_assert(offsetof(USlider, IsFocusable) == 0x0005FC, "Member 'USlider::IsFocusable' has a wrong offset!");
static_assert(offsetof(USlider, OnMouseCaptureBegin) == 0x000600, "Member 'USlider::OnMouseCaptureBegin' has a wrong offset!");
static_assert(offsetof(USlider, OnMouseCaptureEnd) == 0x000610, "Member 'USlider::OnMouseCaptureEnd' has a wrong offset!");
static_assert(offsetof(USlider, OnControllerCaptureBegin) == 0x000620, "Member 'USlider::OnControllerCaptureBegin' has a wrong offset!");
static_assert(offsetof(USlider, OnControllerCaptureEnd) == 0x000630, "Member 'USlider::OnControllerCaptureEnd' has a wrong offset!");
static_assert(offsetof(USlider, OnValueChanged) == 0x000640, "Member 'USlider::OnValueChanged' has a wrong offset!");

// Class UMG.PanelSlot
// 0x0010 (0x0038 - 0x0028)
class UPanelSlot : public UVisual
{
public:
	class UPanelWidget*                           Parent;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Content;                                           // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PanelSlot">();
	}
	static class UPanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPanelSlot>();
	}
};
static_assert(alignof(UPanelSlot) == 0x000008, "Wrong alignment on UPanelSlot");
static_assert(sizeof(UPanelSlot) == 0x000038, "Wrong size on UPanelSlot");
static_assert(offsetof(UPanelSlot, Parent) == 0x000028, "Member 'UPanelSlot::Parent' has a wrong offset!");
static_assert(offsetof(UPanelSlot, Content) == 0x000030, "Member 'UPanelSlot::Content' has a wrong offset!");

// Class UMG.CanvasPanelSlot
// 0x0050 (0x0088 - 0x0038)
class UCanvasPanelSlot final : public UPanelSlot
{
public:
	struct FAnchorData                            LayoutData;                                        // 0x0038(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoSize;                                         // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrder;                                            // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAlignment(const struct FVector2D& InAlignment);
	void SetAnchors(const struct FAnchors& InAnchors);
	void SetAutoSize(bool InbAutoSize);
	void SetLayout(const struct FAnchorData& InLayoutData);
	void SetMaximum(const struct FVector2D& InMaximumAnchors);
	void SetMinimum(const struct FVector2D& InMinimumAnchors);
	void SetOffsets(const struct FMargin& InOffset);
	void SetPosition(const struct FVector2D& InPosition);
	void SetSize(const struct FVector2D& InSize);
	void SetZOrder(int32 InZOrder);

	struct FVector2D GetAlignment() const;
	struct FAnchors GetAnchors() const;
	bool GetAutoSize() const;
	struct FAnchorData GetLayout() const;
	struct FMargin GetOffsets() const;
	struct FVector2D GetPosition() const;
	struct FVector2D GetSize() const;
	int32 GetZOrder() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CanvasPanelSlot">();
	}
	static class UCanvasPanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvasPanelSlot>();
	}
};
static_assert(alignof(UCanvasPanelSlot) == 0x000008, "Wrong alignment on UCanvasPanelSlot");
static_assert(sizeof(UCanvasPanelSlot) == 0x000088, "Wrong size on UCanvasPanelSlot");
static_assert(offsetof(UCanvasPanelSlot, LayoutData) == 0x000038, "Member 'UCanvasPanelSlot::LayoutData' has a wrong offset!");
static_assert(offsetof(UCanvasPanelSlot, bAutoSize) == 0x000078, "Member 'UCanvasPanelSlot::bAutoSize' has a wrong offset!");
static_assert(offsetof(UCanvasPanelSlot, ZOrder) == 0x00007C, "Member 'UCanvasPanelSlot::ZOrder' has a wrong offset!");

// Class UMG.OverlaySlot
// 0x0020 (0x0058 - 0x0038)
class UOverlaySlot : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OverlaySlot">();
	}
	static class UOverlaySlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlaySlot>();
	}
};
static_assert(alignof(UOverlaySlot) == 0x000008, "Wrong alignment on UOverlaySlot");
static_assert(sizeof(UOverlaySlot) == 0x000058, "Wrong size on UOverlaySlot");
static_assert(offsetof(UOverlaySlot, Padding) == 0x000040, "Member 'UOverlaySlot::Padding' has a wrong offset!");
static_assert(offsetof(UOverlaySlot, HorizontalAlignment) == 0x000050, "Member 'UOverlaySlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UOverlaySlot, VerticalAlignment) == 0x000051, "Member 'UOverlaySlot::VerticalAlignment' has a wrong offset!");

// Class UMG.AsyncTaskDownloadImage
// 0x0020 (0x0050 - 0x0030)
class UAsyncTaskDownloadImage final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(class UTexture2DDynamic* Texture)> OnSuccess;                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTexture2DDynamic* Texture)> OnFail;                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAsyncTaskDownloadImage* DownloadImage(const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncTaskDownloadImage">();
	}
	static class UAsyncTaskDownloadImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncTaskDownloadImage>();
	}
};
static_assert(alignof(UAsyncTaskDownloadImage) == 0x000008, "Wrong alignment on UAsyncTaskDownloadImage");
static_assert(sizeof(UAsyncTaskDownloadImage) == 0x000050, "Wrong size on UAsyncTaskDownloadImage");
static_assert(offsetof(UAsyncTaskDownloadImage, OnSuccess) == 0x000030, "Member 'UAsyncTaskDownloadImage::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAsyncTaskDownloadImage, OnFail) == 0x000040, "Member 'UAsyncTaskDownloadImage::OnFail' has a wrong offset!");

// Class UMG.PanelWidget
// 0x0018 (0x0130 - 0x0118)
class UPanelWidget : public UWidget
{
public:
	TArray<class UPanelSlot*>                     Slots;                                             // 0x0118(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPanelSlot* AddChild(class UWidget* Content);
	void ClearChildren();
	bool RemoveChild(class UWidget* Content);
	bool RemoveChildAt(int32 Index_0);

	TArray<class UWidget*> GetAllChildren() const;
	class UWidget* GetChildAt(int32 Index_0) const;
	int32 GetChildIndex(const class UWidget* Content) const;
	int32 GetChildrenCount() const;
	bool HasAnyChildren() const;
	bool HasChild(class UWidget* Content) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PanelWidget">();
	}
	static class UPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPanelWidget>();
	}
};
static_assert(alignof(UPanelWidget) == 0x000008, "Wrong alignment on UPanelWidget");
static_assert(sizeof(UPanelWidget) == 0x000130, "Wrong size on UPanelWidget");
static_assert(offsetof(UPanelWidget, Slots) == 0x000118, "Member 'UPanelWidget::Slots' has a wrong offset!");

// Class UMG.ContentWidget
// 0x0000 (0x0130 - 0x0130)
class UContentWidget : public UPanelWidget
{
public:
	class UPanelSlot* SetContent(class UWidget* Content);

	class UWidget* GetContent() const;
	class UPanelSlot* GetContentSlot() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ContentWidget">();
	}
	static class UContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContentWidget>();
	}
};
static_assert(alignof(UContentWidget) == 0x000008, "Wrong alignment on UContentWidget");
static_assert(sizeof(UContentWidget) == 0x000130, "Wrong size on UContentWidget");

// Class UMG.SizeBox
// 0x0038 (0x0168 - 0x0130)
class USizeBox : public UContentWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthOverride;                                     // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOverride;                                    // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredHeight;                                  // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDesiredWidth;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDesiredHeight;                                  // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAspectRatio;                                    // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAspectRatio;                                    // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_WidthOverride : 1;                       // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HeightOverride : 1;                      // 0x0160(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MinDesiredWidth : 1;                     // 0x0160(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MinDesiredHeight : 1;                    // 0x0160(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxDesiredWidth : 1;                     // 0x0160(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxDesiredHeight : 1;                    // 0x0160(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MinAspectRatio : 1;                      // 0x0160(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_MaxAspectRatio : 1;                      // 0x0160(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearHeightOverride();
	void ClearMaxAspectRatio();
	void ClearMaxDesiredHeight();
	void ClearMaxDesiredWidth();
	void ClearMinAspectRatio();
	void ClearMinDesiredHeight();
	void ClearMinDesiredWidth();
	void ClearWidthOverride();
	void SetHeightOverride(float InHeightOverride);
	void SetMaxAspectRatio(float InMaxAspectRatio);
	void SetMaxDesiredHeight(float InMaxDesiredHeight);
	void SetMaxDesiredWidth(float InMaxDesiredWidth);
	void SetMinAspectRatio(float InMinAspectRatio);
	void SetMinDesiredHeight(float InMinDesiredHeight);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetWidthOverride(float InWidthOverride);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SizeBox">();
	}
	static class USizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USizeBox>();
	}
};
static_assert(alignof(USizeBox) == 0x000008, "Wrong alignment on USizeBox");
static_assert(sizeof(USizeBox) == 0x000168, "Wrong size on USizeBox");
static_assert(offsetof(USizeBox, WidthOverride) == 0x000140, "Member 'USizeBox::WidthOverride' has a wrong offset!");
static_assert(offsetof(USizeBox, HeightOverride) == 0x000144, "Member 'USizeBox::HeightOverride' has a wrong offset!");
static_assert(offsetof(USizeBox, MinDesiredWidth) == 0x000148, "Member 'USizeBox::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(USizeBox, MinDesiredHeight) == 0x00014C, "Member 'USizeBox::MinDesiredHeight' has a wrong offset!");
static_assert(offsetof(USizeBox, MaxDesiredWidth) == 0x000150, "Member 'USizeBox::MaxDesiredWidth' has a wrong offset!");
static_assert(offsetof(USizeBox, MaxDesiredHeight) == 0x000154, "Member 'USizeBox::MaxDesiredHeight' has a wrong offset!");
static_assert(offsetof(USizeBox, MinAspectRatio) == 0x000158, "Member 'USizeBox::MinAspectRatio' has a wrong offset!");
static_assert(offsetof(USizeBox, MaxAspectRatio) == 0x00015C, "Member 'USizeBox::MaxAspectRatio' has a wrong offset!");

// Class UMG.CanvasPanel
// 0x0010 (0x0140 - 0x0130)
class UCanvasPanel final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCanvasPanelSlot* AddChildToCanvas(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CanvasPanel">();
	}
	static class UCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCanvasPanel>();
	}
};
static_assert(alignof(UCanvasPanel) == 0x000008, "Wrong alignment on UCanvasPanel");
static_assert(sizeof(UCanvasPanel) == 0x000140, "Wrong size on UCanvasPanel");

// Class UMG.Button
// 0x0440 (0x0570 - 0x0130)
#pragma pack(push, 0x1)
class alignas(0x10) UButton : public UContentWidget
{
public:
	struct FButtonStyle                           WidgetStyle;                                       // 0x0130(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x04F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x0501(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x0502(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0503(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnClicked;                                         // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x0528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnHovered;                                         // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnhovered;                                       // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_558[0x10];                                     // 0x0558(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBackgroundColor(const struct FLinearColor& InBackgroundColor);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetPressMethod(EButtonPressMethod InPressMethod);
	void SetStyle(const struct FButtonStyle& InStyle);
	void SetTouchMethod(EButtonTouchMethod InTouchMethod);

	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Button">();
	}
	static class UButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButton>();
	}
};
#pragma pack(pop)
static_assert(alignof(UButton) == 0x000010, "Wrong alignment on UButton");
static_assert(sizeof(UButton) == 0x000570, "Wrong size on UButton");
static_assert(offsetof(UButton, WidgetStyle) == 0x000130, "Member 'UButton::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UButton, ColorAndOpacity) == 0x0004E0, "Member 'UButton::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UButton, BackgroundColor) == 0x0004F0, "Member 'UButton::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UButton, ClickMethod) == 0x000500, "Member 'UButton::ClickMethod' has a wrong offset!");
static_assert(offsetof(UButton, TouchMethod) == 0x000501, "Member 'UButton::TouchMethod' has a wrong offset!");
static_assert(offsetof(UButton, PressMethod) == 0x000502, "Member 'UButton::PressMethod' has a wrong offset!");
static_assert(offsetof(UButton, IsFocusable) == 0x000503, "Member 'UButton::IsFocusable' has a wrong offset!");
static_assert(offsetof(UButton, OnClicked) == 0x000508, "Member 'UButton::OnClicked' has a wrong offset!");
static_assert(offsetof(UButton, OnPressed) == 0x000518, "Member 'UButton::OnPressed' has a wrong offset!");
static_assert(offsetof(UButton, OnReleased) == 0x000528, "Member 'UButton::OnReleased' has a wrong offset!");
static_assert(offsetof(UButton, OnHovered) == 0x000538, "Member 'UButton::OnHovered' has a wrong offset!");
static_assert(offsetof(UButton, OnUnhovered) == 0x000548, "Member 'UButton::OnUnhovered' has a wrong offset!");

// Class UMG.UserWidget
// 0x0160 (0x0278 - 0x0118)
class UUserWidget : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0130(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x013C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ForegroundColorDelegate;                           // 0x0150(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESlateVisibility InVisibility)> OnVisibilityChanged;               // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x18];                                     // 0x0170(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UUMGSequencePlayer*>             ActiveSequencePlayers;                             // 0x0198(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	class UUMGSequenceTickManager*                AnimationTickManager;                              // 0x01A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUMGSequencePlayer*>             StoppedSequencePlayers;                            // 0x01B0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FNamedSlotBinding>              NamedSlotBindings;                                 // 0x01C0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UWidgetTree*                            WidgetTree;                                        // 0x01D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, TextExportTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x01D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsFocusable : 1;                                  // 0x01DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopAction : 1;                                   // 0x01DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasScriptImplementedTick : 1;                     // 0x01DC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasScriptImplementedPaint : 1;                    // 0x01DC(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DD[0x13];                                     // 0x01DD(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	EWidgetTickFrequency                          TickFrequency;                                     // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x01F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAnimationEventBinding>         AnimationCallbacks;                                // 0x0200(0x0010)(ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x68];                                     // 0x0210(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddToPlayerScreen(int32 ZOrder);
	void AddToViewport(int32 ZOrder);
	void BindToAnimationEvent(class UWidgetAnimation* Animation, TDelegate<void()> Delegate, EWidgetAnimationEvent AnimationEvent, class FName UserTag);
	void BindToAnimationFinished(class UWidgetAnimation* Animation, TDelegate<void()> Delegate);
	void BindToAnimationStarted(class UWidgetAnimation* Animation, TDelegate<void()> Delegate);
	void CancelLatentActions();
	void Construct();
	void Destruct();
	void FlushAnimations();
	bool IsAnimationPlayingForward(const class UWidgetAnimation* InAnimation);
	void ListenForInputAction(class FName ActionName, EInputEvent EventType, bool bConsume, TDelegate<void()> Callback);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void OnAnimationFinished(const class UWidgetAnimation* Animation);
	void OnAnimationStarted(const class UWidgetAnimation* Animation);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent);
	void OnInitialized();
	struct FEventReply OnKeyChar(const struct FGeometry& MyGeometry, const struct FCharacterEvent& InCharacterEvent);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMotionDetected(const struct FGeometry& MyGeometry, const struct FMotionEvent& InMotionEvent);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseCaptureLost();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnPreviewKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnPreviewMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnTouchEnded(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchForceChanged(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchGesture(const struct FGeometry& MyGeometry, const struct FPointerEvent& GestureEvent);
	struct FEventReply OnTouchMoved(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	struct FEventReply OnTouchStarted(const struct FGeometry& MyGeometry, const struct FPointerEvent& InTouchEvent);
	float PauseAnimation(const class UWidgetAnimation* InAnimation);
	class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState);
	class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);
	class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);
	class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState);
	void PlaySound(class USoundBase* SoundToPlay);
	void PreConstruct(bool IsDesignTime);
	void RegisterInputComponent();
	void RemoveFromViewport();
	void ReverseAnimation(const class UWidgetAnimation* InAnimation);
	void SetAlignmentInViewport(const struct FVector2D& Alignment);
	void SetAnchorsInViewport(const struct FAnchors& Anchors);
	void SetAnimationCurrentTime(const class UWidgetAnimation* InAnimation, float InTime);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetDesiredSizeInViewport(const struct FVector2D& Size);
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetInputActionBlocking(bool bShouldBlock);
	void SetInputActionPriority(int32 NewPriority);
	void SetNumLoopsToPlay(const class UWidgetAnimation* InAnimation, int32 NumLoopsToPlay);
	void SetOwningPlayer(class APlayerController* LocalPlayerController);
	void SetPadding(const struct FMargin& InPadding);
	void SetPlaybackSpeed(const class UWidgetAnimation* InAnimation, float PlaybackSpeed);
	void SetPositionInViewport(const struct FVector2D& Position, bool bRemoveDPIScale);
	void StopAllAnimations();
	void StopAnimation(const class UWidgetAnimation* InAnimation);
	void StopAnimationsAndLatentActions();
	void StopListeningForAllInputActions();
	void StopListeningForInputAction(class FName ActionName, EInputEvent EventType);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UnbindAllFromAnimationFinished(class UWidgetAnimation* Animation);
	void UnbindAllFromAnimationStarted(class UWidgetAnimation* Animation);
	void UnbindFromAnimationFinished(class UWidgetAnimation* Animation, TDelegate<void()> Delegate);
	void UnbindFromAnimationStarted(class UWidgetAnimation* Animation, TDelegate<void()> Delegate);
	void UnregisterInputComponent();

	struct FVector2D GetAlignmentInViewport() const;
	struct FAnchors GetAnchorsInViewport() const;
	float GetAnimationCurrentTime(const class UWidgetAnimation* InAnimation) const;
	bool GetIsVisible() const;
	class APlayerCameraManager* GetOwningPlayerCameraManager() const;
	class APawn* GetOwningPlayerPawn() const;
	bool IsAnimationPlaying(const class UWidgetAnimation* InAnimation) const;
	bool IsAnyAnimationPlaying() const;
	bool IsInteractable() const;
	bool IsInViewport() const;
	bool IsListeningForInputAction(class FName ActionName) const;
	bool IsPlayingAnimation() const;
	void OnPaint(struct FPaintContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserWidget">();
	}
	static class UUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserWidget>();
	}
};
static_assert(alignof(UUserWidget) == 0x000008, "Wrong alignment on UUserWidget");
static_assert(sizeof(UUserWidget) == 0x000278, "Wrong size on UUserWidget");
static_assert(offsetof(UUserWidget, ColorAndOpacity) == 0x000120, "Member 'UUserWidget::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UUserWidget, ColorAndOpacityDelegate) == 0x000130, "Member 'UUserWidget::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UUserWidget, ForegroundColor) == 0x00013C, "Member 'UUserWidget::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UUserWidget, ForegroundColorDelegate) == 0x000150, "Member 'UUserWidget::ForegroundColorDelegate' has a wrong offset!");
static_assert(offsetof(UUserWidget, OnVisibilityChanged) == 0x000160, "Member 'UUserWidget::OnVisibilityChanged' has a wrong offset!");
static_assert(offsetof(UUserWidget, Padding) == 0x000188, "Member 'UUserWidget::Padding' has a wrong offset!");
static_assert(offsetof(UUserWidget, ActiveSequencePlayers) == 0x000198, "Member 'UUserWidget::ActiveSequencePlayers' has a wrong offset!");
static_assert(offsetof(UUserWidget, AnimationTickManager) == 0x0001A8, "Member 'UUserWidget::AnimationTickManager' has a wrong offset!");
static_assert(offsetof(UUserWidget, StoppedSequencePlayers) == 0x0001B0, "Member 'UUserWidget::StoppedSequencePlayers' has a wrong offset!");
static_assert(offsetof(UUserWidget, NamedSlotBindings) == 0x0001C0, "Member 'UUserWidget::NamedSlotBindings' has a wrong offset!");
static_assert(offsetof(UUserWidget, WidgetTree) == 0x0001D0, "Member 'UUserWidget::WidgetTree' has a wrong offset!");
static_assert(offsetof(UUserWidget, Priority) == 0x0001D8, "Member 'UUserWidget::Priority' has a wrong offset!");
static_assert(offsetof(UUserWidget, TickFrequency) == 0x0001F0, "Member 'UUserWidget::TickFrequency' has a wrong offset!");
static_assert(offsetof(UUserWidget, InputComponent) == 0x0001F8, "Member 'UUserWidget::InputComponent' has a wrong offset!");
static_assert(offsetof(UUserWidget, AnimationCallbacks) == 0x000200, "Member 'UUserWidget::AnimationCallbacks' has a wrong offset!");

// Class UMG.MovieSceneMarginTrack
// 0x0000 (0x00B8 - 0x00B8)
class UMovieSceneMarginTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMarginTrack">();
	}
	static class UMovieSceneMarginTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMarginTrack>();
	}
};
static_assert(alignof(UMovieSceneMarginTrack) == 0x000008, "Wrong alignment on UMovieSceneMarginTrack");
static_assert(sizeof(UMovieSceneMarginTrack) == 0x0000B8, "Wrong size on UMovieSceneMarginTrack");

// Class UMG.CircularThrobber
// 0x00F8 (0x0210 - 0x0118)
class UCircularThrobber final : public UWidget
{
public:
	int32                                         NumberOfPieces;                                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0xC];                                      // 0x0124(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0130(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableRadius;                                     // 0x01F0(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F1[0x1F];                                     // 0x01F1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNumberOfPieces(int32 InNumberOfPieces);
	void SetPeriod(float InPeriod);
	void SetRadius(float InRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CircularThrobber">();
	}
	static class UCircularThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCircularThrobber>();
	}
};
static_assert(alignof(UCircularThrobber) == 0x000010, "Wrong alignment on UCircularThrobber");
static_assert(sizeof(UCircularThrobber) == 0x000210, "Wrong size on UCircularThrobber");
static_assert(offsetof(UCircularThrobber, NumberOfPieces) == 0x000118, "Member 'UCircularThrobber::NumberOfPieces' has a wrong offset!");
static_assert(offsetof(UCircularThrobber, Period) == 0x00011C, "Member 'UCircularThrobber::Period' has a wrong offset!");
static_assert(offsetof(UCircularThrobber, Radius) == 0x000120, "Member 'UCircularThrobber::Radius' has a wrong offset!");
static_assert(offsetof(UCircularThrobber, Image) == 0x000130, "Member 'UCircularThrobber::Image' has a wrong offset!");
static_assert(offsetof(UCircularThrobber, bEnableRadius) == 0x0001F0, "Member 'UCircularThrobber::bEnableRadius' has a wrong offset!");

// Class UMG.WidgetSwitcher
// 0x0018 (0x0148 - 0x0130)
class UWidgetSwitcher : public UPanelWidget
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x14];                                     // 0x0134(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetActiveWidget(class UWidget* Widget);
	void SetActiveWidgetIndex(int32 Index_0);

	class UWidget* GetActiveWidget() const;
	int32 GetActiveWidgetIndex() const;
	int32 GetNumWidgets() const;
	class UWidget* GetWidgetAtIndex(int32 Index_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSwitcher">();
	}
	static class UWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSwitcher>();
	}
};
static_assert(alignof(UWidgetSwitcher) == 0x000008, "Wrong alignment on UWidgetSwitcher");
static_assert(sizeof(UWidgetSwitcher) == 0x000148, "Wrong size on UWidgetSwitcher");
static_assert(offsetof(UWidgetSwitcher, ActiveWidgetIndex) == 0x000130, "Member 'UWidgetSwitcher::ActiveWidgetIndex' has a wrong offset!");

// Class UMG.InvalidationBox
// 0x0018 (0x0148 - 0x0130)
class UInvalidationBox final : public UContentWidget
{
public:
	bool                                          bCanCache;                                         // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CacheRelativeTransforms;                           // 0x0131(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x16];                                     // 0x0132(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InvalidateCache();
	void SetCanCache(bool CanCache);

	bool GetCanCache() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InvalidationBox">();
	}
	static class UInvalidationBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInvalidationBox>();
	}
};
static_assert(alignof(UInvalidationBox) == 0x000008, "Wrong alignment on UInvalidationBox");
static_assert(sizeof(UInvalidationBox) == 0x000148, "Wrong size on UInvalidationBox");
static_assert(offsetof(UInvalidationBox, bCanCache) == 0x000130, "Member 'UInvalidationBox::bCanCache' has a wrong offset!");
static_assert(offsetof(UInvalidationBox, CacheRelativeTransforms) == 0x000131, "Member 'UInvalidationBox::CacheRelativeTransforms' has a wrong offset!");

// Class UMG.Border
// 0x0170 (0x02A0 - 0x0130)
class UBorder : public UContentWidget
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShowEffectWhenDisabled : 1;                       // 0x0132(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ContentColorAndOpacity;                            // 0x0134(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ContentColorAndOpacityDelegate;                    // 0x0144(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Background;                                        // 0x0160(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BackgroundDelegate;                                // 0x0220(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BrushColor;                                        // 0x022C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushColorDelegate;                                // 0x023C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DesiredSizeScale;                                  // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipForRightToLeftFlowDirection;                  // 0x0258(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent; // 0x025C(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonUpEvent; // 0x0268(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseMoveEvent; // 0x0274(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseDoubleClickEvent; // 0x0280(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x14];                                     // 0x028C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void SetBrush(const struct FSlateBrush& InBrush);
	void SetBrushColor(const struct FLinearColor& InBrushColor);
	void SetBrushFromAsset(class USlateBrushAsset* Asset);
	void SetBrushFromMaterial(class UMaterialInterface* Material);
	void SetBrushFromTexture(class UTexture2D* Texture);
	void SetContentColorAndOpacity(const struct FLinearColor& InContentColorAndOpacity);
	void SetDesiredSizeScale(const struct FVector2D& InScale);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetShowEffectWhenDisabled(bool bInShowEffectWhenDisabled);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Border">();
	}
	static class UBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBorder>();
	}
};
static_assert(alignof(UBorder) == 0x000010, "Wrong alignment on UBorder");
static_assert(sizeof(UBorder) == 0x0002A0, "Wrong size on UBorder");
static_assert(offsetof(UBorder, HorizontalAlignment) == 0x000130, "Member 'UBorder::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBorder, VerticalAlignment) == 0x000131, "Member 'UBorder::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBorder, ContentColorAndOpacity) == 0x000134, "Member 'UBorder::ContentColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UBorder, ContentColorAndOpacityDelegate) == 0x000144, "Member 'UBorder::ContentColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UBorder, Padding) == 0x000150, "Member 'UBorder::Padding' has a wrong offset!");
static_assert(offsetof(UBorder, Background) == 0x000160, "Member 'UBorder::Background' has a wrong offset!");
static_assert(offsetof(UBorder, BackgroundDelegate) == 0x000220, "Member 'UBorder::BackgroundDelegate' has a wrong offset!");
static_assert(offsetof(UBorder, BrushColor) == 0x00022C, "Member 'UBorder::BrushColor' has a wrong offset!");
static_assert(offsetof(UBorder, BrushColorDelegate) == 0x00023C, "Member 'UBorder::BrushColorDelegate' has a wrong offset!");
static_assert(offsetof(UBorder, DesiredSizeScale) == 0x000248, "Member 'UBorder::DesiredSizeScale' has a wrong offset!");
static_assert(offsetof(UBorder, bFlipForRightToLeftFlowDirection) == 0x000258, "Member 'UBorder::bFlipForRightToLeftFlowDirection' has a wrong offset!");
static_assert(offsetof(UBorder, OnMouseButtonDownEvent) == 0x00025C, "Member 'UBorder::OnMouseButtonDownEvent' has a wrong offset!");
static_assert(offsetof(UBorder, OnMouseButtonUpEvent) == 0x000268, "Member 'UBorder::OnMouseButtonUpEvent' has a wrong offset!");
static_assert(offsetof(UBorder, OnMouseMoveEvent) == 0x000274, "Member 'UBorder::OnMouseMoveEvent' has a wrong offset!");
static_assert(offsetof(UBorder, OnMouseDoubleClickEvent) == 0x000280, "Member 'UBorder::OnMouseDoubleClickEvent' has a wrong offset!");

// Class UMG.InputKeySelector
// 0x0778 (0x0890 - 0x0118)
class UInputKeySelector final : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           WidgetStyle;                                       // 0x0120(0x03B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x04D0(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInputChord                            SelectedKey;                                       // 0x07E0(0x0020)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Margin;                                            // 0x0800(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   KeySelectionText;                                  // 0x0810(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NoKeySpecifiedText;                                // 0x0828(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bAllowModifierKeys;                                // 0x0840(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGamepadKeys;                                 // 0x0841(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_842[0x6];                                      // 0x0842(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           EscapeKeys;                                        // 0x0848(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FInputChord& SelectedKey)> OnKeySelected;             // 0x0858(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnIsSelectingKeyChanged;                           // 0x0868(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_878[0x18];                                     // 0x0878(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAllowGamepadKeys(bool bInAllowGamepadKeys);
	void SetAllowModifierKeys(bool bInAllowModifierKeys);
	void SetEscapeKeys(const TArray<struct FKey>& InKeys);
	void SetKeySelectionText(const class FText& InKeySelectionText);
	void SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText);
	void SetSelectedKey(const struct FInputChord& InSelectedKey);
	void SetTextBlockVisibility(const ESlateVisibility InVisibility);

	bool GetIsSelectingKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputKeySelector">();
	}
	static class UInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputKeySelector>();
	}
};
static_assert(alignof(UInputKeySelector) == 0x000010, "Wrong alignment on UInputKeySelector");
static_assert(sizeof(UInputKeySelector) == 0x000890, "Wrong size on UInputKeySelector");
static_assert(offsetof(UInputKeySelector, WidgetStyle) == 0x000120, "Member 'UInputKeySelector::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, TextStyle) == 0x0004D0, "Member 'UInputKeySelector::TextStyle' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, SelectedKey) == 0x0007E0, "Member 'UInputKeySelector::SelectedKey' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, Margin) == 0x000800, "Member 'UInputKeySelector::Margin' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, KeySelectionText) == 0x000810, "Member 'UInputKeySelector::KeySelectionText' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, NoKeySpecifiedText) == 0x000828, "Member 'UInputKeySelector::NoKeySpecifiedText' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, bAllowModifierKeys) == 0x000840, "Member 'UInputKeySelector::bAllowModifierKeys' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, bAllowGamepadKeys) == 0x000841, "Member 'UInputKeySelector::bAllowGamepadKeys' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, EscapeKeys) == 0x000848, "Member 'UInputKeySelector::EscapeKeys' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, OnKeySelected) == 0x000858, "Member 'UInputKeySelector::OnKeySelected' has a wrong offset!");
static_assert(offsetof(UInputKeySelector, OnIsSelectingKeyChanged) == 0x000868, "Member 'UInputKeySelector::OnIsSelectingKeyChanged' has a wrong offset!");

// Class UMG.DynamicEntryBoxBase
// 0x00E0 (0x01F8 - 0x0118)
class UDynamicEntryBoxBase : public UWidget
{
public:
	EDynamicBoxType                               EntryBoxType;                                      // 0x0118(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              EntrySpacing;                                      // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      SpacingPattern;                                    // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateChildSize                        EntrySizeRule;                                     // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          EntryHorizontalAlignment;                          // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            EntryVerticalAlignment;                            // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14A[0x2];                                      // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxElementSize;                                    // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRadialBoxSettings                     RadialBoxSettings;                                 // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUserWidgetPool                        EntryWidgetPool;                                   // 0x0170(0x0088)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void SetEntrySpacing(const struct FVector2D& InEntrySpacing);
	void SetRadialSettings(const struct FRadialBoxSettings& InSettings);

	const TArray<class UUserWidget*> GetAllEntries() const;
	int32 GetNumEntries() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicEntryBoxBase">();
	}
	static class UDynamicEntryBoxBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicEntryBoxBase>();
	}
};
static_assert(alignof(UDynamicEntryBoxBase) == 0x000008, "Wrong alignment on UDynamicEntryBoxBase");
static_assert(sizeof(UDynamicEntryBoxBase) == 0x0001F8, "Wrong size on UDynamicEntryBoxBase");
static_assert(offsetof(UDynamicEntryBoxBase, EntryBoxType) == 0x000118, "Member 'UDynamicEntryBoxBase::EntryBoxType' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, EntrySpacing) == 0x000120, "Member 'UDynamicEntryBoxBase::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, SpacingPattern) == 0x000130, "Member 'UDynamicEntryBoxBase::SpacingPattern' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, EntrySizeRule) == 0x000140, "Member 'UDynamicEntryBoxBase::EntrySizeRule' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, EntryHorizontalAlignment) == 0x000148, "Member 'UDynamicEntryBoxBase::EntryHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, EntryVerticalAlignment) == 0x000149, "Member 'UDynamicEntryBoxBase::EntryVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, MaxElementSize) == 0x00014C, "Member 'UDynamicEntryBoxBase::MaxElementSize' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, RadialBoxSettings) == 0x000150, "Member 'UDynamicEntryBoxBase::RadialBoxSettings' has a wrong offset!");
static_assert(offsetof(UDynamicEntryBoxBase, EntryWidgetPool) == 0x000170, "Member 'UDynamicEntryBoxBase::EntryWidgetPool' has a wrong offset!");

// Class UMG.TextLayoutWidget
// 0x0020 (0x0138 - 0x0118)
class UTextLayoutWidget : public UWidget
{
public:
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0118(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextWrappingPolicy                           WrappingPolicy;                                    // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         AutoWrapText : 1;                                  // 0x011D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                Margin;                                            // 0x0124(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         LineHeightPercentage;                              // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetJustification(ETextJustify InJustification);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextLayoutWidget">();
	}
	static class UTextLayoutWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextLayoutWidget>();
	}
};
static_assert(alignof(UTextLayoutWidget) == 0x000008, "Wrong alignment on UTextLayoutWidget");
static_assert(sizeof(UTextLayoutWidget) == 0x000138, "Wrong size on UTextLayoutWidget");
static_assert(offsetof(UTextLayoutWidget, ShapedTextOptions) == 0x000118, "Member 'UTextLayoutWidget::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidget, Justification) == 0x00011B, "Member 'UTextLayoutWidget::Justification' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidget, WrappingPolicy) == 0x00011C, "Member 'UTextLayoutWidget::WrappingPolicy' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidget, WrapTextAt) == 0x000120, "Member 'UTextLayoutWidget::WrapTextAt' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidget, Margin) == 0x000124, "Member 'UTextLayoutWidget::Margin' has a wrong offset!");
static_assert(offsetof(UTextLayoutWidget, LineHeightPercentage) == 0x000134, "Member 'UTextLayoutWidget::LineHeightPercentage' has a wrong offset!");

// Class UMG.TextBlock
// 0x01A8 (0x02E0 - 0x0138)
#pragma pack(push, 0x1)
class alignas(0x10) UTextBlock : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0138(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0150(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x015C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x0170(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0180(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StrikeBrush;                                       // 0x01D0(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ShadowColorAndOpacityDelegate;                     // 0x02B0(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredWidth;                                   // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWrapWithInvalidationPanel;                        // 0x02C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTransformPolicy                          TextTransformPolicy;                               // 0x02C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextOverflowPolicy                           TextOverflowPolicy;                                // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleTextMode;                                   // 0x02C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0x14];                                     // 0x02C4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicFontMaterial();
	class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
	void SetAutoWrapText(bool InAutoTextWrap);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetFont(const struct FSlateFontInfo& InFontInfo);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetOpacity(float InOpacity);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetShadowOffset(const struct FVector2D& InShadowOffset);
	void SetStrikeBrush(const struct FSlateBrush& InStrikeBrush);
	void SetText(const class FText& InText);
	void SetTextOverflowPolicy(ETextOverflowPolicy InOverflowPolicy);
	void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextBlock">();
	}
	static class UTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextBlock>();
	}
};
#pragma pack(pop)
static_assert(alignof(UTextBlock) == 0x000010, "Wrong alignment on UTextBlock");
static_assert(sizeof(UTextBlock) == 0x0002E0, "Wrong size on UTextBlock");
static_assert(offsetof(UTextBlock, Text) == 0x000138, "Member 'UTextBlock::Text' has a wrong offset!");
static_assert(offsetof(UTextBlock, TextDelegate) == 0x000150, "Member 'UTextBlock::TextDelegate' has a wrong offset!");
static_assert(offsetof(UTextBlock, ColorAndOpacity) == 0x00015C, "Member 'UTextBlock::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTextBlock, ColorAndOpacityDelegate) == 0x000170, "Member 'UTextBlock::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UTextBlock, Font) == 0x000180, "Member 'UTextBlock::Font' has a wrong offset!");
static_assert(offsetof(UTextBlock, StrikeBrush) == 0x0001D0, "Member 'UTextBlock::StrikeBrush' has a wrong offset!");
static_assert(offsetof(UTextBlock, ShadowOffset) == 0x000290, "Member 'UTextBlock::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UTextBlock, ShadowColorAndOpacity) == 0x0002A0, "Member 'UTextBlock::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UTextBlock, ShadowColorAndOpacityDelegate) == 0x0002B0, "Member 'UTextBlock::ShadowColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UTextBlock, MinDesiredWidth) == 0x0002BC, "Member 'UTextBlock::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UTextBlock, bWrapWithInvalidationPanel) == 0x0002C0, "Member 'UTextBlock::bWrapWithInvalidationPanel' has a wrong offset!");
static_assert(offsetof(UTextBlock, TextTransformPolicy) == 0x0002C1, "Member 'UTextBlock::TextTransformPolicy' has a wrong offset!");
static_assert(offsetof(UTextBlock, TextOverflowPolicy) == 0x0002C2, "Member 'UTextBlock::TextOverflowPolicy' has a wrong offset!");
static_assert(offsetof(UTextBlock, bSimpleTextMode) == 0x0002C3, "Member 'UTextBlock::bSimpleTextMode' has a wrong offset!");

// Class UMG.ScrollBox
// 0x0A60 (0x0B90 - 0x0130)
class UScrollBox : public UPanelWidget
{
public:
	struct FScrollBoxStyle                        WidgetStyle;                                       // 0x0130(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        WidgetBarStyle;                                    // 0x0440(0x06E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0B20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              ScrollBarVisibility;                               // 0x0B21(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumeMouseWheel                            ConsumeMouseWheel;                                 // 0x0B22(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B23[0x5];                                      // 0x0B23(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x0B28(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x0B38(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AlwaysShowScrollbar;                               // 0x0B48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysShowScrollbarTrack;                          // 0x0B49(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowOverscroll;                                   // 0x0B4A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackPadScrolling;                                  // 0x0B4B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrontPadScrolling;                                 // 0x0B4C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateWheelScrolling;                            // 0x0B4D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDescendantScrollDestination                  NavigationDestination;                             // 0x0B4E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4F[0x1];                                      // 0x0B4F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavigationScrollPadding;                           // 0x0B50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScrollWhenFocusChanges                       ScrollWhenFocusChanges;                            // 0x0B54(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRightClickDragScrolling;                     // 0x0B55(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B56[0x2];                                      // 0x0B56(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelScrollMultiplier;                             // 0x0B58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5C[0x4];                                      // 0x0B5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float CurrentOffset)> OnUserScrolled;                              // 0x0B60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B70[0x20];                                     // 0x0B70(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndInertialScrolling();
	void ScrollToEnd();
	void ScrollToStart();
	void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDestination, float Padding);
	void SetAllowOverscroll(bool NewAllowOverscroll);
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);
	void SetConsumeMouseWheel(EConsumeMouseWheel NewConsumeMouseWheel);
	void SetNavigationDestination(const EDescendantScrollDestination NewNavigationDestination);
	void SetOrientation(EOrientation NewOrientation);
	void SetScrollbarPadding(const struct FMargin& NewScrollbarPadding);
	void SetScrollbarThickness(const struct FVector2D& NewScrollbarThickness);
	void SetScrollBarVisibility(ESlateVisibility NewScrollBarVisibility);
	void SetScrollOffset(float NewScrollOffset);
	void SetScrollWhenFocusChanges(EScrollWhenFocusChanges NewScrollWhenFocusChanges);
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);

	float GetScrollOffset() const;
	float GetScrollOffsetOfEnd() const;
	float GetViewOffsetFraction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScrollBox">();
	}
	static class UScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBox>();
	}
};
static_assert(alignof(UScrollBox) == 0x000010, "Wrong alignment on UScrollBox");
static_assert(sizeof(UScrollBox) == 0x000B90, "Wrong size on UScrollBox");
static_assert(offsetof(UScrollBox, WidgetStyle) == 0x000130, "Member 'UScrollBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UScrollBox, WidgetBarStyle) == 0x000440, "Member 'UScrollBox::WidgetBarStyle' has a wrong offset!");
static_assert(offsetof(UScrollBox, Orientation) == 0x000B20, "Member 'UScrollBox::Orientation' has a wrong offset!");
static_assert(offsetof(UScrollBox, ScrollBarVisibility) == 0x000B21, "Member 'UScrollBox::ScrollBarVisibility' has a wrong offset!");
static_assert(offsetof(UScrollBox, ConsumeMouseWheel) == 0x000B22, "Member 'UScrollBox::ConsumeMouseWheel' has a wrong offset!");
static_assert(offsetof(UScrollBox, ScrollbarThickness) == 0x000B28, "Member 'UScrollBox::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UScrollBox, ScrollbarPadding) == 0x000B38, "Member 'UScrollBox::ScrollbarPadding' has a wrong offset!");
static_assert(offsetof(UScrollBox, AlwaysShowScrollbar) == 0x000B48, "Member 'UScrollBox::AlwaysShowScrollbar' has a wrong offset!");
static_assert(offsetof(UScrollBox, AlwaysShowScrollbarTrack) == 0x000B49, "Member 'UScrollBox::AlwaysShowScrollbarTrack' has a wrong offset!");
static_assert(offsetof(UScrollBox, AllowOverscroll) == 0x000B4A, "Member 'UScrollBox::AllowOverscroll' has a wrong offset!");
static_assert(offsetof(UScrollBox, BackPadScrolling) == 0x000B4B, "Member 'UScrollBox::BackPadScrolling' has a wrong offset!");
static_assert(offsetof(UScrollBox, FrontPadScrolling) == 0x000B4C, "Member 'UScrollBox::FrontPadScrolling' has a wrong offset!");
static_assert(offsetof(UScrollBox, bAnimateWheelScrolling) == 0x000B4D, "Member 'UScrollBox::bAnimateWheelScrolling' has a wrong offset!");
static_assert(offsetof(UScrollBox, NavigationDestination) == 0x000B4E, "Member 'UScrollBox::NavigationDestination' has a wrong offset!");
static_assert(offsetof(UScrollBox, NavigationScrollPadding) == 0x000B50, "Member 'UScrollBox::NavigationScrollPadding' has a wrong offset!");
static_assert(offsetof(UScrollBox, ScrollWhenFocusChanges) == 0x000B54, "Member 'UScrollBox::ScrollWhenFocusChanges' has a wrong offset!");
static_assert(offsetof(UScrollBox, bAllowRightClickDragScrolling) == 0x000B55, "Member 'UScrollBox::bAllowRightClickDragScrolling' has a wrong offset!");
static_assert(offsetof(UScrollBox, WheelScrollMultiplier) == 0x000B58, "Member 'UScrollBox::WheelScrollMultiplier' has a wrong offset!");
static_assert(offsetof(UScrollBox, OnUserScrolled) == 0x000B60, "Member 'UScrollBox::OnUserScrolled' has a wrong offset!");

// Class UMG.Image
// 0x0138 (0x0250 - 0x0118)
class UImage : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0120(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BrushDelegate;                                     // 0x01E0(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x01EC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ColorAndOpacityDelegate;                           // 0x01FC(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipForRightToLeftFlowDirection;                  // 0x0208(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)> OnMouseButtonDownEvent; // 0x020C(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0x38];                                     // 0x0218(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetDynamicMaterial();
	void SetBrush(const struct FSlateBrush& InBrush);
	void SetBrushFromAsset(class USlateBrushAsset* Asset);
	void SetBrushFromAtlasInterface(TScriptInterface<class ISlateTextureAtlasInterface> AtlasRegion, bool bMatchSize);
	void SetBrushFromMaterial(class UMaterialInterface* Material);
	void SetBrushFromSoftMaterial(TSoftObjectPtr<class UMaterialInterface> SoftMaterial);
	void SetBrushFromSoftTexture(TSoftObjectPtr<class UTexture2D> SoftTexture, bool bMatchSize);
	void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);
	void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);
	void SetBrushResourceObject(class UObject* ResourceObject);
	void SetBrushTintColor(const struct FSlateColor& TintColor);
	void SetColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetDesiredSizeOverride(const struct FVector2D& DesiredSize);
	void SetOpacity(float InOpacity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Image">();
	}
	static class UImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImage>();
	}
};
static_assert(alignof(UImage) == 0x000010, "Wrong alignment on UImage");
static_assert(sizeof(UImage) == 0x000250, "Wrong size on UImage");
static_assert(offsetof(UImage, Brush) == 0x000120, "Member 'UImage::Brush' has a wrong offset!");
static_assert(offsetof(UImage, BrushDelegate) == 0x0001E0, "Member 'UImage::BrushDelegate' has a wrong offset!");
static_assert(offsetof(UImage, ColorAndOpacity) == 0x0001EC, "Member 'UImage::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UImage, ColorAndOpacityDelegate) == 0x0001FC, "Member 'UImage::ColorAndOpacityDelegate' has a wrong offset!");
static_assert(offsetof(UImage, bFlipForRightToLeftFlowDirection) == 0x000208, "Member 'UImage::bFlipForRightToLeftFlowDirection' has a wrong offset!");
static_assert(offsetof(UImage, OnMouseButtonDownEvent) == 0x00020C, "Member 'UImage::OnMouseButtonDownEvent' has a wrong offset!");

// Class UMG.ListViewBase
// 0x0118 (0x0230 - 0x0118)
class UListViewBase : public UWidget
{
public:
	TSubclassOf<class UUserWidget>                EntryWidgetClass;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WheelScrollMultiplier;                             // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableScrollAnimation;                            // 0x0124(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AllowOverscroll;                                   // 0x0125(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRightClickScrolling;                        // 0x0126(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableFixedLineOffset;                            // 0x0127(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FixedLineScrollOffset;                             // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowDragging;                                    // 0x012C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UUserWidget* Widget)> BP_OnEntryGenerated;                   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UUserWidget* Widget)> BP_OnEntryReleased;                    // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	struct FUserWidgetPool                        EntryWidgetPool;                                   // 0x0150(0x0088)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x58];                                     // 0x01D8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RegenerateAllEntries();
	void RequestRefresh();
	void ScrollToBottom();
	void ScrollToTop();
	void SetScrollBarVisibility(ESlateVisibility InVisibility);
	void SetScrollOffset(const float InScrollOffset);
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);

	const TArray<class UUserWidget*> GetDisplayedEntryWidgets() const;
	float GetScrollOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ListViewBase">();
	}
	static class UListViewBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UListViewBase>();
	}
};
static_assert(alignof(UListViewBase) == 0x000008, "Wrong alignment on UListViewBase");
static_assert(sizeof(UListViewBase) == 0x000230, "Wrong size on UListViewBase");
static_assert(offsetof(UListViewBase, EntryWidgetClass) == 0x000118, "Member 'UListViewBase::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UListViewBase, WheelScrollMultiplier) == 0x000120, "Member 'UListViewBase::WheelScrollMultiplier' has a wrong offset!");
static_assert(offsetof(UListViewBase, bEnableScrollAnimation) == 0x000124, "Member 'UListViewBase::bEnableScrollAnimation' has a wrong offset!");
static_assert(offsetof(UListViewBase, AllowOverscroll) == 0x000125, "Member 'UListViewBase::AllowOverscroll' has a wrong offset!");
static_assert(offsetof(UListViewBase, bEnableRightClickScrolling) == 0x000126, "Member 'UListViewBase::bEnableRightClickScrolling' has a wrong offset!");
static_assert(offsetof(UListViewBase, bEnableFixedLineOffset) == 0x000127, "Member 'UListViewBase::bEnableFixedLineOffset' has a wrong offset!");
static_assert(offsetof(UListViewBase, FixedLineScrollOffset) == 0x000128, "Member 'UListViewBase::FixedLineScrollOffset' has a wrong offset!");
static_assert(offsetof(UListViewBase, bAllowDragging) == 0x00012C, "Member 'UListViewBase::bAllowDragging' has a wrong offset!");
static_assert(offsetof(UListViewBase, BP_OnEntryGenerated) == 0x000130, "Member 'UListViewBase::BP_OnEntryGenerated' has a wrong offset!");
static_assert(offsetof(UListViewBase, BP_OnEntryReleased) == 0x000140, "Member 'UListViewBase::BP_OnEntryReleased' has a wrong offset!");
static_assert(offsetof(UListViewBase, EntryWidgetPool) == 0x000150, "Member 'UListViewBase::EntryWidgetPool' has a wrong offset!");

// Class UMG.ListViewDesignerPreviewItem
// 0x0000 (0x0028 - 0x0028)
class UListViewDesignerPreviewItem final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ListViewDesignerPreviewItem">();
	}
	static class UListViewDesignerPreviewItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UListViewDesignerPreviewItem>();
	}
};
static_assert(alignof(UListViewDesignerPreviewItem) == 0x000008, "Wrong alignment on UListViewDesignerPreviewItem");
static_assert(sizeof(UListViewDesignerPreviewItem) == 0x000028, "Wrong size on UListViewDesignerPreviewItem");

// Class UMG.ListView
// 0x0920 (0x0B50 - 0x0230)
class UListView : public UListViewBase
{
public:
	uint8                                         Pad_230[0xE0];                                     // 0x0230(0x00E0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTableViewStyle                        WidgetStyle;                                       // 0x0310(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x03E0(0x06E0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EOrientation                                  Orientation;                                       // 0x0AC0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESelectionMode                                SelectionMode;                                     // 0x0AC1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EConsumeMouseWheel                            ConsumeMouseWheel;                                 // 0x0AC2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClearSelectionOnClick;                            // 0x0AC3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFocusable;                                      // 0x0AC4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC5[0x3];                                      // 0x0AC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EntrySpacing;                                      // 0x0AC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReturnFocusToSelection;                           // 0x0ACC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ACD[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ListItems;                                         // 0x0AD0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE0[0x10];                                     // 0x0AE0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* Item, class UUserWidget* Widget)> BP_OnEntryInitialized; // 0x0AF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UObject* Item)> BP_OnItemClicked;                            // 0x0B00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UObject* Item)> BP_OnItemDoubleClicked;                      // 0x0B10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UObject* Item, bool bIsHovered)> BP_OnItemIsHoveredChanged;  // 0x0B20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UObject* Item, bool bIsSelected)> BP_OnItemSelectionChanged; // 0x0B30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UObject* Item, class UUserWidget* Widget)> BP_OnItemScrolledIntoView; // 0x0B40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void AddItem(class UObject* Item);
	void BP_CancelScrollIntoView();
	void BP_ClearSelection();
	void BP_NavigateToItem(class UObject* Item);
	void BP_ScrollItemIntoView(class UObject* Item);
	void BP_SetItemSelection(class UObject* Item, bool bSelected);
	void BP_SetListItems(const TArray<class UObject*>& InListItems);
	void BP_SetSelectedItem(class UObject* Item);
	void ClearListItems();
	void NavigateToIndex(int32 Index_0);
	void RemoveItem(class UObject* Item);
	void ScrollIndexIntoView(int32 Index_0);
	void SetSelectedIndex(int32 Index_0);
	void SetSelectionMode(ESelectionMode SelectionMode_0);

	int32 BP_GetNumItemsSelected() const;
	class UObject* BP_GetSelectedItem() const;
	bool BP_GetSelectedItems(TArray<class UObject*>* Items) const;
	bool BP_IsItemVisible(class UObject* Item) const;
	int32 GetIndexForItem(const class UObject* Item) const;
	class UObject* GetItemAt(int32 Index_0) const;
	const TArray<class UObject*> GetListItems() const;
	int32 GetNumItems() const;
	bool IsRefreshPending() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ListView">();
	}
	static class UListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UListView>();
	}
};
static_assert(alignof(UListView) == 0x000010, "Wrong alignment on UListView");
static_assert(sizeof(UListView) == 0x000B50, "Wrong size on UListView");
static_assert(offsetof(UListView, WidgetStyle) == 0x000310, "Member 'UListView::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UListView, ScrollBarStyle) == 0x0003E0, "Member 'UListView::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UListView, Orientation) == 0x000AC0, "Member 'UListView::Orientation' has a wrong offset!");
static_assert(offsetof(UListView, SelectionMode) == 0x000AC1, "Member 'UListView::SelectionMode' has a wrong offset!");
static_assert(offsetof(UListView, ConsumeMouseWheel) == 0x000AC2, "Member 'UListView::ConsumeMouseWheel' has a wrong offset!");
static_assert(offsetof(UListView, bClearSelectionOnClick) == 0x000AC3, "Member 'UListView::bClearSelectionOnClick' has a wrong offset!");
static_assert(offsetof(UListView, bIsFocusable) == 0x000AC4, "Member 'UListView::bIsFocusable' has a wrong offset!");
static_assert(offsetof(UListView, EntrySpacing) == 0x000AC8, "Member 'UListView::EntrySpacing' has a wrong offset!");
static_assert(offsetof(UListView, bReturnFocusToSelection) == 0x000ACC, "Member 'UListView::bReturnFocusToSelection' has a wrong offset!");
static_assert(offsetof(UListView, ListItems) == 0x000AD0, "Member 'UListView::ListItems' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnEntryInitialized) == 0x000AF0, "Member 'UListView::BP_OnEntryInitialized' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnItemClicked) == 0x000B00, "Member 'UListView::BP_OnItemClicked' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnItemDoubleClicked) == 0x000B10, "Member 'UListView::BP_OnItemDoubleClicked' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnItemIsHoveredChanged) == 0x000B20, "Member 'UListView::BP_OnItemIsHoveredChanged' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnItemSelectionChanged) == 0x000B30, "Member 'UListView::BP_OnItemSelectionChanged' has a wrong offset!");
static_assert(offsetof(UListView, BP_OnItemScrolledIntoView) == 0x000B40, "Member 'UListView::BP_OnItemScrolledIntoView' has a wrong offset!");

// Class UMG.UserListEntry
// 0x0000 (0x0000 - 0x0000)
class IUserListEntry final
{
public:
	void BP_OnEntryReleased();
	void BP_OnItemExpansionChanged(bool bIsExpanded);
	void BP_OnItemSelectionChanged(bool bIsSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserListEntry">();
	}
	static class IUserListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUserListEntry>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IUserListEntry) == 0x000001, "Wrong alignment on IUserListEntry");
static_assert(sizeof(IUserListEntry) == 0x000001, "Wrong size on IUserListEntry");

// Class UMG.UserObjectListEntry
// 0x0000 (0x0000 - 0x0000)
class IUserObjectListEntry final
{
public:
	void OnListItemObjectSet(class UObject* ListItemObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserObjectListEntry">();
	}
	static class IUserObjectListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUserObjectListEntry>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IUserObjectListEntry) == 0x000001, "Wrong alignment on IUserObjectListEntry");
static_assert(sizeof(IUserObjectListEntry) == 0x000001, "Wrong size on IUserObjectListEntry");

// Class UMG.UserObjectListEntryLibrary
// 0x0000 (0x0028 - 0x0028)
class UUserObjectListEntryLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* GetListItemObject(TScriptInterface<class IUserObjectListEntry> UserObjectListEntry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserObjectListEntryLibrary">();
	}
	static class UUserObjectListEntryLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserObjectListEntryLibrary>();
	}
};
static_assert(alignof(UUserObjectListEntryLibrary) == 0x000008, "Wrong alignment on UUserObjectListEntryLibrary");
static_assert(sizeof(UUserObjectListEntryLibrary) == 0x000028, "Wrong size on UUserObjectListEntryLibrary");

// Class UMG.RichTextBlock
// 0x0698 (0x07D0 - 0x0138)
class URichTextBlock : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0138(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             TextStyleSet;                                      // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class URichTextBlockDecorator>> DecoratorClasses;                             // 0x0158(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bOverrideDefaultStyle;                             // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        DefaultTextStyleOverride;                          // 0x0170(0x0310)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         MinDesiredWidth;                                   // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextTransformPolicy                          TextTransformPolicy;                               // 0x0484(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_485[0xB];                                      // 0x0485(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        DefaultTextStyle;                                  // 0x0490(0x0310)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class URichTextBlockDecorator*>        InstanceDecorators;                                // 0x07A0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B0[0x20];                                     // 0x07B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllDefaultStyleOverrides();
	class URichTextBlockDecorator* GetDecoratorByClass(TSubclassOf<class URichTextBlockDecorator> DecoratorClass);
	class UMaterialInstanceDynamic* GetDefaultDynamicMaterial();
	void RefreshTextLayout();
	void SetAutoWrapText(bool InAutoTextWrap);
	void SetDefaultColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetDefaultFont(const struct FSlateFontInfo& InFontInfo);
	void SetDefaultShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity);
	void SetDefaultShadowOffset(const struct FVector2D& InShadowOffset);
	void SetDefaultStrikeBrush(struct FSlateBrush* InStrikeBrush);
	void SetDefaultTextStyle(const struct FTextBlockStyle& InDefaultTextStyle);
	void SetMinDesiredWidth(float InMinDesiredWidth);
	void SetText(const class FText& InText);
	void SetTextStyleSet(class UDataTable* NewTextStyleSet);
	void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);

	class FText GetText() const;
	class UDataTable* GetTextStyleSet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlock">();
	}
	static class URichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlock>();
	}
};
static_assert(alignof(URichTextBlock) == 0x000010, "Wrong alignment on URichTextBlock");
static_assert(sizeof(URichTextBlock) == 0x0007D0, "Wrong size on URichTextBlock");
static_assert(offsetof(URichTextBlock, Text) == 0x000138, "Member 'URichTextBlock::Text' has a wrong offset!");
static_assert(offsetof(URichTextBlock, TextStyleSet) == 0x000150, "Member 'URichTextBlock::TextStyleSet' has a wrong offset!");
static_assert(offsetof(URichTextBlock, DecoratorClasses) == 0x000158, "Member 'URichTextBlock::DecoratorClasses' has a wrong offset!");
static_assert(offsetof(URichTextBlock, bOverrideDefaultStyle) == 0x000168, "Member 'URichTextBlock::bOverrideDefaultStyle' has a wrong offset!");
static_assert(offsetof(URichTextBlock, DefaultTextStyleOverride) == 0x000170, "Member 'URichTextBlock::DefaultTextStyleOverride' has a wrong offset!");
static_assert(offsetof(URichTextBlock, MinDesiredWidth) == 0x000480, "Member 'URichTextBlock::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(URichTextBlock, TextTransformPolicy) == 0x000484, "Member 'URichTextBlock::TextTransformPolicy' has a wrong offset!");
static_assert(offsetof(URichTextBlock, DefaultTextStyle) == 0x000490, "Member 'URichTextBlock::DefaultTextStyle' has a wrong offset!");
static_assert(offsetof(URichTextBlock, InstanceDecorators) == 0x0007A0, "Member 'URichTextBlock::InstanceDecorators' has a wrong offset!");

// Class UMG.TileView
// 0x0020 (0x0B70 - 0x0B50)
class UTileView : public UListView
{
public:
	float                                         EntryHeight;                                       // 0x0B50(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntryWidth;                                        // 0x0B54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EListItemAlignment                            TileAlignment;                                     // 0x0B58(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWrapHorizontalNavigation;                         // 0x0B59(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B5A[0x16];                                     // 0x0B5A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEntryHeight(float NewHeight);
	void SetEntryWidth(float NewWidth);

	float GetEntryHeight() const;
	float GetEntryWidth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TileView">();
	}
	static class UTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTileView>();
	}
};
static_assert(alignof(UTileView) == 0x000010, "Wrong alignment on UTileView");
static_assert(sizeof(UTileView) == 0x000B70, "Wrong size on UTileView");
static_assert(offsetof(UTileView, EntryHeight) == 0x000B50, "Member 'UTileView::EntryHeight' has a wrong offset!");
static_assert(offsetof(UTileView, EntryWidth) == 0x000B54, "Member 'UTileView::EntryWidth' has a wrong offset!");
static_assert(offsetof(UTileView, TileAlignment) == 0x000B58, "Member 'UTileView::TileAlignment' has a wrong offset!");
static_assert(offsetof(UTileView, bWrapHorizontalNavigation) == 0x000B59, "Member 'UTileView::bWrapHorizontalNavigation' has a wrong offset!");

// Class UMG.HorizontalBox
// 0x0010 (0x0140 - 0x0130)
class UHorizontalBox final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UHorizontalBoxSlot* AddChildToHorizontalBox(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizontalBox">();
	}
	static class UHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizontalBox>();
	}
};
static_assert(alignof(UHorizontalBox) == 0x000008, "Wrong alignment on UHorizontalBox");
static_assert(sizeof(UHorizontalBox) == 0x000140, "Wrong size on UHorizontalBox");

// Class UMG.TreeView
// 0x0060 (0x0BB0 - 0x0B50)
#pragma pack(push, 0x1)
class alignas(0x10) UTreeView : public UListView
{
public:
	uint8                                         Pad_B50[0x10];                                     // 0x0B50(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Item, TArray<class UObject*>* Children)> BP_OnGetItemChildren;     // 0x0B60(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B6C[0x4];                                      // 0x0B6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* Item, bool bIsExpanded)> BP_OnItemExpansionChanged; // 0x0B70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B80[0x28];                                     // 0x0B80(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CollapseAll();
	void ExpandAll();
	void SetItemExpansion(class UObject* Item, bool bExpandItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TreeView">();
	}
	static class UTreeView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTreeView>();
	}
};
#pragma pack(pop)
static_assert(alignof(UTreeView) == 0x000010, "Wrong alignment on UTreeView");
static_assert(sizeof(UTreeView) == 0x000BB0, "Wrong size on UTreeView");
static_assert(offsetof(UTreeView, BP_OnGetItemChildren) == 0x000B60, "Member 'UTreeView::BP_OnGetItemChildren' has a wrong offset!");
static_assert(offsetof(UTreeView, BP_OnItemExpansionChanged) == 0x000B70, "Member 'UTreeView::BP_OnItemExpansionChanged' has a wrong offset!");

// Class UMG.MenuAnchor
// 0x0048 (0x0178 - 0x0130)
class UMenuAnchor final : public UContentWidget
{
public:
	TSubclassOf<class UUserWidget>                MenuClass;                                         // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetMenuContentEvent;                             // 0x0138(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnGetUserMenuContentEvent;                         // 0x0144(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuPlacement                                Placement;                                         // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFitInWindow;                                      // 0x0151(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDeferPaintingAfterWindowContent;             // 0x0152(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseApplicationMenuStack;                           // 0x0153(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsOpen)>  OnMenuOpenChanged;                                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	void FitInWindow(bool bFit);
	void Open(bool bFocusMenu);
	void SetPlacement(EMenuPlacement InPlacement);
	void ToggleOpen(bool bFocusOnOpen);

	struct FVector2D GetMenuPosition() const;
	bool HasOpenSubMenus() const;
	bool IsOpen() const;
	bool ShouldOpenDueToClick() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuAnchor">();
	}
	static class UMenuAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuAnchor>();
	}
};
static_assert(alignof(UMenuAnchor) == 0x000008, "Wrong alignment on UMenuAnchor");
static_assert(sizeof(UMenuAnchor) == 0x000178, "Wrong size on UMenuAnchor");
static_assert(offsetof(UMenuAnchor, MenuClass) == 0x000130, "Member 'UMenuAnchor::MenuClass' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, OnGetMenuContentEvent) == 0x000138, "Member 'UMenuAnchor::OnGetMenuContentEvent' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, OnGetUserMenuContentEvent) == 0x000144, "Member 'UMenuAnchor::OnGetUserMenuContentEvent' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, Placement) == 0x000150, "Member 'UMenuAnchor::Placement' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, bFitInWindow) == 0x000151, "Member 'UMenuAnchor::bFitInWindow' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, ShouldDeferPaintingAfterWindowContent) == 0x000152, "Member 'UMenuAnchor::ShouldDeferPaintingAfterWindowContent' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, UseApplicationMenuStack) == 0x000153, "Member 'UMenuAnchor::UseApplicationMenuStack' has a wrong offset!");
static_assert(offsetof(UMenuAnchor, OnMenuOpenChanged) == 0x000158, "Member 'UMenuAnchor::OnMenuOpenChanged' has a wrong offset!");

// Class UMG.Overlay
// 0x0010 (0x0140 - 0x0130)
class UOverlay : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UOverlaySlot* AddChildToOverlay(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Overlay">();
	}
	static class UOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlay>();
	}
};
static_assert(alignof(UOverlay) == 0x000008, "Wrong alignment on UOverlay");
static_assert(sizeof(UOverlay) == 0x000140, "Wrong size on UOverlay");

// Class UMG.WidgetComponent
// 0x0130 (0x06A0 - 0x0570)
class UWidgetComponent : public UMeshComponent
{
public:
	EWidgetSpace                                  Space;                                             // 0x0568(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetTimingPolicy                           TimingPolicy;                                      // 0x0569(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                WidgetClass;                                       // 0x0570(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              DrawSize;                                          // 0x0578(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bManuallyRedraw;                                   // 0x0580(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRedrawRequested;                                  // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_582[0x2];                                      // 0x0582(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RedrawTime;                                        // 0x0584(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CurrentDrawSize;                                   // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawAtDesiredSize;                                // 0x0598(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_599[0x7];                                      // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Pivot;                                             // 0x05A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReceiveHardwareInput;                             // 0x05B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWindowFocusable;                                  // 0x05B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWindowVisibility                             WindowVisibility;                                  // 0x05B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyGammaCorrection;                             // 0x05B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           OwnerPlayer;                                       // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           BackgroundColor;                                   // 0x05C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TintColorAndOpacity;                               // 0x05D0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OpacityFromTexture;                                // 0x05E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetBlendMode                              BlendMode;                                         // 0x05E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTwoSided;                                       // 0x05E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TickWhenOffscreen;                                 // 0x05E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E7[0x1];                                      // 0x05E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             BodySetup;                                         // 0x05E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TranslucentMaterial;                               // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     TranslucentMaterial_OneSided;                      // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OpaqueMaterial;                                    // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OpaqueMaterial_OneSided;                           // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaskedMaterial;                                    // 0x0610(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     MaskedMaterial_OneSided;                           // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0620(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x0628(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAddedToScreen;                                    // 0x0630(0x0001)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEditTimeUsable;                                   // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_632[0x2];                                      // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SharedLayerName;                                   // 0x0634(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LayerZOrder;                                       // 0x0638(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWidgetGeometryMode                           GeometryMode;                                      // 0x063C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CylinderArcAngle;                                  // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETickMode                                     TickMode;                                          // 0x0644(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_645[0x2B];                                     // 0x0645(0x002B)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x0670(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_678[0x28];                                     // 0x0678(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestRedraw();
	void RequestRenderUpdate();
	void SetBackgroundColor(const struct FLinearColor& NewBackgroundColor);
	void SetCylinderArcAngle(const float InCylinderArcAngle);
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);
	void SetDrawSize(const struct FVector2D& Size);
	void SetGeometryMode(EWidgetGeometryMode InGeometryMode);
	void SetManuallyRedraw(bool bUseManualRedraw);
	void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);
	void SetPivot(const struct FVector2D& InPivot);
	void SetRedrawTime(float InRedrawTime);
	void SetTickMode(ETickMode InTickMode);
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);
	void SetTintColorAndOpacity(const struct FLinearColor& NewTintColorAndOpacity);
	void SetTwoSided(const bool bWantTwoSided);
	void SetWidget(class UUserWidget* Widget_0);
	void SetWidgetSpace(EWidgetSpace NewSpace);
	void SetWindowFocusable(bool bInWindowFocusable);
	void SetWindowVisibility(EWindowVisibility InVisibility);

	struct FVector2D GetCurrentDrawSize() const;
	float GetCylinderArcAngle() const;
	bool GetDrawAtDesiredSize() const;
	struct FVector2D GetDrawSize() const;
	EWidgetGeometryMode GetGeometryMode() const;
	bool GetManuallyRedraw() const;
	class UMaterialInstanceDynamic* GetMaterialInstance() const;
	class ULocalPlayer* GetOwnerPlayer() const;
	struct FVector2D GetPivot() const;
	float GetRedrawTime() const;
	class UTextureRenderTarget2D* GetRenderTarget() const;
	bool GetTickWhenOffscreen() const;
	bool GetTwoSided() const;
	class UUserWidget* GetUserWidgetObject() const;
	class UUserWidget* GetWidget() const;
	EWidgetSpace GetWidgetSpace() const;
	bool GetWindowFocusable() const;
	EWindowVisibility GetWindowVisiblility() const;
	bool IsWidgetVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetComponent">();
	}
	static class UWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetComponent>();
	}
};
static_assert(alignof(UWidgetComponent) == 0x000010, "Wrong alignment on UWidgetComponent");
static_assert(sizeof(UWidgetComponent) == 0x0006A0, "Wrong size on UWidgetComponent");
static_assert(offsetof(UWidgetComponent, Space) == 0x000568, "Member 'UWidgetComponent::Space' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TimingPolicy) == 0x000569, "Member 'UWidgetComponent::TimingPolicy' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, WidgetClass) == 0x000570, "Member 'UWidgetComponent::WidgetClass' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, DrawSize) == 0x000578, "Member 'UWidgetComponent::DrawSize' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bManuallyRedraw) == 0x000580, "Member 'UWidgetComponent::bManuallyRedraw' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bRedrawRequested) == 0x000581, "Member 'UWidgetComponent::bRedrawRequested' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, RedrawTime) == 0x000584, "Member 'UWidgetComponent::RedrawTime' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, CurrentDrawSize) == 0x000590, "Member 'UWidgetComponent::CurrentDrawSize' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bDrawAtDesiredSize) == 0x000598, "Member 'UWidgetComponent::bDrawAtDesiredSize' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, Pivot) == 0x0005A0, "Member 'UWidgetComponent::Pivot' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bReceiveHardwareInput) == 0x0005B0, "Member 'UWidgetComponent::bReceiveHardwareInput' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bWindowFocusable) == 0x0005B1, "Member 'UWidgetComponent::bWindowFocusable' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, WindowVisibility) == 0x0005B2, "Member 'UWidgetComponent::WindowVisibility' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bApplyGammaCorrection) == 0x0005B3, "Member 'UWidgetComponent::bApplyGammaCorrection' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, OwnerPlayer) == 0x0005B8, "Member 'UWidgetComponent::OwnerPlayer' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, BackgroundColor) == 0x0005C0, "Member 'UWidgetComponent::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TintColorAndOpacity) == 0x0005D0, "Member 'UWidgetComponent::TintColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, OpacityFromTexture) == 0x0005E0, "Member 'UWidgetComponent::OpacityFromTexture' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, BlendMode) == 0x0005E4, "Member 'UWidgetComponent::BlendMode' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bIsTwoSided) == 0x0005E5, "Member 'UWidgetComponent::bIsTwoSided' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TickWhenOffscreen) == 0x0005E6, "Member 'UWidgetComponent::TickWhenOffscreen' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, BodySetup) == 0x0005E8, "Member 'UWidgetComponent::BodySetup' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TranslucentMaterial) == 0x0005F0, "Member 'UWidgetComponent::TranslucentMaterial' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TranslucentMaterial_OneSided) == 0x0005F8, "Member 'UWidgetComponent::TranslucentMaterial_OneSided' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, OpaqueMaterial) == 0x000600, "Member 'UWidgetComponent::OpaqueMaterial' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, OpaqueMaterial_OneSided) == 0x000608, "Member 'UWidgetComponent::OpaqueMaterial_OneSided' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, MaskedMaterial) == 0x000610, "Member 'UWidgetComponent::MaskedMaterial' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, MaskedMaterial_OneSided) == 0x000618, "Member 'UWidgetComponent::MaskedMaterial_OneSided' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, RenderTarget) == 0x000620, "Member 'UWidgetComponent::RenderTarget' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, MaterialInstance) == 0x000628, "Member 'UWidgetComponent::MaterialInstance' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bAddedToScreen) == 0x000630, "Member 'UWidgetComponent::bAddedToScreen' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, bEditTimeUsable) == 0x000631, "Member 'UWidgetComponent::bEditTimeUsable' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, SharedLayerName) == 0x000634, "Member 'UWidgetComponent::SharedLayerName' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, LayerZOrder) == 0x000638, "Member 'UWidgetComponent::LayerZOrder' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, GeometryMode) == 0x00063C, "Member 'UWidgetComponent::GeometryMode' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, CylinderArcAngle) == 0x000640, "Member 'UWidgetComponent::CylinderArcAngle' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, TickMode) == 0x000644, "Member 'UWidgetComponent::TickMode' has a wrong offset!");
static_assert(offsetof(UWidgetComponent, Widget) == 0x000670, "Member 'UWidgetComponent::Widget' has a wrong offset!");

// Class UMG.PropertyBinding
// 0x0038 (0x0060 - 0x0028)
class UPropertyBinding : public UObject
{
public:
	TWeakObjectPtr<class UObject>                 SourceObject;                                      // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDynamicPropertyPath                   SourcePath;                                        // 0x0030(0x0028)(NativeAccessSpecifierPublic)
	class FName                                   DestinationProperty;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PropertyBinding">();
	}
	static class UPropertyBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPropertyBinding>();
	}
};
static_assert(alignof(UPropertyBinding) == 0x000008, "Wrong alignment on UPropertyBinding");
static_assert(sizeof(UPropertyBinding) == 0x000060, "Wrong size on UPropertyBinding");
static_assert(offsetof(UPropertyBinding, SourceObject) == 0x000028, "Member 'UPropertyBinding::SourceObject' has a wrong offset!");
static_assert(offsetof(UPropertyBinding, SourcePath) == 0x000030, "Member 'UPropertyBinding::SourcePath' has a wrong offset!");
static_assert(offsetof(UPropertyBinding, DestinationProperty) == 0x000058, "Member 'UPropertyBinding::DestinationProperty' has a wrong offset!");

// Class UMG.BrushBinding
// 0x0008 (0x0068 - 0x0060)
class UBrushBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSlateBrush GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BrushBinding">();
	}
	static class UBrushBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBrushBinding>();
	}
};
static_assert(alignof(UBrushBinding) == 0x000008, "Wrong alignment on UBrushBinding");
static_assert(sizeof(UBrushBinding) == 0x000068, "Wrong size on UBrushBinding");

// Class UMG.WidgetInteractionComponent
// 0x02C0 (0x0560 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) UWidgetInteractionComponent : public USceneComponent
{
public:
	TMulticastInlineDelegate<void(class UWidgetComponent* WidgetComponent, class UWidgetComponent* PreviousWidgetComponent)> OnHoveredWidgetChanged; // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B0[0x10];                                     // 0x02B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VirtualUserIndex;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointerIndex;                                      // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractionDistance;                               // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetInteractionSource                      InteractionSource;                                 // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHitTesting;                                 // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebug;                                        // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3[0x1];                                      // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugSphereLineThickness;                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLineThickness;                                // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x02DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EC[0x7C];                                     // 0x02EC(0x007C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CustomHitResult;                                   // 0x0368(0x00E0)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              LocalHitLocation;                                  // 0x0448(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LastLocalHitLocation;                              // 0x0458(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetComponent*                       HoveredWidgetComponent;                            // 0x0468(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             LastHitResult;                                     // 0x0470(0x00E0)(Transient, IsPlainOldData, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetInteractable;                      // 0x0550(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetFocusable;                         // 0x0551(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHoveredWidgetHitTestVisible;                    // 0x0552(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_553[0x5];                                      // 0x0553(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PressAndReleaseKey(const struct FKey& Key);
	bool PressKey(const struct FKey& Key, bool bRepeat);
	void PressPointerKey(const struct FKey& Key);
	bool ReleaseKey(const struct FKey& Key);
	void ReleasePointerKey(const struct FKey& Key);
	void ScrollWheel(float ScrollDelta);
	bool SendKeyChar(const class FString& Characters, bool bRepeat);
	void SetCustomHitResult(const struct FHitResult& HitResult);
	void SetFocus(class UWidget* FocusWidget);

	struct FVector2D Get2DHitLocation() const;
	class UWidgetComponent* GetHoveredWidgetComponent() const;
	const struct FHitResult GetLastHitResult() const;
	bool IsOverFocusableWidget() const;
	bool IsOverHitTestVisibleWidget() const;
	bool IsOverInteractableWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetInteractionComponent">();
	}
	static class UWidgetInteractionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetInteractionComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UWidgetInteractionComponent) == 0x000010, "Wrong alignment on UWidgetInteractionComponent");
static_assert(sizeof(UWidgetInteractionComponent) == 0x000560, "Wrong size on UWidgetInteractionComponent");
static_assert(offsetof(UWidgetInteractionComponent, OnHoveredWidgetChanged) == 0x0002A0, "Member 'UWidgetInteractionComponent::OnHoveredWidgetChanged' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, VirtualUserIndex) == 0x0002C0, "Member 'UWidgetInteractionComponent::VirtualUserIndex' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, PointerIndex) == 0x0002C4, "Member 'UWidgetInteractionComponent::PointerIndex' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, TraceChannel) == 0x0002C8, "Member 'UWidgetInteractionComponent::TraceChannel' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, InteractionDistance) == 0x0002CC, "Member 'UWidgetInteractionComponent::InteractionDistance' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, InteractionSource) == 0x0002D0, "Member 'UWidgetInteractionComponent::InteractionSource' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, bEnableHitTesting) == 0x0002D1, "Member 'UWidgetInteractionComponent::bEnableHitTesting' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, bShowDebug) == 0x0002D2, "Member 'UWidgetInteractionComponent::bShowDebug' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, DebugSphereLineThickness) == 0x0002D4, "Member 'UWidgetInteractionComponent::DebugSphereLineThickness' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, DebugLineThickness) == 0x0002D8, "Member 'UWidgetInteractionComponent::DebugLineThickness' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, DebugColor) == 0x0002DC, "Member 'UWidgetInteractionComponent::DebugColor' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, CustomHitResult) == 0x000368, "Member 'UWidgetInteractionComponent::CustomHitResult' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, LocalHitLocation) == 0x000448, "Member 'UWidgetInteractionComponent::LocalHitLocation' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, LastLocalHitLocation) == 0x000458, "Member 'UWidgetInteractionComponent::LastLocalHitLocation' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, HoveredWidgetComponent) == 0x000468, "Member 'UWidgetInteractionComponent::HoveredWidgetComponent' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, LastHitResult) == 0x000470, "Member 'UWidgetInteractionComponent::LastHitResult' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, bIsHoveredWidgetInteractable) == 0x000550, "Member 'UWidgetInteractionComponent::bIsHoveredWidgetInteractable' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, bIsHoveredWidgetFocusable) == 0x000551, "Member 'UWidgetInteractionComponent::bIsHoveredWidgetFocusable' has a wrong offset!");
static_assert(offsetof(UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible) == 0x000552, "Member 'UWidgetInteractionComponent::bIsHoveredWidgetHitTestVisible' has a wrong offset!");

// Class UMG.BackgroundBlur
// 0x0110 (0x0240 - 0x0130)
class UBackgroundBlur final : public UContentWidget
{
public:
	struct FMargin                                Padding;                                           // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAlphaToBlur;                                 // 0x0142(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlurStrength;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAutoRadiusCalculation;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlurRadius;                                        // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               CornerRadius;                                      // 0x0150(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LowQualityFallbackBrush;                           // 0x0170(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_230[0x10];                                     // 0x0230(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);
	void SetBlurRadius(int32 InBlurRadius);
	void SetBlurStrength(float InStrength);
	void SetCornerRadius(const struct FVector4& InCornerRadius);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLowQualityFallbackBrush(const struct FSlateBrush& InBrush);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackgroundBlur">();
	}
	static class UBackgroundBlur* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlur>();
	}
};
static_assert(alignof(UBackgroundBlur) == 0x000010, "Wrong alignment on UBackgroundBlur");
static_assert(sizeof(UBackgroundBlur) == 0x000240, "Wrong size on UBackgroundBlur");
static_assert(offsetof(UBackgroundBlur, Padding) == 0x000130, "Member 'UBackgroundBlur::Padding' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, HorizontalAlignment) == 0x000140, "Member 'UBackgroundBlur::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, VerticalAlignment) == 0x000141, "Member 'UBackgroundBlur::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, bApplyAlphaToBlur) == 0x000142, "Member 'UBackgroundBlur::bApplyAlphaToBlur' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, BlurStrength) == 0x000144, "Member 'UBackgroundBlur::BlurStrength' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, bOverrideAutoRadiusCalculation) == 0x000148, "Member 'UBackgroundBlur::bOverrideAutoRadiusCalculation' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, BlurRadius) == 0x00014C, "Member 'UBackgroundBlur::BlurRadius' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, CornerRadius) == 0x000150, "Member 'UBackgroundBlur::CornerRadius' has a wrong offset!");
static_assert(offsetof(UBackgroundBlur, LowQualityFallbackBrush) == 0x000170, "Member 'UBackgroundBlur::LowQualityFallbackBrush' has a wrong offset!");

// Class UMG.BackgroundBlurSlot
// 0x0028 (0x0060 - 0x0038)
class UBackgroundBlurSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackgroundBlurSlot">();
	}
	static class UBackgroundBlurSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBackgroundBlurSlot>();
	}
};
static_assert(alignof(UBackgroundBlurSlot) == 0x000008, "Wrong alignment on UBackgroundBlurSlot");
static_assert(sizeof(UBackgroundBlurSlot) == 0x000060, "Wrong size on UBackgroundBlurSlot");
static_assert(offsetof(UBackgroundBlurSlot, Padding) == 0x000038, "Member 'UBackgroundBlurSlot::Padding' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurSlot, HorizontalAlignment) == 0x000048, "Member 'UBackgroundBlurSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBackgroundBlurSlot, VerticalAlignment) == 0x000049, "Member 'UBackgroundBlurSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.BoolBinding
// 0x0000 (0x0060 - 0x0060)
class UBoolBinding final : public UPropertyBinding
{
public:
	bool GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoolBinding">();
	}
	static class UBoolBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoolBinding>();
	}
};
static_assert(alignof(UBoolBinding) == 0x000008, "Wrong alignment on UBoolBinding");
static_assert(sizeof(UBoolBinding) == 0x000060, "Wrong size on UBoolBinding");

// Class UMG.BorderSlot
// 0x0028 (0x0060 - 0x0038)
class UBorderSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BorderSlot">();
	}
	static class UBorderSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBorderSlot>();
	}
};
static_assert(alignof(UBorderSlot) == 0x000008, "Wrong alignment on UBorderSlot");
static_assert(sizeof(UBorderSlot) == 0x000060, "Wrong size on UBorderSlot");
static_assert(offsetof(UBorderSlot, Padding) == 0x000038, "Member 'UBorderSlot::Padding' has a wrong offset!");
static_assert(offsetof(UBorderSlot, HorizontalAlignment) == 0x000048, "Member 'UBorderSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UBorderSlot, VerticalAlignment) == 0x000049, "Member 'UBorderSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.ButtonSlot
// 0x0028 (0x0060 - 0x0038)
class UButtonSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ButtonSlot">();
	}
	static class UButtonSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButtonSlot>();
	}
};
static_assert(alignof(UButtonSlot) == 0x000008, "Wrong alignment on UButtonSlot");
static_assert(sizeof(UButtonSlot) == 0x000060, "Wrong size on UButtonSlot");
static_assert(offsetof(UButtonSlot, Padding) == 0x000038, "Member 'UButtonSlot::Padding' has a wrong offset!");
static_assert(offsetof(UButtonSlot, HorizontalAlignment) == 0x000048, "Member 'UButtonSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UButtonSlot, VerticalAlignment) == 0x000049, "Member 'UButtonSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.CheckBox
// 0x0A50 (0x0B80 - 0x0130)
class UCheckBox final : public UContentWidget
{
public:
	ECheckBoxState                                CheckedState;                                      // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             CheckedStateDelegate;                              // 0x0134(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCheckBoxStyle                         WidgetStyle;                                       // 0x0140(0x0A10)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0B50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x0B51(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x0B52(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x0B53(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0B54(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B55[0x3];                                      // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bIsChecked)> OnCheckStateChanged;                             // 0x0B58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B68[0x18];                                     // 0x0B68(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCheckedState(ECheckBoxState InCheckedState);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetIsChecked(bool InIsChecked);
	void SetPressMethod(EButtonPressMethod InPressMethod);
	void SetTouchMethod(EButtonTouchMethod InTouchMethod);

	ECheckBoxState GetCheckedState() const;
	bool IsChecked() const;
	bool IsPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckBox">();
	}
	static class UCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckBox>();
	}
};
static_assert(alignof(UCheckBox) == 0x000010, "Wrong alignment on UCheckBox");
static_assert(sizeof(UCheckBox) == 0x000B80, "Wrong size on UCheckBox");
static_assert(offsetof(UCheckBox, CheckedState) == 0x000130, "Member 'UCheckBox::CheckedState' has a wrong offset!");
static_assert(offsetof(UCheckBox, CheckedStateDelegate) == 0x000134, "Member 'UCheckBox::CheckedStateDelegate' has a wrong offset!");
static_assert(offsetof(UCheckBox, WidgetStyle) == 0x000140, "Member 'UCheckBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UCheckBox, HorizontalAlignment) == 0x000B50, "Member 'UCheckBox::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UCheckBox, ClickMethod) == 0x000B51, "Member 'UCheckBox::ClickMethod' has a wrong offset!");
static_assert(offsetof(UCheckBox, TouchMethod) == 0x000B52, "Member 'UCheckBox::TouchMethod' has a wrong offset!");
static_assert(offsetof(UCheckBox, PressMethod) == 0x000B53, "Member 'UCheckBox::PressMethod' has a wrong offset!");
static_assert(offsetof(UCheckBox, IsFocusable) == 0x000B54, "Member 'UCheckBox::IsFocusable' has a wrong offset!");
static_assert(offsetof(UCheckBox, OnCheckStateChanged) == 0x000B58, "Member 'UCheckBox::OnCheckStateChanged' has a wrong offset!");

// Class UMG.CheckedStateBinding
// 0x0008 (0x0068 - 0x0060)
class UCheckedStateBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECheckBoxState GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CheckedStateBinding">();
	}
	static class UCheckedStateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCheckedStateBinding>();
	}
};
static_assert(alignof(UCheckedStateBinding) == 0x000008, "Wrong alignment on UCheckedStateBinding");
static_assert(sizeof(UCheckedStateBinding) == 0x000068, "Wrong size on UCheckedStateBinding");

// Class UMG.ColorBinding
// 0x0008 (0x0068 - 0x0060)
class UColorBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FLinearColor GetLinearValue() const;
	struct FSlateColor GetSlateValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorBinding">();
	}
	static class UColorBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorBinding>();
	}
};
static_assert(alignof(UColorBinding) == 0x000008, "Wrong alignment on UColorBinding");
static_assert(sizeof(UColorBinding) == 0x000068, "Wrong size on UColorBinding");

// Class UMG.ComboBox
// 0x0030 (0x0148 - 0x0118)
class UComboBox final : public UWidget
{
public:
	TArray<class UObject*>                        Items;                                             // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Item)>          OnGenerateWidgetEvent;                             // 0x0128(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x0134(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x13];                                     // 0x0135(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComboBox">();
	}
	static class UComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBox>();
	}
};
static_assert(alignof(UComboBox) == 0x000008, "Wrong alignment on UComboBox");
static_assert(sizeof(UComboBox) == 0x000148, "Wrong size on UComboBox");
static_assert(offsetof(UComboBox, Items) == 0x000118, "Member 'UComboBox::Items' has a wrong offset!");
static_assert(offsetof(UComboBox, OnGenerateWidgetEvent) == 0x000128, "Member 'UComboBox::OnGenerateWidgetEvent' has a wrong offset!");
static_assert(offsetof(UComboBox, bIsFocusable) == 0x000134, "Member 'UComboBox::bIsFocusable' has a wrong offset!");

// Class UMG.ComboBoxKey
// 0x1168 (0x1280 - 0x0118)
class UComboBoxKey final : public UWidget
{
public:
	TArray<class FName>                           Options;                                           // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   SelectedOption;                                    // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComboBoxStyle                         WidgetStyle;                                       // 0x0130(0x0600)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0730(0x0AC0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x11F0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x1204(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxListHeight;                                     // 0x1214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDownArrow;                                     // 0x1218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableGamepadNavigationMode;                      // 0x1219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x121A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121B[0x1];                                     // 0x121B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName Item)>             OnGenerateContentWidget;                           // 0x121C(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName Item)>             OnGenerateItemWidget;                              // 0x1228(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1234[0x4];                                     // 0x1234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName SelectedItem, ESelectInfo SelectionType)> OnSelectionChanged; // 0x1238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOpening;                                         // 0x1248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1258[0x28];                                    // 0x1258(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(class FName Option);
	void ClearOptions();
	void ClearSelection();
	bool RemoveOption(class FName Option);
	void SetSelectedOption(class FName Option);

	class FName GetSelectedOption() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComboBoxKey">();
	}
	static class UComboBoxKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBoxKey>();
	}
};
static_assert(alignof(UComboBoxKey) == 0x000010, "Wrong alignment on UComboBoxKey");
static_assert(sizeof(UComboBoxKey) == 0x001280, "Wrong size on UComboBoxKey");
static_assert(offsetof(UComboBoxKey, Options) == 0x000118, "Member 'UComboBoxKey::Options' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, SelectedOption) == 0x000128, "Member 'UComboBoxKey::SelectedOption' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, WidgetStyle) == 0x000130, "Member 'UComboBoxKey::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, ItemStyle) == 0x000730, "Member 'UComboBoxKey::ItemStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, ForegroundColor) == 0x0011F0, "Member 'UComboBoxKey::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, ContentPadding) == 0x001204, "Member 'UComboBoxKey::ContentPadding' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, MaxListHeight) == 0x001214, "Member 'UComboBoxKey::MaxListHeight' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, bHasDownArrow) == 0x001218, "Member 'UComboBoxKey::bHasDownArrow' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, bEnableGamepadNavigationMode) == 0x001219, "Member 'UComboBoxKey::bEnableGamepadNavigationMode' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, bIsFocusable) == 0x00121A, "Member 'UComboBoxKey::bIsFocusable' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, OnGenerateContentWidget) == 0x00121C, "Member 'UComboBoxKey::OnGenerateContentWidget' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, OnGenerateItemWidget) == 0x001228, "Member 'UComboBoxKey::OnGenerateItemWidget' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, OnSelectionChanged) == 0x001238, "Member 'UComboBoxKey::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UComboBoxKey, OnOpening) == 0x001248, "Member 'UComboBoxKey::OnOpening' has a wrong offset!");

// Class UMG.ComboBoxString
// 0x11E8 (0x1300 - 0x0118)
class UComboBoxString final : public UWidget
{
public:
	TArray<class FString>                         DefaultOptions;                                    // 0x0118(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 SelectedOption;                                    // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComboBoxStyle                         WidgetStyle;                                       // 0x0140(0x0600)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0740(0x0AC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x1200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxListHeight;                                     // 0x1210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDownArrow;                                      // 0x1214(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableGamepadNavigationMode;                       // 0x1215(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1216[0x2];                                     // 0x1216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x1218(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x1268(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsFocusable;                                      // 0x127C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127D[0x3];                                     // 0x127D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& Item)>    OnGenerateWidgetEvent;                             // 0x1280(0x000C)(Edit, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128C[0x4];                                     // 0x128C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FString& SelectedItem, ESelectInfo SelectionType)> OnSelectionChanged; // 0x1290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnOpening;                                         // 0x12A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B0[0x50];                                    // 0x12B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOption(const class FString& Option);
	void ClearOptions();
	void ClearSelection();
	void RefreshOptions();
	bool RemoveOption(const class FString& Option);
	void SetSelectedIndex(const int32 Index_0);
	void SetSelectedOption(const class FString& Option);

	int32 FindOptionIndex(const class FString& Option) const;
	class FString GetOptionAtIndex(int32 Index_0) const;
	int32 GetOptionCount() const;
	int32 GetSelectedIndex() const;
	class FString GetSelectedOption() const;
	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComboBoxString">();
	}
	static class UComboBoxString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComboBoxString>();
	}
};
static_assert(alignof(UComboBoxString) == 0x000010, "Wrong alignment on UComboBoxString");
static_assert(sizeof(UComboBoxString) == 0x001300, "Wrong size on UComboBoxString");
static_assert(offsetof(UComboBoxString, DefaultOptions) == 0x000118, "Member 'UComboBoxString::DefaultOptions' has a wrong offset!");
static_assert(offsetof(UComboBoxString, SelectedOption) == 0x000128, "Member 'UComboBoxString::SelectedOption' has a wrong offset!");
static_assert(offsetof(UComboBoxString, WidgetStyle) == 0x000140, "Member 'UComboBoxString::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxString, ItemStyle) == 0x000740, "Member 'UComboBoxString::ItemStyle' has a wrong offset!");
static_assert(offsetof(UComboBoxString, ContentPadding) == 0x001200, "Member 'UComboBoxString::ContentPadding' has a wrong offset!");
static_assert(offsetof(UComboBoxString, MaxListHeight) == 0x001210, "Member 'UComboBoxString::MaxListHeight' has a wrong offset!");
static_assert(offsetof(UComboBoxString, HasDownArrow) == 0x001214, "Member 'UComboBoxString::HasDownArrow' has a wrong offset!");
static_assert(offsetof(UComboBoxString, EnableGamepadNavigationMode) == 0x001215, "Member 'UComboBoxString::EnableGamepadNavigationMode' has a wrong offset!");
static_assert(offsetof(UComboBoxString, Font) == 0x001218, "Member 'UComboBoxString::Font' has a wrong offset!");
static_assert(offsetof(UComboBoxString, ForegroundColor) == 0x001268, "Member 'UComboBoxString::ForegroundColor' has a wrong offset!");
static_assert(offsetof(UComboBoxString, bIsFocusable) == 0x00127C, "Member 'UComboBoxString::bIsFocusable' has a wrong offset!");
static_assert(offsetof(UComboBoxString, OnGenerateWidgetEvent) == 0x001280, "Member 'UComboBoxString::OnGenerateWidgetEvent' has a wrong offset!");
static_assert(offsetof(UComboBoxString, OnSelectionChanged) == 0x001290, "Member 'UComboBoxString::OnSelectionChanged' has a wrong offset!");
static_assert(offsetof(UComboBoxString, OnOpening) == 0x0012A0, "Member 'UComboBoxString::OnOpening' has a wrong offset!");

// Class UMG.DynamicEntryBox
// 0x0008 (0x0200 - 0x01F8)
class UDynamicEntryBox : public UDynamicEntryBoxBase
{
public:
	TSubclassOf<class UUserWidget>                EntryWidgetClass;                                  // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UUserWidget* BP_CreateEntry();
	class UUserWidget* BP_CreateEntryOfClass(TSubclassOf<class UUserWidget> EntryClass);
	void RemoveEntry(class UUserWidget* EntryWidget);
	void Reset(bool bDeleteWidgets);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DynamicEntryBox">();
	}
	static class UDynamicEntryBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDynamicEntryBox>();
	}
};
static_assert(alignof(UDynamicEntryBox) == 0x000008, "Wrong alignment on UDynamicEntryBox");
static_assert(sizeof(UDynamicEntryBox) == 0x000200, "Wrong size on UDynamicEntryBox");
static_assert(offsetof(UDynamicEntryBox, EntryWidgetClass) == 0x0001F8, "Member 'UDynamicEntryBox::EntryWidgetClass' has a wrong offset!");

// Class UMG.EditableText
// 0x0358 (0x0470 - 0x0118)
#pragma pack(push, 0x1)
class alignas(0x10) UEditableText : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0118(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0130(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HintText;                                          // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0158(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0xC];                                      // 0x0164(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextStyle                     WidgetStyle;                                       // 0x0170(0x02B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x0420(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0421(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x0424(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x0428(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0429(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x042A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x042B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x042C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x042D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x042E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x042F(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardTrigger                       VirtualKeyboardTrigger;                            // 0x0430(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0431(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextOverflowPolicy                           OverflowPolicy;                                    // 0x0433(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0434(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_437[0x1];                                      // 0x0437(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FText& Text)> OnTextChanged;                           // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text, ETextCommit CommitMethod)> OnTextCommitted; // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_458[0x10];                                     // 0x0458(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHintText(const class FText& InHintText);
	void SetIsPassword(bool InbIsPassword);
	void SetIsReadOnly(bool InbIsReadyOnly);
	void SetJustification(ETextJustify InJustification);
	void SetText(const class FText& InText);
	void SetTextOverflowPolicy(ETextOverflowPolicy InOverflowPolicy);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditableText">();
	}
	static class UEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditableText>();
	}
};
#pragma pack(pop)
static_assert(alignof(UEditableText) == 0x000010, "Wrong alignment on UEditableText");
static_assert(sizeof(UEditableText) == 0x000470, "Wrong size on UEditableText");
static_assert(offsetof(UEditableText, Text) == 0x000118, "Member 'UEditableText::Text' has a wrong offset!");
static_assert(offsetof(UEditableText, TextDelegate) == 0x000130, "Member 'UEditableText::TextDelegate' has a wrong offset!");
static_assert(offsetof(UEditableText, HintText) == 0x000140, "Member 'UEditableText::HintText' has a wrong offset!");
static_assert(offsetof(UEditableText, HintTextDelegate) == 0x000158, "Member 'UEditableText::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UEditableText, WidgetStyle) == 0x000170, "Member 'UEditableText::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UEditableText, IsReadOnly) == 0x000420, "Member 'UEditableText::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UEditableText, IsPassword) == 0x000421, "Member 'UEditableText::IsPassword' has a wrong offset!");
static_assert(offsetof(UEditableText, MinimumDesiredWidth) == 0x000424, "Member 'UEditableText::MinimumDesiredWidth' has a wrong offset!");
static_assert(offsetof(UEditableText, IsCaretMovedWhenGainFocus) == 0x000428, "Member 'UEditableText::IsCaretMovedWhenGainFocus' has a wrong offset!");
static_assert(offsetof(UEditableText, SelectAllTextWhenFocused) == 0x000429, "Member 'UEditableText::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UEditableText, RevertTextOnEscape) == 0x00042A, "Member 'UEditableText::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UEditableText, ClearKeyboardFocusOnCommit) == 0x00042B, "Member 'UEditableText::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UEditableText, SelectAllTextOnCommit) == 0x00042C, "Member 'UEditableText::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(UEditableText, AllowContextMenu) == 0x00042D, "Member 'UEditableText::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UEditableText, KeyboardType) == 0x00042E, "Member 'UEditableText::KeyboardType' has a wrong offset!");
static_assert(offsetof(UEditableText, VirtualKeyboardOptions) == 0x00042F, "Member 'UEditableText::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UEditableText, VirtualKeyboardTrigger) == 0x000430, "Member 'UEditableText::VirtualKeyboardTrigger' has a wrong offset!");
static_assert(offsetof(UEditableText, VirtualKeyboardDismissAction) == 0x000431, "Member 'UEditableText::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UEditableText, Justification) == 0x000432, "Member 'UEditableText::Justification' has a wrong offset!");
static_assert(offsetof(UEditableText, OverflowPolicy) == 0x000433, "Member 'UEditableText::OverflowPolicy' has a wrong offset!");
static_assert(offsetof(UEditableText, ShapedTextOptions) == 0x000434, "Member 'UEditableText::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UEditableText, OnTextChanged) == 0x000438, "Member 'UEditableText::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UEditableText, OnTextCommitted) == 0x000448, "Member 'UEditableText::OnTextCommitted' has a wrong offset!");

// Class UMG.EditableTextBox
// 0x0B58 (0x0C70 - 0x0118)
class UEditableTextBox final : public UWidget
{
public:
	class FText                                   Text;                                              // 0x0118(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             TextDelegate;                                      // 0x0130(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0140(0x0AC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0C00(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0C18(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReadOnly;                                        // 0x0C24(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPassword;                                        // 0x0C25(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C26[0x2];                                      // 0x0C26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDesiredWidth;                               // 0x0C28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCaretMovedWhenGainFocus;                         // 0x0C2C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0C2D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x0C2E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0C2F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x0C30(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0C31(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardType                          KeyboardType;                                      // 0x0C32(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0C33(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardTrigger                       VirtualKeyboardTrigger;                            // 0x0C34(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0C35(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0C36(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextOverflowPolicy                           OverflowPolicy;                                    // 0x0C37(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShapedTextOptions                     ShapedTextOptions;                                 // 0x0C38(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3B[0x5];                                      // 0x0C3B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FText& Text)> OnTextChanged;                           // 0x0C40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text, ETextCommit CommitMethod)> OnTextCommitted; // 0x0C50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C60[0x10];                                     // 0x0C60(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearError();
	void SetError(const class FText& InError);
	void SetForegroundColor(const struct FLinearColor& Color);
	void SetHintText(const class FText& InText);
	void SetIsPassword(bool bIsPassword);
	void SetIsReadOnly(bool bReadOnly);
	void SetJustification(ETextJustify InJustification);
	void SetText(const class FText& InText);
	void SetTextOverflowPolicy(ETextOverflowPolicy InOverflowPolicy);

	class FText GetText() const;
	bool HasError() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditableTextBox">();
	}
	static class UEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditableTextBox>();
	}
};
static_assert(alignof(UEditableTextBox) == 0x000010, "Wrong alignment on UEditableTextBox");
static_assert(sizeof(UEditableTextBox) == 0x000C70, "Wrong size on UEditableTextBox");
static_assert(offsetof(UEditableTextBox, Text) == 0x000118, "Member 'UEditableTextBox::Text' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, TextDelegate) == 0x000130, "Member 'UEditableTextBox::TextDelegate' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, WidgetStyle) == 0x000140, "Member 'UEditableTextBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, HintText) == 0x000C00, "Member 'UEditableTextBox::HintText' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, HintTextDelegate) == 0x000C18, "Member 'UEditableTextBox::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, IsReadOnly) == 0x000C24, "Member 'UEditableTextBox::IsReadOnly' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, IsPassword) == 0x000C25, "Member 'UEditableTextBox::IsPassword' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, MinimumDesiredWidth) == 0x000C28, "Member 'UEditableTextBox::MinimumDesiredWidth' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, IsCaretMovedWhenGainFocus) == 0x000C2C, "Member 'UEditableTextBox::IsCaretMovedWhenGainFocus' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, SelectAllTextWhenFocused) == 0x000C2D, "Member 'UEditableTextBox::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, RevertTextOnEscape) == 0x000C2E, "Member 'UEditableTextBox::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, ClearKeyboardFocusOnCommit) == 0x000C2F, "Member 'UEditableTextBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, SelectAllTextOnCommit) == 0x000C30, "Member 'UEditableTextBox::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, AllowContextMenu) == 0x000C31, "Member 'UEditableTextBox::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, KeyboardType) == 0x000C32, "Member 'UEditableTextBox::KeyboardType' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, VirtualKeyboardOptions) == 0x000C33, "Member 'UEditableTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, VirtualKeyboardTrigger) == 0x000C34, "Member 'UEditableTextBox::VirtualKeyboardTrigger' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, VirtualKeyboardDismissAction) == 0x000C35, "Member 'UEditableTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, Justification) == 0x000C36, "Member 'UEditableTextBox::Justification' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, OverflowPolicy) == 0x000C37, "Member 'UEditableTextBox::OverflowPolicy' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, ShapedTextOptions) == 0x000C38, "Member 'UEditableTextBox::ShapedTextOptions' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, OnTextChanged) == 0x000C40, "Member 'UEditableTextBox::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UEditableTextBox, OnTextCommitted) == 0x000C50, "Member 'UEditableTextBox::OnTextCommitted' has a wrong offset!");

// Class UMG.ExpandableArea
// 0x02D8 (0x03F0 - 0x0118)
class UExpandableArea final : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpandableAreaStyle                   style;                                             // 0x0120(0x01A0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BorderBrush;                                       // 0x02C0(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderColor;                                       // 0x0380(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsExpanded;                                       // 0x0394(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHeight;                                         // 0x0398(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                HeaderPadding;                                     // 0x039C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                AreaPadding;                                       // 0x03AC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UExpandableArea* Area, bool bIsExpanded)> OnExpansionChanged; // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWidget*                                HeaderContent;                                     // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                BodyContent;                                       // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x10];                                     // 0x03E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsExpanded(bool IsExpanded);
	void SetIsExpanded_Animated(bool IsExpanded);

	bool GetIsExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExpandableArea">();
	}
	static class UExpandableArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExpandableArea>();
	}
};
static_assert(alignof(UExpandableArea) == 0x000010, "Wrong alignment on UExpandableArea");
static_assert(sizeof(UExpandableArea) == 0x0003F0, "Wrong size on UExpandableArea");
static_assert(offsetof(UExpandableArea, style) == 0x000120, "Member 'UExpandableArea::style' has a wrong offset!");
static_assert(offsetof(UExpandableArea, BorderBrush) == 0x0002C0, "Member 'UExpandableArea::BorderBrush' has a wrong offset!");
static_assert(offsetof(UExpandableArea, BorderColor) == 0x000380, "Member 'UExpandableArea::BorderColor' has a wrong offset!");
static_assert(offsetof(UExpandableArea, bIsExpanded) == 0x000394, "Member 'UExpandableArea::bIsExpanded' has a wrong offset!");
static_assert(offsetof(UExpandableArea, MaxHeight) == 0x000398, "Member 'UExpandableArea::MaxHeight' has a wrong offset!");
static_assert(offsetof(UExpandableArea, HeaderPadding) == 0x00039C, "Member 'UExpandableArea::HeaderPadding' has a wrong offset!");
static_assert(offsetof(UExpandableArea, AreaPadding) == 0x0003AC, "Member 'UExpandableArea::AreaPadding' has a wrong offset!");
static_assert(offsetof(UExpandableArea, OnExpansionChanged) == 0x0003C0, "Member 'UExpandableArea::OnExpansionChanged' has a wrong offset!");
static_assert(offsetof(UExpandableArea, HeaderContent) == 0x0003D0, "Member 'UExpandableArea::HeaderContent' has a wrong offset!");
static_assert(offsetof(UExpandableArea, BodyContent) == 0x0003D8, "Member 'UExpandableArea::BodyContent' has a wrong offset!");

// Class UMG.FloatBinding
// 0x0000 (0x0060 - 0x0060)
class UFloatBinding final : public UPropertyBinding
{
public:
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatBinding">();
	}
	static class UFloatBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatBinding>();
	}
};
static_assert(alignof(UFloatBinding) == 0x000008, "Wrong alignment on UFloatBinding");
static_assert(sizeof(UFloatBinding) == 0x000060, "Wrong size on UFloatBinding");

// Class UMG.GridPanel
// 0x0030 (0x0160 - 0x0130)
class UGridPanel final : public UPanelWidget
{
public:
	TArray<float>                                 ColumnFill;                                        // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 RowFill;                                           // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGridSlot* AddChildToGrid(class UWidget* Content, int32 InRow, int32 InColumn);
	void SetColumnFill(int32 ColumnIndex, float Coefficient);
	void SetRowFill(int32 ColumnIndex, float Coefficient);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridPanel">();
	}
	static class UGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridPanel>();
	}
};
static_assert(alignof(UGridPanel) == 0x000008, "Wrong alignment on UGridPanel");
static_assert(sizeof(UGridPanel) == 0x000160, "Wrong size on UGridPanel");
static_assert(offsetof(UGridPanel, ColumnFill) == 0x000130, "Member 'UGridPanel::ColumnFill' has a wrong offset!");
static_assert(offsetof(UGridPanel, RowFill) == 0x000140, "Member 'UGridPanel::RowFill' has a wrong offset!");

// Class UMG.GridSlot
// 0x0040 (0x0078 - 0x0038)
class UGridSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowSpan;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnSpan;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Nudge;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColumn(int32 InColumn);
	void SetColumnSpan(int32 InColumnSpan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetLayer(int32 InLayer);
	void SetNudge(const struct FVector2D& InNudge);
	void SetPadding(const struct FMargin& InPadding);
	void SetRow(int32 InRow);
	void SetRowSpan(int32 InRowSpan);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridSlot">();
	}
	static class UGridSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridSlot>();
	}
};
static_assert(alignof(UGridSlot) == 0x000008, "Wrong alignment on UGridSlot");
static_assert(sizeof(UGridSlot) == 0x000078, "Wrong size on UGridSlot");
static_assert(offsetof(UGridSlot, Padding) == 0x000038, "Member 'UGridSlot::Padding' has a wrong offset!");
static_assert(offsetof(UGridSlot, HorizontalAlignment) == 0x000048, "Member 'UGridSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UGridSlot, VerticalAlignment) == 0x000049, "Member 'UGridSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UGridSlot, Row) == 0x00004C, "Member 'UGridSlot::Row' has a wrong offset!");
static_assert(offsetof(UGridSlot, RowSpan) == 0x000050, "Member 'UGridSlot::RowSpan' has a wrong offset!");
static_assert(offsetof(UGridSlot, Column) == 0x000054, "Member 'UGridSlot::Column' has a wrong offset!");
static_assert(offsetof(UGridSlot, ColumnSpan) == 0x000058, "Member 'UGridSlot::ColumnSpan' has a wrong offset!");
static_assert(offsetof(UGridSlot, Layer) == 0x00005C, "Member 'UGridSlot::Layer' has a wrong offset!");
static_assert(offsetof(UGridSlot, Nudge) == 0x000060, "Member 'UGridSlot::Nudge' has a wrong offset!");

// Class UMG.HorizontalBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UHorizontalBoxSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        Size;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetSize(const struct FSlateChildSize& InSize);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizontalBoxSlot">();
	}
	static class UHorizontalBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizontalBoxSlot>();
	}
};
static_assert(alignof(UHorizontalBoxSlot) == 0x000008, "Wrong alignment on UHorizontalBoxSlot");
static_assert(sizeof(UHorizontalBoxSlot) == 0x000060, "Wrong size on UHorizontalBoxSlot");
static_assert(offsetof(UHorizontalBoxSlot, Padding) == 0x000040, "Member 'UHorizontalBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UHorizontalBoxSlot, Size) == 0x000050, "Member 'UHorizontalBoxSlot::Size' has a wrong offset!");
static_assert(offsetof(UHorizontalBoxSlot, HorizontalAlignment) == 0x000058, "Member 'UHorizontalBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UHorizontalBoxSlot, VerticalAlignment) == 0x000059, "Member 'UHorizontalBoxSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.Int32Binding
// 0x0000 (0x0060 - 0x0060)
class UInt32Binding final : public UPropertyBinding
{
public:
	int32 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Int32Binding">();
	}
	static class UInt32Binding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInt32Binding>();
	}
};
static_assert(alignof(UInt32Binding) == 0x000008, "Wrong alignment on UInt32Binding");
static_assert(sizeof(UInt32Binding) == 0x000060, "Wrong size on UInt32Binding");

// Class UMG.UserListEntryLibrary
// 0x0000 (0x0028 - 0x0028)
class UUserListEntryLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UListViewBase* GetOwningListView(TScriptInterface<class IUserListEntry> UserListEntry);
	static bool IsListItemExpanded(TScriptInterface<class IUserListEntry> UserListEntry);
	static bool IsListItemSelected(TScriptInterface<class IUserListEntry> UserListEntry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserListEntryLibrary">();
	}
	static class UUserListEntryLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserListEntryLibrary>();
	}
};
static_assert(alignof(UUserListEntryLibrary) == 0x000008, "Wrong alignment on UUserListEntryLibrary");
static_assert(sizeof(UUserListEntryLibrary) == 0x000028, "Wrong size on UUserListEntryLibrary");

// Class UMG.MouseCursorBinding
// 0x0000 (0x0060 - 0x0060)
class UMouseCursorBinding final : public UPropertyBinding
{
public:
	EMouseCursor GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MouseCursorBinding">();
	}
	static class UMouseCursorBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMouseCursorBinding>();
	}
};
static_assert(alignof(UMouseCursorBinding) == 0x000008, "Wrong alignment on UMouseCursorBinding");
static_assert(sizeof(UMouseCursorBinding) == 0x000060, "Wrong size on UMouseCursorBinding");

// Class UMG.MovieScene2DTransformPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieScene2DTransformPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene2DTransformPropertySystem">();
	}
	static class UMovieScene2DTransformPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene2DTransformPropertySystem>();
	}
};
static_assert(alignof(UMovieScene2DTransformPropertySystem) == 0x000008, "Wrong alignment on UMovieScene2DTransformPropertySystem");
static_assert(sizeof(UMovieScene2DTransformPropertySystem) == 0x000058, "Wrong size on UMovieScene2DTransformPropertySystem");

// Class UMG.MovieScene2DTransformSection
// 0x0668 (0x0750 - 0x00E8)
class UMovieScene2DTransformSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieScene2DTransformMask             TransformMask;                                     // 0x00F0(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                Translation[0x2];                                  // 0x00F8(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Rotation;                                          // 0x02C8(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Scale[0x2];                                        // 0x03B0(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                Shear[0x2];                                        // 0x0580(0x00E8)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene2DTransformSection">();
	}
	static class UMovieScene2DTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene2DTransformSection>();
	}
};
static_assert(alignof(UMovieScene2DTransformSection) == 0x000008, "Wrong alignment on UMovieScene2DTransformSection");
static_assert(sizeof(UMovieScene2DTransformSection) == 0x000750, "Wrong size on UMovieScene2DTransformSection");
static_assert(offsetof(UMovieScene2DTransformSection, TransformMask) == 0x0000F0, "Member 'UMovieScene2DTransformSection::TransformMask' has a wrong offset!");
static_assert(offsetof(UMovieScene2DTransformSection, Translation) == 0x0000F8, "Member 'UMovieScene2DTransformSection::Translation' has a wrong offset!");
static_assert(offsetof(UMovieScene2DTransformSection, Rotation) == 0x0002C8, "Member 'UMovieScene2DTransformSection::Rotation' has a wrong offset!");
static_assert(offsetof(UMovieScene2DTransformSection, Scale) == 0x0003B0, "Member 'UMovieScene2DTransformSection::Scale' has a wrong offset!");
static_assert(offsetof(UMovieScene2DTransformSection, Shear) == 0x000580, "Member 'UMovieScene2DTransformSection::Shear' has a wrong offset!");

// Class UMG.MovieScene2DTransformTrack
// 0x0000 (0x00B8 - 0x00B8)
class UMovieScene2DTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene2DTransformTrack">();
	}
	static class UMovieScene2DTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene2DTransformTrack>();
	}
};
static_assert(alignof(UMovieScene2DTransformTrack) == 0x000008, "Wrong alignment on UMovieScene2DTransformTrack");
static_assert(sizeof(UMovieScene2DTransformTrack) == 0x0000B8, "Wrong size on UMovieScene2DTransformTrack");

// Class UMG.MovieSceneMarginPropertySystem
// 0x0000 (0x0058 - 0x0058)
class UMovieSceneMarginPropertySystem final : public UMovieScenePropertySystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMarginPropertySystem">();
	}
	static class UMovieSceneMarginPropertySystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMarginPropertySystem>();
	}
};
static_assert(alignof(UMovieSceneMarginPropertySystem) == 0x000008, "Wrong alignment on UMovieSceneMarginPropertySystem");
static_assert(sizeof(UMovieSceneMarginPropertySystem) == 0x000058, "Wrong size on UMovieSceneMarginPropertySystem");

// Class UMG.MovieSceneMarginSection
// 0x03A8 (0x0490 - 0x00E8)
class UMovieSceneMarginSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneFloatChannel                TopCurve;                                          // 0x00F0(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                LeftCurve;                                         // 0x01D8(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                RightCurve;                                        // 0x02C0(0x00E8)(NativeAccessSpecifierPublic)
	struct FMovieSceneFloatChannel                BottomCurve;                                       // 0x03A8(0x00E8)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMarginSection">();
	}
	static class UMovieSceneMarginSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMarginSection>();
	}
};
static_assert(alignof(UMovieSceneMarginSection) == 0x000008, "Wrong alignment on UMovieSceneMarginSection");
static_assert(sizeof(UMovieSceneMarginSection) == 0x000490, "Wrong size on UMovieSceneMarginSection");
static_assert(offsetof(UMovieSceneMarginSection, TopCurve) == 0x0000F0, "Member 'UMovieSceneMarginSection::TopCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneMarginSection, LeftCurve) == 0x0001D8, "Member 'UMovieSceneMarginSection::LeftCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneMarginSection, RightCurve) == 0x0002C0, "Member 'UMovieSceneMarginSection::RightCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneMarginSection, BottomCurve) == 0x0003A8, "Member 'UMovieSceneMarginSection::BottomCurve' has a wrong offset!");

// Class UMG.MovieSceneWidgetMaterialTrack
// 0x0020 (0x00C0 - 0x00A0)
class UMovieSceneWidgetMaterialTrack final : public UMovieSceneMaterialTrack
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BrushPropertyNamePath;                             // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                   TrackName;                                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneWidgetMaterialTrack">();
	}
	static class UMovieSceneWidgetMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneWidgetMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneWidgetMaterialTrack) == 0x000008, "Wrong alignment on UMovieSceneWidgetMaterialTrack");
static_assert(sizeof(UMovieSceneWidgetMaterialTrack) == 0x0000C0, "Wrong size on UMovieSceneWidgetMaterialTrack");
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath) == 0x0000A8, "Member 'UMovieSceneWidgetMaterialTrack::BrushPropertyNamePath' has a wrong offset!");
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, TrackName) == 0x0000B8, "Member 'UMovieSceneWidgetMaterialTrack::TrackName' has a wrong offset!");

// Class UMG.MultiLineEditableText
// 0x0398 (0x04D0 - 0x0138)
class UMultiLineEditableText final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0138(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0150(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0168(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0xC];                                      // 0x0174(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        WidgetStyle;                                       // 0x0180(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsReadOnly;                                       // 0x0490(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextWhenFocused;                          // 0x0491(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearTextSelectionOnFocusLoss;                     // 0x0492(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevertTextOnEscape;                                // 0x0493(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0494(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0495(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0496(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0497(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text)> OnTextChanged;                           // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text, ETextCommit CommitMethod)> OnTextCommitted; // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B8[0x18];                                     // 0x04B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHintText(const class FText& InHintText);
	void SetIsReadOnly(bool bReadOnly);
	void SetText(const class FText& InText);
	void SetWidgetStyle(const struct FTextBlockStyle& InWidgetStyle);

	class FText GetHintText() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiLineEditableText">();
	}
	static class UMultiLineEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiLineEditableText>();
	}
};
static_assert(alignof(UMultiLineEditableText) == 0x000010, "Wrong alignment on UMultiLineEditableText");
static_assert(sizeof(UMultiLineEditableText) == 0x0004D0, "Wrong size on UMultiLineEditableText");
static_assert(offsetof(UMultiLineEditableText, Text) == 0x000138, "Member 'UMultiLineEditableText::Text' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, HintText) == 0x000150, "Member 'UMultiLineEditableText::HintText' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, HintTextDelegate) == 0x000168, "Member 'UMultiLineEditableText::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, WidgetStyle) == 0x000180, "Member 'UMultiLineEditableText::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, bIsReadOnly) == 0x000490, "Member 'UMultiLineEditableText::bIsReadOnly' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, SelectAllTextWhenFocused) == 0x000491, "Member 'UMultiLineEditableText::SelectAllTextWhenFocused' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, ClearTextSelectionOnFocusLoss) == 0x000492, "Member 'UMultiLineEditableText::ClearTextSelectionOnFocusLoss' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, RevertTextOnEscape) == 0x000493, "Member 'UMultiLineEditableText::RevertTextOnEscape' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, ClearKeyboardFocusOnCommit) == 0x000494, "Member 'UMultiLineEditableText::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, AllowContextMenu) == 0x000495, "Member 'UMultiLineEditableText::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardOptions) == 0x000496, "Member 'UMultiLineEditableText::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardDismissAction) == 0x000497, "Member 'UMultiLineEditableText::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, OnTextChanged) == 0x000498, "Member 'UMultiLineEditableText::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableText, OnTextCommitted) == 0x0004A8, "Member 'UMultiLineEditableText::OnTextCommitted' has a wrong offset!");

// Class UMG.MultiLineEditableTextBox
// 0x0E58 (0x0F90 - 0x0138)
class UMultiLineEditableTextBox final : public UTextLayoutWidget
{
public:
	class FText                                   Text;                                              // 0x0138(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x0150(0x0018)(Edit, NativeAccessSpecifierPublic)
	TDelegate<void()>                             HintTextDelegate;                                  // 0x0168(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0xC];                                      // 0x0174(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0180(0x0AC0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0C40(0x0310)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsReadOnly;                                       // 0x0F50(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowContextMenu;                                  // 0x0F51(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVirtualKeyboardOptions                VirtualKeyboardOptions;                            // 0x0F52(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EVirtualKeyboardDismissAction                 VirtualKeyboardDismissAction;                      // 0x0F53(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F54[0x4];                                      // 0x0F54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const class FText& Text)> OnTextChanged;                           // 0x0F58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FText& Text, ETextCommit CommitMethod)> OnTextCommitted; // 0x0F68(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F78[0x18];                                     // 0x0F78(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetError(const class FText& InError);
	void SetForegroundColor(const struct FLinearColor& Color);
	void SetHintText(const class FText& InHintText);
	void SetIsReadOnly(bool bReadOnly);
	void SetText(const class FText& InText);
	void SetTextStyle(const struct FTextBlockStyle& InTextStyle);

	class FText GetHintText() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiLineEditableTextBox">();
	}
	static class UMultiLineEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiLineEditableTextBox>();
	}
};
static_assert(alignof(UMultiLineEditableTextBox) == 0x000010, "Wrong alignment on UMultiLineEditableTextBox");
static_assert(sizeof(UMultiLineEditableTextBox) == 0x000F90, "Wrong size on UMultiLineEditableTextBox");
static_assert(offsetof(UMultiLineEditableTextBox, Text) == 0x000138, "Member 'UMultiLineEditableTextBox::Text' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, HintText) == 0x000150, "Member 'UMultiLineEditableTextBox::HintText' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, HintTextDelegate) == 0x000168, "Member 'UMultiLineEditableTextBox::HintTextDelegate' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, WidgetStyle) == 0x000180, "Member 'UMultiLineEditableTextBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, TextStyle) == 0x000C40, "Member 'UMultiLineEditableTextBox::TextStyle' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, bIsReadOnly) == 0x000F50, "Member 'UMultiLineEditableTextBox::bIsReadOnly' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, AllowContextMenu) == 0x000F51, "Member 'UMultiLineEditableTextBox::AllowContextMenu' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardOptions) == 0x000F52, "Member 'UMultiLineEditableTextBox::VirtualKeyboardOptions' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardDismissAction) == 0x000F53, "Member 'UMultiLineEditableTextBox::VirtualKeyboardDismissAction' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, OnTextChanged) == 0x000F58, "Member 'UMultiLineEditableTextBox::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UMultiLineEditableTextBox, OnTextCommitted) == 0x000F68, "Member 'UMultiLineEditableTextBox::OnTextCommitted' has a wrong offset!");

// Class UMG.NamedSlot
// 0x0010 (0x0140 - 0x0130)
class UNamedSlot final : public UContentWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NamedSlot">();
	}
	static class UNamedSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNamedSlot>();
	}
};
static_assert(alignof(UNamedSlot) == 0x000008, "Wrong alignment on UNamedSlot");
static_assert(sizeof(UNamedSlot) == 0x000140, "Wrong size on UNamedSlot");

// Class UMG.NamedSlotInterface
// 0x0000 (0x0000 - 0x0000)
class INamedSlotInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NamedSlotInterface">();
	}
	static class INamedSlotInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INamedSlotInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(INamedSlotInterface) == 0x000001, "Wrong alignment on INamedSlotInterface");
static_assert(sizeof(INamedSlotInterface) == 0x000001, "Wrong size on INamedSlotInterface");

// Class UMG.NativeWidgetHost
// 0x0010 (0x0128 - 0x0118)
class UNativeWidgetHost : public UWidget
{
public:
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NativeWidgetHost">();
	}
	static class UNativeWidgetHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNativeWidgetHost>();
	}
};
static_assert(alignof(UNativeWidgetHost) == 0x000008, "Wrong alignment on UNativeWidgetHost");
static_assert(sizeof(UNativeWidgetHost) == 0x000128, "Wrong size on UNativeWidgetHost");

// Class UMG.ProgressBar
// 0x02B8 (0x03D0 - 0x0118)
class UProgressBar final : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProgressBarStyle                      WidgetStyle;                                       // 0x0120(0x0260)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressBarFillType                          BarFillType;                                       // 0x0384(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressBarFillStyle                         BarFillStyle;                                      // 0x0385(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMarquee;                                        // 0x0386(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_387[0x1];                                      // 0x0387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BorderPadding;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             PercentDelegate;                                   // 0x0398(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FillColorAndOpacity;                               // 0x03A4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FillColorAndOpacityDelegate;                       // 0x03B4(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x10];                                     // 0x03C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillColorAndOpacity(const struct FLinearColor& InColor);
	void SetIsMarquee(bool InbIsMarquee);
	void SetPercent(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProgressBar">();
	}
	static class UProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressBar>();
	}
};
static_assert(alignof(UProgressBar) == 0x000010, "Wrong alignment on UProgressBar");
static_assert(sizeof(UProgressBar) == 0x0003D0, "Wrong size on UProgressBar");
static_assert(offsetof(UProgressBar, WidgetStyle) == 0x000120, "Member 'UProgressBar::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UProgressBar, Percent) == 0x000380, "Member 'UProgressBar::Percent' has a wrong offset!");
static_assert(offsetof(UProgressBar, BarFillType) == 0x000384, "Member 'UProgressBar::BarFillType' has a wrong offset!");
static_assert(offsetof(UProgressBar, BarFillStyle) == 0x000385, "Member 'UProgressBar::BarFillStyle' has a wrong offset!");
static_assert(offsetof(UProgressBar, bIsMarquee) == 0x000386, "Member 'UProgressBar::bIsMarquee' has a wrong offset!");
static_assert(offsetof(UProgressBar, BorderPadding) == 0x000388, "Member 'UProgressBar::BorderPadding' has a wrong offset!");
static_assert(offsetof(UProgressBar, PercentDelegate) == 0x000398, "Member 'UProgressBar::PercentDelegate' has a wrong offset!");
static_assert(offsetof(UProgressBar, FillColorAndOpacity) == 0x0003A4, "Member 'UProgressBar::FillColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UProgressBar, FillColorAndOpacityDelegate) == 0x0003B4, "Member 'UProgressBar::FillColorAndOpacityDelegate' has a wrong offset!");

// Class UMG.RetainerBox
// 0x0030 (0x0160 - 0x0130)
class URetainerBox final : public UContentWidget
{
public:
	bool                                          bRetainRender;                                     // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RenderOnInvalidation;                              // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderOnPhase;                                     // 0x0132(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Phase;                                             // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhaseCount;                                        // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     EffectMaterial;                                    // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TextureParameter;                                  // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14C[0x14];                                     // 0x014C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestRender();
	void SetEffectMaterial(class UMaterialInterface* EffectMaterial_0);
	void SetRenderingPhase(int32 RenderPhase, int32 TotalPhases);
	void SetRetainRendering(bool bInRetainRendering);
	void SetTextureParameter(class FName TextureParameter_0);

	class UMaterialInstanceDynamic* GetEffectMaterial() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RetainerBox">();
	}
	static class URetainerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetainerBox>();
	}
};
static_assert(alignof(URetainerBox) == 0x000008, "Wrong alignment on URetainerBox");
static_assert(sizeof(URetainerBox) == 0x000160, "Wrong size on URetainerBox");
static_assert(offsetof(URetainerBox, bRetainRender) == 0x000130, "Member 'URetainerBox::bRetainRender' has a wrong offset!");
static_assert(offsetof(URetainerBox, RenderOnInvalidation) == 0x000131, "Member 'URetainerBox::RenderOnInvalidation' has a wrong offset!");
static_assert(offsetof(URetainerBox, RenderOnPhase) == 0x000132, "Member 'URetainerBox::RenderOnPhase' has a wrong offset!");
static_assert(offsetof(URetainerBox, Phase) == 0x000134, "Member 'URetainerBox::Phase' has a wrong offset!");
static_assert(offsetof(URetainerBox, PhaseCount) == 0x000138, "Member 'URetainerBox::PhaseCount' has a wrong offset!");
static_assert(offsetof(URetainerBox, EffectMaterial) == 0x000140, "Member 'URetainerBox::EffectMaterial' has a wrong offset!");
static_assert(offsetof(URetainerBox, TextureParameter) == 0x000148, "Member 'URetainerBox::TextureParameter' has a wrong offset!");

// Class UMG.RichTextBlockDecorator
// 0x0000 (0x0028 - 0x0028)
class URichTextBlockDecorator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockDecorator">();
	}
	static class URichTextBlockDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockDecorator>();
	}
};
static_assert(alignof(URichTextBlockDecorator) == 0x000008, "Wrong alignment on URichTextBlockDecorator");
static_assert(sizeof(URichTextBlockDecorator) == 0x000028, "Wrong size on URichTextBlockDecorator");

// Class UMG.RichTextBlockImageDecorator
// 0x0008 (0x0030 - 0x0028)
class URichTextBlockImageDecorator : public URichTextBlockDecorator
{
public:
	class UDataTable*                             ImageSet;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockImageDecorator">();
	}
	static class URichTextBlockImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockImageDecorator>();
	}
};
static_assert(alignof(URichTextBlockImageDecorator) == 0x000008, "Wrong alignment on URichTextBlockImageDecorator");
static_assert(sizeof(URichTextBlockImageDecorator) == 0x000030, "Wrong size on URichTextBlockImageDecorator");
static_assert(offsetof(URichTextBlockImageDecorator, ImageSet) == 0x000028, "Member 'URichTextBlockImageDecorator::ImageSet' has a wrong offset!");

// Class UMG.SafeZone
// 0x0018 (0x0148 - 0x0130)
class USafeZone final : public UContentWidget
{
public:
	bool                                          PadLeft;                                           // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadRight;                                          // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadTop;                                            // 0x0132(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PadBottom;                                         // 0x0133(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x14];                                     // 0x0134(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SafeZone">();
	}
	static class USafeZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USafeZone>();
	}
};
static_assert(alignof(USafeZone) == 0x000008, "Wrong alignment on USafeZone");
static_assert(sizeof(USafeZone) == 0x000148, "Wrong size on USafeZone");
static_assert(offsetof(USafeZone, PadLeft) == 0x000130, "Member 'USafeZone::PadLeft' has a wrong offset!");
static_assert(offsetof(USafeZone, PadRight) == 0x000131, "Member 'USafeZone::PadRight' has a wrong offset!");
static_assert(offsetof(USafeZone, PadTop) == 0x000132, "Member 'USafeZone::PadTop' has a wrong offset!");
static_assert(offsetof(USafeZone, PadBottom) == 0x000133, "Member 'USafeZone::PadBottom' has a wrong offset!");

// Class UMG.SafeZoneSlot
// 0x0028 (0x0060 - 0x0038)
class USafeZoneSlot final : public UPanelSlot
{
public:
	bool                                          bIsTitleSafe;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                SafeAreaScale;                                     // 0x003C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HAlign;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VAlign;                                            // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SafeZoneSlot">();
	}
	static class USafeZoneSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USafeZoneSlot>();
	}
};
static_assert(alignof(USafeZoneSlot) == 0x000008, "Wrong alignment on USafeZoneSlot");
static_assert(sizeof(USafeZoneSlot) == 0x000060, "Wrong size on USafeZoneSlot");
static_assert(offsetof(USafeZoneSlot, bIsTitleSafe) == 0x000038, "Member 'USafeZoneSlot::bIsTitleSafe' has a wrong offset!");
static_assert(offsetof(USafeZoneSlot, SafeAreaScale) == 0x00003C, "Member 'USafeZoneSlot::SafeAreaScale' has a wrong offset!");
static_assert(offsetof(USafeZoneSlot, HAlign) == 0x00004C, "Member 'USafeZoneSlot::HAlign' has a wrong offset!");
static_assert(offsetof(USafeZoneSlot, VAlign) == 0x00004D, "Member 'USafeZoneSlot::VAlign' has a wrong offset!");
static_assert(offsetof(USafeZoneSlot, Padding) == 0x000050, "Member 'USafeZoneSlot::Padding' has a wrong offset!");

// Class UMG.ScaleBox
// 0x0020 (0x0150 - 0x0130)
class UScaleBox final : public UContentWidget
{
public:
	EStretch                                      Stretch;                                           // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStretchDirection                             StretchDirection;                                  // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UserSpecifiedScale;                                // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreInheritedScale;                              // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x17];                                     // 0x0139(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);
	void SetStretch(EStretch InStretch);
	void SetStretchDirection(EStretchDirection InStretchDirection);
	void SetUserSpecifiedScale(float InUserSpecifiedScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleBox">();
	}
	static class UScaleBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleBox>();
	}
};
static_assert(alignof(UScaleBox) == 0x000008, "Wrong alignment on UScaleBox");
static_assert(sizeof(UScaleBox) == 0x000150, "Wrong size on UScaleBox");
static_assert(offsetof(UScaleBox, Stretch) == 0x000130, "Member 'UScaleBox::Stretch' has a wrong offset!");
static_assert(offsetof(UScaleBox, StretchDirection) == 0x000131, "Member 'UScaleBox::StretchDirection' has a wrong offset!");
static_assert(offsetof(UScaleBox, UserSpecifiedScale) == 0x000134, "Member 'UScaleBox::UserSpecifiedScale' has a wrong offset!");
static_assert(offsetof(UScaleBox, IgnoreInheritedScale) == 0x000138, "Member 'UScaleBox::IgnoreInheritedScale' has a wrong offset!");

// Class UMG.ScaleBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UScaleBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleBoxSlot">();
	}
	static class UScaleBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleBoxSlot>();
	}
};
static_assert(alignof(UScaleBoxSlot) == 0x000008, "Wrong alignment on UScaleBoxSlot");
static_assert(sizeof(UScaleBoxSlot) == 0x000060, "Wrong size on UScaleBoxSlot");
static_assert(offsetof(UScaleBoxSlot, Padding) == 0x000038, "Member 'UScaleBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UScaleBoxSlot, HorizontalAlignment) == 0x000048, "Member 'UScaleBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UScaleBoxSlot, VerticalAlignment) == 0x000049, "Member 'UScaleBoxSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.ScrollBar
// 0x0728 (0x0840 - 0x0118)
class UScrollBar final : public UWidget
{
public:
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScrollBarStyle                        WidgetStyle;                                       // 0x0120(0x06E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbar;                              // 0x0800(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowScrollbarTrack;                         // 0x0801(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0802(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_803[0x5];                                      // 0x0803(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Thickness;                                         // 0x0808(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0818(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_828[0x18];                                     // 0x0828(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetState(float InOffsetFraction, float InThumbSizeFraction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScrollBar">();
	}
	static class UScrollBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBar>();
	}
};
static_assert(alignof(UScrollBar) == 0x000010, "Wrong alignment on UScrollBar");
static_assert(sizeof(UScrollBar) == 0x000840, "Wrong size on UScrollBar");
static_assert(offsetof(UScrollBar, WidgetStyle) == 0x000120, "Member 'UScrollBar::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UScrollBar, bAlwaysShowScrollbar) == 0x000800, "Member 'UScrollBar::bAlwaysShowScrollbar' has a wrong offset!");
static_assert(offsetof(UScrollBar, bAlwaysShowScrollbarTrack) == 0x000801, "Member 'UScrollBar::bAlwaysShowScrollbarTrack' has a wrong offset!");
static_assert(offsetof(UScrollBar, Orientation) == 0x000802, "Member 'UScrollBar::Orientation' has a wrong offset!");
static_assert(offsetof(UScrollBar, Thickness) == 0x000808, "Member 'UScrollBar::Thickness' has a wrong offset!");
static_assert(offsetof(UScrollBar, Padding) == 0x000818, "Member 'UScrollBar::Padding' has a wrong offset!");

// Class UMG.ScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class UScrollBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0xE];                                       // 0x004A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScrollBoxSlot">();
	}
	static class UScrollBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScrollBoxSlot>();
	}
};
static_assert(alignof(UScrollBoxSlot) == 0x000008, "Wrong alignment on UScrollBoxSlot");
static_assert(sizeof(UScrollBoxSlot) == 0x000058, "Wrong size on UScrollBoxSlot");
static_assert(offsetof(UScrollBoxSlot, Padding) == 0x000038, "Member 'UScrollBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UScrollBoxSlot, HorizontalAlignment) == 0x000048, "Member 'UScrollBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UScrollBoxSlot, VerticalAlignment) == 0x000049, "Member 'UScrollBoxSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.SizeBoxSlot
// 0x0028 (0x0060 - 0x0038)
class USizeBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SizeBoxSlot">();
	}
	static class USizeBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<USizeBoxSlot>();
	}
};
static_assert(alignof(USizeBoxSlot) == 0x000008, "Wrong alignment on USizeBoxSlot");
static_assert(sizeof(USizeBoxSlot) == 0x000060, "Wrong size on USizeBoxSlot");
static_assert(offsetof(USizeBoxSlot, Padding) == 0x000038, "Member 'USizeBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(USizeBoxSlot, HorizontalAlignment) == 0x000058, "Member 'USizeBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USizeBoxSlot, VerticalAlignment) == 0x000059, "Member 'USizeBoxSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.SlateBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USlateBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D AbsoluteToLocal(const struct FGeometry& Geometry, const struct FVector2D& AbsoluteCoordinate);
	static void AbsoluteToViewport(class UObject* WorldContextObject, const struct FVector2D& AbsoluteDesktopCoordinate, struct FVector2D* PixelPosition, struct FVector2D* ViewportPosition);
	static bool EqualEqual_SlateBrush(const struct FSlateBrush& A, const struct FSlateBrush& B);
	static struct FVector2D GetAbsoluteSize(const struct FGeometry& Geometry);
	static struct FVector2D GetLocalSize(const struct FGeometry& Geometry);
	static struct FVector2D GetLocalTopLeft(const struct FGeometry& Geometry);
	static bool IsUnderLocation(const struct FGeometry& Geometry, const struct FVector2D& AbsoluteCoordinate);
	static struct FVector2D LocalToAbsolute(const struct FGeometry& Geometry, const struct FVector2D& LocalCoordinate);
	static void LocalToViewport(class UObject* WorldContextObject, const struct FGeometry& Geometry, const struct FVector2D& LocalCoordinate, struct FVector2D* PixelPosition, struct FVector2D* ViewportPosition);
	static void ScreenToViewport(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* ViewportPosition);
	static void ScreenToWidgetAbsolute(class UObject* WorldContextObject, const struct FVector2D& ScreenPosition, struct FVector2D* AbsoluteCoordinate, bool bIncludeWindowPosition);
	static void ScreenToWidgetLocal(class UObject* WorldContextObject, const struct FGeometry& Geometry, const struct FVector2D& ScreenPosition, struct FVector2D* LocalCoordinate, bool bIncludeWindowPosition);
	static float TransformScalarAbsoluteToLocal(const struct FGeometry& Geometry, float AbsoluteScalar);
	static float TransformScalarLocalToAbsolute(const struct FGeometry& Geometry, float LocalScalar);
	static struct FVector2D TransformVectorAbsoluteToLocal(const struct FGeometry& Geometry, const struct FVector2D& AbsoluteVector);
	static struct FVector2D TransformVectorLocalToAbsolute(const struct FGeometry& Geometry, const struct FVector2D& LocalVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlateBlueprintLibrary">();
	}
	static class USlateBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateBlueprintLibrary>();
	}
};
static_assert(alignof(USlateBlueprintLibrary) == 0x000008, "Wrong alignment on USlateBlueprintLibrary");
static_assert(sizeof(USlateBlueprintLibrary) == 0x000028, "Wrong size on USlateBlueprintLibrary");

// Class UMG.SlateVectorArtData
// 0x0048 (0x0070 - 0x0028)
class USlateVectorArtData final : public UObject
{
public:
	TArray<struct FSlateMeshVertex>               VertexData;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<uint32>                                IndexData;                                         // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     Material;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              ExtentMin;                                         // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              ExtentMax;                                         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlateVectorArtData">();
	}
	static class USlateVectorArtData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateVectorArtData>();
	}
};
static_assert(alignof(USlateVectorArtData) == 0x000008, "Wrong alignment on USlateVectorArtData");
static_assert(sizeof(USlateVectorArtData) == 0x000070, "Wrong size on USlateVectorArtData");
static_assert(offsetof(USlateVectorArtData, VertexData) == 0x000028, "Member 'USlateVectorArtData::VertexData' has a wrong offset!");
static_assert(offsetof(USlateVectorArtData, IndexData) == 0x000038, "Member 'USlateVectorArtData::IndexData' has a wrong offset!");
static_assert(offsetof(USlateVectorArtData, Material) == 0x000048, "Member 'USlateVectorArtData::Material' has a wrong offset!");
static_assert(offsetof(USlateVectorArtData, ExtentMin) == 0x000050, "Member 'USlateVectorArtData::ExtentMin' has a wrong offset!");
static_assert(offsetof(USlateVectorArtData, ExtentMax) == 0x000060, "Member 'USlateVectorArtData::ExtentMax' has a wrong offset!");

// Class UMG.SlateAccessibleWidgetData
// 0x0058 (0x0080 - 0x0028)
class USlateAccessibleWidgetData final : public UObject
{
public:
	bool                                          bCanChildrenBeAccessible;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateAccessibleBehavior                      AccessibleBehavior;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateAccessibleBehavior                      AccessibleSummaryBehavior;                         // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AccessibleText;                                    // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	TDelegate<void()>                             AccessibleTextDelegate;                            // 0x0048(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AccessibleSummaryText;                             // 0x0058(0x0018)(NativeAccessSpecifierPublic)
	TDelegate<void()>                             AccessibleSummaryTextDelegate;                     // 0x0070(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SlateAccessibleWidgetData">();
	}
	static class USlateAccessibleWidgetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USlateAccessibleWidgetData>();
	}
};
static_assert(alignof(USlateAccessibleWidgetData) == 0x000008, "Wrong alignment on USlateAccessibleWidgetData");
static_assert(sizeof(USlateAccessibleWidgetData) == 0x000080, "Wrong size on USlateAccessibleWidgetData");
static_assert(offsetof(USlateAccessibleWidgetData, bCanChildrenBeAccessible) == 0x000028, "Member 'USlateAccessibleWidgetData::bCanChildrenBeAccessible' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleBehavior) == 0x000029, "Member 'USlateAccessibleWidgetData::AccessibleBehavior' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryBehavior) == 0x00002A, "Member 'USlateAccessibleWidgetData::AccessibleSummaryBehavior' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleText) == 0x000030, "Member 'USlateAccessibleWidgetData::AccessibleText' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleTextDelegate) == 0x000048, "Member 'USlateAccessibleWidgetData::AccessibleTextDelegate' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryText) == 0x000058, "Member 'USlateAccessibleWidgetData::AccessibleSummaryText' has a wrong offset!");
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryTextDelegate) == 0x000070, "Member 'USlateAccessibleWidgetData::AccessibleSummaryTextDelegate' has a wrong offset!");

// Class UMG.Spacer
// 0x0020 (0x0138 - 0x0118)
class USpacer final : public UWidget
{
public:
	struct FVector2D                              Size;                                              // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSize(const struct FVector2D& InSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Spacer">();
	}
	static class USpacer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpacer>();
	}
};
static_assert(alignof(USpacer) == 0x000008, "Wrong alignment on USpacer");
static_assert(sizeof(USpacer) == 0x000138, "Wrong size on USpacer");
static_assert(offsetof(USpacer, Size) == 0x000118, "Member 'USpacer::Size' has a wrong offset!");

// Class UMG.SpinBox
// 0x0698 (0x07B0 - 0x0118)
class USpinBox final : public UWidget
{
public:
	float                                         Value;                                             // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x011C(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpinBoxStyle                          WidgetStyle;                                       // 0x0130(0x0590)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinFractionalDigits;                               // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFractionalDigits;                               // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysUsesDeltaSnap;                              // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta;                                             // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderExponent;                                    // 0x06D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x06D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0728(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_729[0x3];                                      // 0x0729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDesiredWidth;                                   // 0x072C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearKeyboardFocusOnCommit;                        // 0x0730(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectAllTextOnCommit;                             // 0x0731(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_732[0x2];                                      // 0x0732(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ForegroundColor;                                   // 0x0734(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float InValue)> OnValueChanged;                                    // 0x0748(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float InValue, ETextCommit CommitMethod)> OnValueCommitted;        // 0x0758(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBeginSliderMovement;                             // 0x0768(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float InValue)> OnEndSliderMovement;                               // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bOverride_MinValue : 1;                            // 0x0788(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxValue : 1;                            // 0x0788(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MinSliderValue : 1;                      // 0x0788(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverride_MaxSliderValue : 1;                      // 0x0788(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x078C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxValue;                                          // 0x0790(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinSliderValue;                                    // 0x0794(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSliderValue;                                    // 0x0798(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79C[0x14];                                     // 0x079C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearMaxSliderValue();
	void ClearMaxValue();
	void ClearMinSliderValue();
	void ClearMinValue();
	void SetAlwaysUsesDeltaSnap(bool bNewValue);
	void SetDelta(float NewValue);
	void SetForegroundColor(const struct FSlateColor& InForegroundColor);
	void SetMaxFractionalDigits(int32 NewValue);
	void SetMaxSliderValue(float NewValue);
	void SetMaxValue(float NewValue);
	void SetMinFractionalDigits(int32 NewValue);
	void SetMinSliderValue(float NewValue);
	void SetMinValue(float NewValue);
	void SetValue(float NewValue);

	bool GetAlwaysUsesDeltaSnap() const;
	float GetDelta() const;
	int32 GetMaxFractionalDigits() const;
	float GetMaxSliderValue() const;
	float GetMaxValue() const;
	int32 GetMinFractionalDigits() const;
	float GetMinSliderValue() const;
	float GetMinValue() const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpinBox">();
	}
	static class USpinBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpinBox>();
	}
};
static_assert(alignof(USpinBox) == 0x000010, "Wrong alignment on USpinBox");
static_assert(sizeof(USpinBox) == 0x0007B0, "Wrong size on USpinBox");
static_assert(offsetof(USpinBox, Value) == 0x000118, "Member 'USpinBox::Value' has a wrong offset!");
static_assert(offsetof(USpinBox, ValueDelegate) == 0x00011C, "Member 'USpinBox::ValueDelegate' has a wrong offset!");
static_assert(offsetof(USpinBox, WidgetStyle) == 0x000130, "Member 'USpinBox::WidgetStyle' has a wrong offset!");
static_assert(offsetof(USpinBox, MinFractionalDigits) == 0x0006C0, "Member 'USpinBox::MinFractionalDigits' has a wrong offset!");
static_assert(offsetof(USpinBox, MaxFractionalDigits) == 0x0006C4, "Member 'USpinBox::MaxFractionalDigits' has a wrong offset!");
static_assert(offsetof(USpinBox, bAlwaysUsesDeltaSnap) == 0x0006C8, "Member 'USpinBox::bAlwaysUsesDeltaSnap' has a wrong offset!");
static_assert(offsetof(USpinBox, Delta) == 0x0006CC, "Member 'USpinBox::Delta' has a wrong offset!");
static_assert(offsetof(USpinBox, SliderExponent) == 0x0006D0, "Member 'USpinBox::SliderExponent' has a wrong offset!");
static_assert(offsetof(USpinBox, Font) == 0x0006D8, "Member 'USpinBox::Font' has a wrong offset!");
static_assert(offsetof(USpinBox, Justification) == 0x000728, "Member 'USpinBox::Justification' has a wrong offset!");
static_assert(offsetof(USpinBox, MinDesiredWidth) == 0x00072C, "Member 'USpinBox::MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(USpinBox, ClearKeyboardFocusOnCommit) == 0x000730, "Member 'USpinBox::ClearKeyboardFocusOnCommit' has a wrong offset!");
static_assert(offsetof(USpinBox, SelectAllTextOnCommit) == 0x000731, "Member 'USpinBox::SelectAllTextOnCommit' has a wrong offset!");
static_assert(offsetof(USpinBox, ForegroundColor) == 0x000734, "Member 'USpinBox::ForegroundColor' has a wrong offset!");
static_assert(offsetof(USpinBox, OnValueChanged) == 0x000748, "Member 'USpinBox::OnValueChanged' has a wrong offset!");
static_assert(offsetof(USpinBox, OnValueCommitted) == 0x000758, "Member 'USpinBox::OnValueCommitted' has a wrong offset!");
static_assert(offsetof(USpinBox, OnBeginSliderMovement) == 0x000768, "Member 'USpinBox::OnBeginSliderMovement' has a wrong offset!");
static_assert(offsetof(USpinBox, OnEndSliderMovement) == 0x000778, "Member 'USpinBox::OnEndSliderMovement' has a wrong offset!");
static_assert(offsetof(USpinBox, MinValue) == 0x00078C, "Member 'USpinBox::MinValue' has a wrong offset!");
static_assert(offsetof(USpinBox, MaxValue) == 0x000790, "Member 'USpinBox::MaxValue' has a wrong offset!");
static_assert(offsetof(USpinBox, MinSliderValue) == 0x000794, "Member 'USpinBox::MinSliderValue' has a wrong offset!");
static_assert(offsetof(USpinBox, MaxSliderValue) == 0x000798, "Member 'USpinBox::MaxSliderValue' has a wrong offset!");

// Class UMG.TextBinding
// 0x0008 (0x0068 - 0x0060)
class UTextBinding final : public UPropertyBinding
{
public:
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetStringValue() const;
	class FText GetTextValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextBinding">();
	}
	static class UTextBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextBinding>();
	}
};
static_assert(alignof(UTextBinding) == 0x000008, "Wrong alignment on UTextBinding");
static_assert(sizeof(UTextBinding) == 0x000068, "Wrong size on UTextBinding");

// Class UMG.Throbber
// 0x00D8 (0x01F0 - 0x0118)
class UThrobber final : public UWidget
{
public:
	int32                                         NumberOfPieces;                                    // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateHorizontally;                              // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateVertically;                                // 0x011D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimateOpacity;                                   // 0x011E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F[0x1];                                      // 0x011F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0120(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAnimateHorizontally(bool bInAnimateHorizontally);
	void SetAnimateOpacity(bool bInAnimateOpacity);
	void SetAnimateVertically(bool bInAnimateVertically);
	void SetNumberOfPieces(int32 InNumberOfPieces);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Throbber">();
	}
	static class UThrobber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThrobber>();
	}
};
static_assert(alignof(UThrobber) == 0x000010, "Wrong alignment on UThrobber");
static_assert(sizeof(UThrobber) == 0x0001F0, "Wrong size on UThrobber");
static_assert(offsetof(UThrobber, NumberOfPieces) == 0x000118, "Member 'UThrobber::NumberOfPieces' has a wrong offset!");
static_assert(offsetof(UThrobber, bAnimateHorizontally) == 0x00011C, "Member 'UThrobber::bAnimateHorizontally' has a wrong offset!");
static_assert(offsetof(UThrobber, bAnimateVertically) == 0x00011D, "Member 'UThrobber::bAnimateVertically' has a wrong offset!");
static_assert(offsetof(UThrobber, bAnimateOpacity) == 0x00011E, "Member 'UThrobber::bAnimateOpacity' has a wrong offset!");
static_assert(offsetof(UThrobber, Image) == 0x000120, "Member 'UThrobber::Image' has a wrong offset!");

// Class UMG.UMGSequencePlayer
// 0x03A0 (0x03C8 - 0x0028)
class UUMGSequencePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x238];                                     // 0x0028(0x0238)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Animation;                                         // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneRootEvaluationTemplateInstance RootTemplateInstance;                           // 0x0270(0x00E8)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_358[0x70];                                     // 0x0358(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetUserTag(class FName InUserTag);

	class FName GetUserTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UMGSequencePlayer">();
	}
	static class UUMGSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMGSequencePlayer>();
	}
};
static_assert(alignof(UUMGSequencePlayer) == 0x000008, "Wrong alignment on UUMGSequencePlayer");
static_assert(sizeof(UUMGSequencePlayer) == 0x0003C8, "Wrong size on UUMGSequencePlayer");
static_assert(offsetof(UUMGSequencePlayer, Animation) == 0x000260, "Member 'UUMGSequencePlayer::Animation' has a wrong offset!");
static_assert(offsetof(UUMGSequencePlayer, RootTemplateInstance) == 0x000270, "Member 'UUMGSequencePlayer::RootTemplateInstance' has a wrong offset!");

// Class UMG.UMGSequenceTickManager
// 0x00F8 (0x0120 - 0x0028)
class UUMGSequenceTickManager final : public UObject
{
public:
	TMap<TWeakObjectPtr<class UUserWidget>, struct FSequenceTickManagerWidgetData> WeakUserWidgetData; // 0x0028(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMovieSceneEntitySystemLinker*          Linker;                                            // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0xA0];                                      // 0x0080(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UMGSequenceTickManager">();
	}
	static class UUMGSequenceTickManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMGSequenceTickManager>();
	}
};
static_assert(alignof(UUMGSequenceTickManager) == 0x000008, "Wrong alignment on UUMGSequenceTickManager");
static_assert(sizeof(UUMGSequenceTickManager) == 0x000120, "Wrong size on UUMGSequenceTickManager");
static_assert(offsetof(UUMGSequenceTickManager, WeakUserWidgetData) == 0x000028, "Member 'UUMGSequenceTickManager::WeakUserWidgetData' has a wrong offset!");
static_assert(offsetof(UUMGSequenceTickManager, Linker) == 0x000078, "Member 'UUMGSequenceTickManager::Linker' has a wrong offset!");

// Class UMG.UniformGridPanel
// 0x0028 (0x0158 - 0x0130)
class UUniformGridPanel final : public UPanelWidget
{
public:
	struct FMargin                                SlotPadding;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDesiredSlotWidth;                               // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDesiredSlotHeight;                              // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UUniformGridSlot* AddChildToUniformGrid(class UWidget* Content, int32 InRow, int32 InColumn);
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);
	void SetSlotPadding(const struct FMargin& InSlotPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformGridPanel">();
	}
	static class UUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformGridPanel>();
	}
};
static_assert(alignof(UUniformGridPanel) == 0x000008, "Wrong alignment on UUniformGridPanel");
static_assert(sizeof(UUniformGridPanel) == 0x000158, "Wrong size on UUniformGridPanel");
static_assert(offsetof(UUniformGridPanel, SlotPadding) == 0x000130, "Member 'UUniformGridPanel::SlotPadding' has a wrong offset!");
static_assert(offsetof(UUniformGridPanel, MinDesiredSlotWidth) == 0x000140, "Member 'UUniformGridPanel::MinDesiredSlotWidth' has a wrong offset!");
static_assert(offsetof(UUniformGridPanel, MinDesiredSlotHeight) == 0x000144, "Member 'UUniformGridPanel::MinDesiredSlotHeight' has a wrong offset!");

// Class UMG.UniformGridSlot
// 0x0018 (0x0050 - 0x0038)
class UUniformGridSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColumn(int32 InColumn);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetRow(int32 InRow);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UniformGridSlot">();
	}
	static class UUniformGridSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUniformGridSlot>();
	}
};
static_assert(alignof(UUniformGridSlot) == 0x000008, "Wrong alignment on UUniformGridSlot");
static_assert(sizeof(UUniformGridSlot) == 0x000050, "Wrong size on UUniformGridSlot");
static_assert(offsetof(UUniformGridSlot, HorizontalAlignment) == 0x000038, "Member 'UUniformGridSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UUniformGridSlot, VerticalAlignment) == 0x000039, "Member 'UUniformGridSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UUniformGridSlot, Row) == 0x00003C, "Member 'UUniformGridSlot::Row' has a wrong offset!");
static_assert(offsetof(UUniformGridSlot, Column) == 0x000040, "Member 'UUniformGridSlot::Column' has a wrong offset!");

// Class UMG.UserWidgetBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class UUserWidgetBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UserWidgetBlueprint">();
	}
	static class UUserWidgetBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUserWidgetBlueprint>();
	}
};
static_assert(alignof(UUserWidgetBlueprint) == 0x000008, "Wrong alignment on UUserWidgetBlueprint");
static_assert(sizeof(UUserWidgetBlueprint) == 0x0000A0, "Wrong size on UUserWidgetBlueprint");

// Class UMG.VerticalBox
// 0x0010 (0x0140 - 0x0130)
class UVerticalBox final : public UPanelWidget
{
public:
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVerticalBoxSlot* AddChildToVerticalBox(class UWidget* Content);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerticalBox">();
	}
	static class UVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerticalBox>();
	}
};
static_assert(alignof(UVerticalBox) == 0x000008, "Wrong alignment on UVerticalBox");
static_assert(sizeof(UVerticalBox) == 0x000140, "Wrong size on UVerticalBox");

// Class UMG.VerticalBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UVerticalBoxSlot final : public UPanelSlot
{
public:
	struct FSlateChildSize                        Size;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetSize(const struct FSlateChildSize& InSize);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerticalBoxSlot">();
	}
	static class UVerticalBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerticalBoxSlot>();
	}
};
static_assert(alignof(UVerticalBoxSlot) == 0x000008, "Wrong alignment on UVerticalBoxSlot");
static_assert(sizeof(UVerticalBoxSlot) == 0x000060, "Wrong size on UVerticalBoxSlot");
static_assert(offsetof(UVerticalBoxSlot, Size) == 0x000038, "Member 'UVerticalBoxSlot::Size' has a wrong offset!");
static_assert(offsetof(UVerticalBoxSlot, Padding) == 0x000040, "Member 'UVerticalBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UVerticalBoxSlot, HorizontalAlignment) == 0x000058, "Member 'UVerticalBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UVerticalBoxSlot, VerticalAlignment) == 0x000059, "Member 'UVerticalBoxSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.Viewport
// 0x0050 (0x0180 - 0x0130)
class UViewport final : public UContentWidget
{
public:
	struct FLinearColor                           BackgroundColor;                                   // 0x0130(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x40];                                     // 0x0140(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetViewLocation(const struct FVector& Location);
	void SetViewRotation(const struct FRotator& Rotation);
	class AActor* Spawn(TSubclassOf<class AActor> ActorClass);

	struct FVector GetViewLocation() const;
	class UWorld* GetViewportWorld() const;
	struct FRotator GetViewRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Viewport">();
	}
	static class UViewport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UViewport>();
	}
};
static_assert(alignof(UViewport) == 0x000008, "Wrong alignment on UViewport");
static_assert(sizeof(UViewport) == 0x000180, "Wrong size on UViewport");
static_assert(offsetof(UViewport, BackgroundColor) == 0x000130, "Member 'UViewport::BackgroundColor' has a wrong offset!");

// Class UMG.VisibilityBinding
// 0x0000 (0x0060 - 0x0060)
class UVisibilityBinding final : public UPropertyBinding
{
public:
	ESlateVisibility GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VisibilityBinding">();
	}
	static class UVisibilityBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVisibilityBinding>();
	}
};
static_assert(alignof(UVisibilityBinding) == 0x000008, "Wrong alignment on UVisibilityBinding");
static_assert(sizeof(UVisibilityBinding) == 0x000060, "Wrong size on UVisibilityBinding");

// Class UMG.WidgetAnimation
// 0x0030 (0x0090 - 0x0060)
class UWidgetAnimation final : public UMovieSceneSequence
{
public:
	class UMovieScene*                            MovieScene;                                        // 0x0060(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWidgetAnimationBinding>        AnimationBindings;                                 // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLegacyFinishOnStop;                               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayLabel;                                      // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BindToAnimationFinished(class UUserWidget* Widget, TDelegate<void()> Delegate);
	void BindToAnimationStarted(class UUserWidget* Widget, TDelegate<void()> Delegate);
	void UnbindAllFromAnimationFinished(class UUserWidget* Widget);
	void UnbindAllFromAnimationStarted(class UUserWidget* Widget);
	void UnbindFromAnimationFinished(class UUserWidget* Widget, TDelegate<void()> Delegate);
	void UnbindFromAnimationStarted(class UUserWidget* Widget, TDelegate<void()> Delegate);

	float GetEndTime() const;
	float GetStartTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetAnimation">();
	}
	static class UWidgetAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetAnimation>();
	}
};
static_assert(alignof(UWidgetAnimation) == 0x000008, "Wrong alignment on UWidgetAnimation");
static_assert(sizeof(UWidgetAnimation) == 0x000090, "Wrong size on UWidgetAnimation");
static_assert(offsetof(UWidgetAnimation, MovieScene) == 0x000060, "Member 'UWidgetAnimation::MovieScene' has a wrong offset!");
static_assert(offsetof(UWidgetAnimation, AnimationBindings) == 0x000068, "Member 'UWidgetAnimation::AnimationBindings' has a wrong offset!");
static_assert(offsetof(UWidgetAnimation, bLegacyFinishOnStop) == 0x000078, "Member 'UWidgetAnimation::bLegacyFinishOnStop' has a wrong offset!");
static_assert(offsetof(UWidgetAnimation, DisplayLabel) == 0x000080, "Member 'UWidgetAnimation::DisplayLabel' has a wrong offset!");

// Class UMG.WidgetAnimationDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UWidgetAnimationDelegateBinding final : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintWidgetAnimationDelegateBinding> WidgetAnimationDelegateBindings;         // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetAnimationDelegateBinding">();
	}
	static class UWidgetAnimationDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetAnimationDelegateBinding>();
	}
};
static_assert(alignof(UWidgetAnimationDelegateBinding) == 0x000008, "Wrong alignment on UWidgetAnimationDelegateBinding");
static_assert(sizeof(UWidgetAnimationDelegateBinding) == 0x000038, "Wrong size on UWidgetAnimationDelegateBinding");
static_assert(offsetof(UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings) == 0x000028, "Member 'UWidgetAnimationDelegateBinding::WidgetAnimationDelegateBindings' has a wrong offset!");

// Class UMG.WidgetAnimationPlayCallbackProxy
// 0x0020 (0x0048 - 0x0028)
class UWidgetAnimationPlayCallbackProxy final : public UObject
{
public:
	TMulticastInlineDelegate<void()>              Finished;                                          // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(class UUMGSequencePlayer** Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
	static class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(class UUMGSequencePlayer** Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetAnimationPlayCallbackProxy">();
	}
	static class UWidgetAnimationPlayCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetAnimationPlayCallbackProxy>();
	}
};
static_assert(alignof(UWidgetAnimationPlayCallbackProxy) == 0x000008, "Wrong alignment on UWidgetAnimationPlayCallbackProxy");
static_assert(sizeof(UWidgetAnimationPlayCallbackProxy) == 0x000048, "Wrong size on UWidgetAnimationPlayCallbackProxy");
static_assert(offsetof(UWidgetAnimationPlayCallbackProxy, Finished) == 0x000028, "Member 'UWidgetAnimationPlayCallbackProxy::Finished' has a wrong offset!");

// Class UMG.WidgetBinding
// 0x0000 (0x0060 - 0x0060)
class UWidgetBinding final : public UPropertyBinding
{
public:
	class UWidget* GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetBinding">();
	}
	static class UWidgetBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBinding>();
	}
};
static_assert(alignof(UWidgetBinding) == 0x000008, "Wrong alignment on UWidgetBinding");
static_assert(sizeof(UWidgetBinding) == 0x000060, "Wrong size on UWidgetBinding");

// Class UMG.WidgetBlueprintGeneratedClass
// 0x0040 (0x0368 - 0x0328)
class UWidgetBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	class UWidgetTree*                            WidgetTree;                                        // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bClassRequiresNativeTick : 1;                      // 0x0330(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelegateRuntimeBinding>        Bindings;                                          // 0x0338(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UWidgetAnimation*>               Animations;                                        // 0x0348(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           NamedSlots;                                        // 0x0358(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetBlueprintGeneratedClass">();
	}
	static class UWidgetBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBlueprintGeneratedClass>();
	}
};
static_assert(alignof(UWidgetBlueprintGeneratedClass) == 0x000008, "Wrong alignment on UWidgetBlueprintGeneratedClass");
static_assert(sizeof(UWidgetBlueprintGeneratedClass) == 0x000368, "Wrong size on UWidgetBlueprintGeneratedClass");
static_assert(offsetof(UWidgetBlueprintGeneratedClass, WidgetTree) == 0x000328, "Member 'UWidgetBlueprintGeneratedClass::WidgetTree' has a wrong offset!");
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Bindings) == 0x000338, "Member 'UWidgetBlueprintGeneratedClass::Bindings' has a wrong offset!");
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Animations) == 0x000348, "Member 'UWidgetBlueprintGeneratedClass::Animations' has a wrong offset!");
static_assert(offsetof(UWidgetBlueprintGeneratedClass, NamedSlots) == 0x000358, "Member 'UWidgetBlueprintGeneratedClass::NamedSlots' has a wrong offset!");

// Class UMG.WidgetBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelDragDrop();
	static struct FEventReply CaptureJoystick(struct FEventReply& Reply, class UWidget* CapturingWidget, bool bInAllJoysticks);
	static struct FEventReply CaptureMouse(struct FEventReply& Reply, class UWidget* CapturingWidget);
	static struct FEventReply ClearUserFocus(struct FEventReply& Reply, bool bInAllUsers);
	static class UUserWidget* Create(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetType, class APlayerController* OwningPlayer);
	static class UDragDropOperation* CreateDragDropOperation(TSubclassOf<class UDragDropOperation> OperationClass);
	static struct FEventReply DetectDrag(struct FEventReply& Reply, class UWidget* WidgetDetectingDrag, const struct FKey& DragKey);
	static struct FEventReply DetectDragIfPressed(const struct FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, const struct FKey& DragKey);
	static void DismissAllMenus();
	static void DrawBox(struct FPaintContext& Context, const struct FVector2D& Position, const struct FVector2D& Size, class USlateBrushAsset* Brush, const struct FLinearColor& Tint);
	static void DrawLine(struct FPaintContext& Context, const struct FVector2D& PositionA, const struct FVector2D& PositionB, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness);
	static void DrawLines(struct FPaintContext& Context, const TArray<struct FVector2D>& Points, const struct FLinearColor& Tint, bool bAntiAlias, float Thickness);
	static void DrawText(struct FPaintContext& Context, const class FString& InString, const struct FVector2D& Position, const struct FLinearColor& Tint);
	static void DrawTextFormatted(struct FPaintContext& Context, const class FText& Text, const struct FVector2D& Position, class UFont* Font, int32 FontSize, class FName FontTypeFace, const struct FLinearColor& Tint);
	static struct FEventReply EndDragDrop(struct FEventReply& Reply);
	static void GetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<class UUserWidget*>* FoundWidgets, TSubclassOf<class UUserWidget> WidgetClass, bool TopLevelOnly);
	static void GetAllWidgetsWithInterface(class UObject* WorldContextObject, TArray<class UUserWidget*>* FoundWidgets, TSubclassOf<class IInterface> Interface, bool TopLevelOnly);
	static class UObject* GetBrushResource(const struct FSlateBrush& Brush);
	static class UMaterialInterface* GetBrushResourceAsMaterial(const struct FSlateBrush& Brush);
	static class UTexture2D* GetBrushResourceAsTexture2D(const struct FSlateBrush& Brush);
	static class UDragDropOperation* GetDragDroppingContent();
	static class UMaterialInstanceDynamic* GetDynamicMaterial(struct FSlateBrush& Brush);
	static struct FInputEvent GetInputEventFromCharacterEvent(const struct FCharacterEvent& Event);
	static struct FInputEvent GetInputEventFromKeyEvent(const struct FKeyEvent& Event);
	static struct FInputEvent GetInputEventFromNavigationEvent(const struct FNavigationEvent& Event);
	static struct FInputEvent GetInputEventFromPointerEvent(const struct FPointerEvent& Event);
	static struct FKeyEvent GetKeyEventFromAnalogInputEvent(const struct FAnalogInputEvent& Event);
	static void GetSafeZonePadding(class UObject* WorldContextObject, struct FVector4* SafePadding, struct FVector2D* SafePaddingScale, struct FVector4* SpillOverPadding);
	static struct FEventReply Handled();
	static bool IsDragDropping();
	static struct FEventReply LockMouse(struct FEventReply& Reply, class UWidget* CapturingWidget);
	static struct FSlateBrush MakeBrushFromAsset(class USlateBrushAsset* BrushAsset);
	static struct FSlateBrush MakeBrushFromMaterial(class UMaterialInterface* Material, int32 Width, int32 Height);
	static struct FSlateBrush MakeBrushFromTexture(class UTexture2D* Texture, int32 Width, int32 Height);
	static struct FSlateBrush NoResourceBrush();
	static struct FEventReply ReleaseJoystickCapture(struct FEventReply& Reply, bool bInAllJoysticks);
	static struct FEventReply ReleaseMouseCapture(struct FEventReply& Reply);
	static void RestorePreviousWindowTitleBarState();
	static void SetBrushResourceToMaterial(struct FSlateBrush& Brush, class UMaterialInterface* Material);
	static void SetBrushResourceToTexture(struct FSlateBrush& Brush, class UTexture2D* Texture);
	static void SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency);
	static void SetFocusToGameViewport();
	static bool SetHardwareCursor(class UObject* WorldContextObject, EMouseCursor CursorShape, class FName CursorName, const struct FVector2D& HotSpot);
	static void SetInputMode_GameAndUIEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture);
	static void SetInputMode_GameOnly(class APlayerController* PlayerController);
	static void SetInputMode_UIOnlyEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode);
	static struct FEventReply SetMousePosition(struct FEventReply& Reply, const struct FVector2D& NewMousePosition);
	static struct FEventReply SetUserFocus(struct FEventReply& Reply, class UWidget* FocusWidget, bool bInAllUsers);
	static void SetWindowTitleBarCloseButtonActive(bool bActive);
	static void SetWindowTitleBarOnCloseClickedDelegate(TDelegate<void()> Delegate);
	static void SetWindowTitleBarState(class UWidget* TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);
	static struct FEventReply Unhandled();
	static struct FEventReply UnlockMouse(struct FEventReply& Reply);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetBlueprintLibrary">();
	}
	static class UWidgetBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetBlueprintLibrary>();
	}
};
static_assert(alignof(UWidgetBlueprintLibrary) == 0x000008, "Wrong alignment on UWidgetBlueprintLibrary");
static_assert(sizeof(UWidgetBlueprintLibrary) == 0x000028, "Wrong size on UWidgetBlueprintLibrary");

// Class UMG.WidgetLayoutLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetLayoutLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D GetMousePositionOnPlatform();
	static struct FVector2D GetMousePositionOnViewport(class UObject* WorldContextObject);
	static bool GetMousePositionScaledByDPI(class APlayerController* Player, float* LocationX, float* LocationY);
	static struct FGeometry GetPlayerScreenWidgetGeometry(class APlayerController* PlayerController);
	static float GetViewportScale(class UObject* WorldContextObject);
	static struct FVector2D GetViewportSize(class UObject* WorldContextObject);
	static struct FGeometry GetViewportWidgetGeometry(class UObject* WorldContextObject);
	static bool ProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative);
	static void RemoveAllWidgets(class UObject* WorldContextObject);
	static class UBorderSlot* SlotAsBorderSlot(class UWidget* Widget);
	static class UCanvasPanelSlot* SlotAsCanvasSlot(class UWidget* Widget);
	static class UGridSlot* SlotAsGridSlot(class UWidget* Widget);
	static class UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(class UWidget* Widget);
	static class UOverlaySlot* SlotAsOverlaySlot(class UWidget* Widget);
	static class USafeZoneSlot* SlotAsSafeBoxSlot(class UWidget* Widget);
	static class UScaleBoxSlot* SlotAsScaleBoxSlot(class UWidget* Widget);
	static class UScrollBoxSlot* SlotAsScrollBoxSlot(class UWidget* Widget);
	static class USizeBoxSlot* SlotAsSizeBoxSlot(class UWidget* Widget);
	static class UUniformGridSlot* SlotAsUniformGridSlot(class UWidget* Widget);
	static class UVerticalBoxSlot* SlotAsVerticalBoxSlot(class UWidget* Widget);
	static class UWidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(class UWidget* Widget);
	static class UWrapBoxSlot* SlotAsWrapBoxSlot(class UWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetLayoutLibrary">();
	}
	static class UWidgetLayoutLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetLayoutLibrary>();
	}
};
static_assert(alignof(UWidgetLayoutLibrary) == 0x000008, "Wrong alignment on UWidgetLayoutLibrary");
static_assert(sizeof(UWidgetLayoutLibrary) == 0x000028, "Wrong size on UWidgetLayoutLibrary");

// Class UMG.WidgetNavigation
// 0x00A8 (0x00D0 - 0x0028)
class UWidgetNavigation final : public UObject
{
public:
	struct FWidgetNavigationData                  Up;                                                // 0x0028(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Down;                                              // 0x0044(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Left;                                              // 0x0060(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Right;                                             // 0x007C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Next;                                              // 0x0098(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetNavigationData                  Previous;                                          // 0x00B4(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetNavigation">();
	}
	static class UWidgetNavigation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetNavigation>();
	}
};
static_assert(alignof(UWidgetNavigation) == 0x000008, "Wrong alignment on UWidgetNavigation");
static_assert(sizeof(UWidgetNavigation) == 0x0000D0, "Wrong size on UWidgetNavigation");
static_assert(offsetof(UWidgetNavigation, Up) == 0x000028, "Member 'UWidgetNavigation::Up' has a wrong offset!");
static_assert(offsetof(UWidgetNavigation, Down) == 0x000044, "Member 'UWidgetNavigation::Down' has a wrong offset!");
static_assert(offsetof(UWidgetNavigation, Left) == 0x000060, "Member 'UWidgetNavigation::Left' has a wrong offset!");
static_assert(offsetof(UWidgetNavigation, Right) == 0x00007C, "Member 'UWidgetNavigation::Right' has a wrong offset!");
static_assert(offsetof(UWidgetNavigation, Next) == 0x000098, "Member 'UWidgetNavigation::Next' has a wrong offset!");
static_assert(offsetof(UWidgetNavigation, Previous) == 0x0000B4, "Member 'UWidgetNavigation::Previous' has a wrong offset!");

// Class UMG.WidgetSwitcherSlot
// 0x0020 (0x0058 - 0x0038)
class UWidgetSwitcherSlot final : public UPanelSlot
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSwitcherSlot">();
	}
	static class UWidgetSwitcherSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSwitcherSlot>();
	}
};
static_assert(alignof(UWidgetSwitcherSlot) == 0x000008, "Wrong alignment on UWidgetSwitcherSlot");
static_assert(sizeof(UWidgetSwitcherSlot) == 0x000058, "Wrong size on UWidgetSwitcherSlot");
static_assert(offsetof(UWidgetSwitcherSlot, Padding) == 0x000040, "Member 'UWidgetSwitcherSlot::Padding' has a wrong offset!");
static_assert(offsetof(UWidgetSwitcherSlot, HorizontalAlignment) == 0x000050, "Member 'UWidgetSwitcherSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWidgetSwitcherSlot, VerticalAlignment) == 0x000051, "Member 'UWidgetSwitcherSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.WidgetTree
// 0x0008 (0x0030 - 0x0028)
class UWidgetTree final : public UObject
{
public:
	class UWidget*                                RootWidget;                                        // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetTree">();
	}
	static class UWidgetTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetTree>();
	}
};
static_assert(alignof(UWidgetTree) == 0x000008, "Wrong alignment on UWidgetTree");
static_assert(sizeof(UWidgetTree) == 0x000030, "Wrong size on UWidgetTree");
static_assert(offsetof(UWidgetTree, RootWidget) == 0x000028, "Member 'UWidgetTree::RootWidget' has a wrong offset!");

// Class UMG.WindowTitleBarArea
// 0x0020 (0x0150 - 0x0130)
class UWindowTitleBarArea final : public UContentWidget
{
public:
	bool                                          bWindowButtonsEnabled;                             // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleClickTogglesFullscreen;                     // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x1E];                                     // 0x0132(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindowTitleBarArea">();
	}
	static class UWindowTitleBarArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowTitleBarArea>();
	}
};
static_assert(alignof(UWindowTitleBarArea) == 0x000008, "Wrong alignment on UWindowTitleBarArea");
static_assert(sizeof(UWindowTitleBarArea) == 0x000150, "Wrong size on UWindowTitleBarArea");
static_assert(offsetof(UWindowTitleBarArea, bWindowButtonsEnabled) == 0x000130, "Member 'UWindowTitleBarArea::bWindowButtonsEnabled' has a wrong offset!");
static_assert(offsetof(UWindowTitleBarArea, bDoubleClickTogglesFullscreen) == 0x000131, "Member 'UWindowTitleBarArea::bDoubleClickTogglesFullscreen' has a wrong offset!");

// Class UMG.WindowTitleBarAreaSlot
// 0x0028 (0x0060 - 0x0038)
class UWindowTitleBarAreaSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x16];                                      // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WindowTitleBarAreaSlot">();
	}
	static class UWindowTitleBarAreaSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWindowTitleBarAreaSlot>();
	}
};
static_assert(alignof(UWindowTitleBarAreaSlot) == 0x000008, "Wrong alignment on UWindowTitleBarAreaSlot");
static_assert(sizeof(UWindowTitleBarAreaSlot) == 0x000060, "Wrong size on UWindowTitleBarAreaSlot");
static_assert(offsetof(UWindowTitleBarAreaSlot, Padding) == 0x000038, "Member 'UWindowTitleBarAreaSlot::Padding' has a wrong offset!");
static_assert(offsetof(UWindowTitleBarAreaSlot, HorizontalAlignment) == 0x000048, "Member 'UWindowTitleBarAreaSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWindowTitleBarAreaSlot, VerticalAlignment) == 0x000049, "Member 'UWindowTitleBarAreaSlot::VerticalAlignment' has a wrong offset!");

// Class UMG.WrapBox
// 0x0028 (0x0158 - 0x0130)
class UWrapBox final : public UPanelWidget
{
public:
	struct FVector2D                              InnerSlotPadding;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WrapSize;                                          // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplicitWrapSize;                                 // 0x0144(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0145(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0146(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_147[0x11];                                     // 0x0147(0x0011)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetInnerSlotPadding(const struct FVector2D& InPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WrapBox">();
	}
	static class UWrapBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWrapBox>();
	}
};
static_assert(alignof(UWrapBox) == 0x000008, "Wrong alignment on UWrapBox");
static_assert(sizeof(UWrapBox) == 0x000158, "Wrong size on UWrapBox");
static_assert(offsetof(UWrapBox, InnerSlotPadding) == 0x000130, "Member 'UWrapBox::InnerSlotPadding' has a wrong offset!");
static_assert(offsetof(UWrapBox, WrapSize) == 0x000140, "Member 'UWrapBox::WrapSize' has a wrong offset!");
static_assert(offsetof(UWrapBox, bExplicitWrapSize) == 0x000144, "Member 'UWrapBox::bExplicitWrapSize' has a wrong offset!");
static_assert(offsetof(UWrapBox, HorizontalAlignment) == 0x000145, "Member 'UWrapBox::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWrapBox, Orientation) == 0x000146, "Member 'UWrapBox::Orientation' has a wrong offset!");

// Class UMG.WrapBoxSlot
// 0x0028 (0x0060 - 0x0038)
class UWrapBoxSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFillEmptySpace;                                   // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FillSpanWhenLessThan;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNewLine;                                     // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0xD];                                       // 0x0053(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFillEmptySpace(bool InbFillEmptySpace);
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetNewLine(bool InForceNewLine);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WrapBoxSlot">();
	}
	static class UWrapBoxSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWrapBoxSlot>();
	}
};
static_assert(alignof(UWrapBoxSlot) == 0x000008, "Wrong alignment on UWrapBoxSlot");
static_assert(sizeof(UWrapBoxSlot) == 0x000060, "Wrong size on UWrapBoxSlot");
static_assert(offsetof(UWrapBoxSlot, Padding) == 0x000038, "Member 'UWrapBoxSlot::Padding' has a wrong offset!");
static_assert(offsetof(UWrapBoxSlot, bFillEmptySpace) == 0x000048, "Member 'UWrapBoxSlot::bFillEmptySpace' has a wrong offset!");
static_assert(offsetof(UWrapBoxSlot, FillSpanWhenLessThan) == 0x00004C, "Member 'UWrapBoxSlot::FillSpanWhenLessThan' has a wrong offset!");
static_assert(offsetof(UWrapBoxSlot, HorizontalAlignment) == 0x000050, "Member 'UWrapBoxSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWrapBoxSlot, VerticalAlignment) == 0x000051, "Member 'UWrapBoxSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UWrapBoxSlot, bForceNewLine) == 0x000052, "Member 'UWrapBoxSlot::bForceNewLine' has a wrong offset!");

}

