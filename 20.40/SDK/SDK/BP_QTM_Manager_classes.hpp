#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QTM_Manager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "QTM_PlayerInputStruct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_QTM_Manager.BP_QTM_Manager_C
// 0x0150 (0x03C0 - 0x0270)
class ABP_QTM_Manager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpecialEventInputHelperComponent*      SpecialEventInputHelper;                           // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         QTMCompletionPercent;                              // 0x0288(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QTMFailTimer;                                      // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DegradeFillPercentHandle;                          // 0x0290(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           QTMFailedTimerHandle;                              // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   QTMWidget;                                         // 0x02A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class UUserWidget*                            QTMWidgetRef;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QTMActive;                                         // 0x02D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Passed)>   QTMFinished;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         DegradePercentTime;                                // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 QTMDegradeAmount;                                  // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 QTMFillAmount;                                     // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PlayersInRelevancyGroup;                           // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerState* PlayerState)> QTMInputFired;                   // 0x0318(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FQTM_PlayerInputStruct>         RepInputStruct;                                    // 0x0328(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<struct FQTM_PlayerInputStruct>         ClientInputStruct;                                 // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class APlayerState*>                   RelevancyGroupPlayerState;                         // 0x0348(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(float CompletionPercent)> QTMCompletePercentUpdated;               // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnQTMStarted;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SuccesfullyPassedQTE;                              // 0x0378(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UserProgress;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EaseInCurve;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedProgress;                                // 0x0388(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           QTButtonPressedTag;                                // 0x038C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateQuickTimePercentageHandle;                   // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           UpdateQTMPercentTag;                               // 0x0398(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  HUDElement_Tags;                                   // 0x03A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdateQuickTimePercentage();
	void UpdateInputForPawn(class APlayerState* PlayerState);
	void StartQTM();
	void ResetListenForQTMPassed();
	void ReceiveTick(float DeltaSeconds);
	void PawnToPlayerState(TArray<class AFortPlayerPawn*>& PlayerPawns, TArray<class AFortPlayerStateAthena*>* PlayerStates);
	void OnRep_RepInputStruct();
	void OnRep_QTMActive();
	void OnAnyKeyPressed(const class FName& KeyName);
	void ListenForQTMPassed();
	void ExecuteUbergraph_BP_QTM_Manager(int32 EntryPoint);
	void EventQTMPassed();
	void EventQTMFailed();
	void DisableQTM();
	void DegradeFillPercentOverTime();
	void ClientToServerRPCAddFillPercent(const struct FSpecialClientEvent& ClientEventData);
	void BindListenForInput();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_QTM_Manager_C">();
	}
	static class ABP_QTM_Manager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_QTM_Manager_C>();
	}
};
static_assert(alignof(ABP_QTM_Manager_C) == 0x000008, "Wrong alignment on ABP_QTM_Manager_C");
static_assert(sizeof(ABP_QTM_Manager_C) == 0x0003C0, "Wrong size on ABP_QTM_Manager_C");
static_assert(offsetof(ABP_QTM_Manager_C, UberGraphFrame) == 0x000270, "Member 'ABP_QTM_Manager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, SpecialEventInputHelper) == 0x000278, "Member 'ABP_QTM_Manager_C::SpecialEventInputHelper' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_QTM_Manager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMCompletionPercent) == 0x000288, "Member 'ABP_QTM_Manager_C::QTMCompletionPercent' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMFailTimer) == 0x00028C, "Member 'ABP_QTM_Manager_C::QTMFailTimer' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, DegradeFillPercentHandle) == 0x000290, "Member 'ABP_QTM_Manager_C::DegradeFillPercentHandle' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMFailedTimerHandle) == 0x000298, "Member 'ABP_QTM_Manager_C::QTMFailedTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMWidget) == 0x0002A0, "Member 'ABP_QTM_Manager_C::QTMWidget' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMWidgetRef) == 0x0002C8, "Member 'ABP_QTM_Manager_C::QTMWidgetRef' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMActive) == 0x0002D0, "Member 'ABP_QTM_Manager_C::QTMActive' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMFinished) == 0x0002D8, "Member 'ABP_QTM_Manager_C::QTMFinished' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, DegradePercentTime) == 0x0002E8, "Member 'ABP_QTM_Manager_C::DegradePercentTime' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMDegradeAmount) == 0x0002F0, "Member 'ABP_QTM_Manager_C::QTMDegradeAmount' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMFillAmount) == 0x000300, "Member 'ABP_QTM_Manager_C::QTMFillAmount' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, PlayersInRelevancyGroup) == 0x000310, "Member 'ABP_QTM_Manager_C::PlayersInRelevancyGroup' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMInputFired) == 0x000318, "Member 'ABP_QTM_Manager_C::QTMInputFired' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, RepInputStruct) == 0x000328, "Member 'ABP_QTM_Manager_C::RepInputStruct' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, ClientInputStruct) == 0x000338, "Member 'ABP_QTM_Manager_C::ClientInputStruct' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, RelevancyGroupPlayerState) == 0x000348, "Member 'ABP_QTM_Manager_C::RelevancyGroupPlayerState' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTMCompletePercentUpdated) == 0x000358, "Member 'ABP_QTM_Manager_C::QTMCompletePercentUpdated' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, OnQTMStarted) == 0x000368, "Member 'ABP_QTM_Manager_C::OnQTMStarted' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, SuccesfullyPassedQTE) == 0x000378, "Member 'ABP_QTM_Manager_C::SuccesfullyPassedQTE' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, UserProgress) == 0x00037C, "Member 'ABP_QTM_Manager_C::UserProgress' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, EaseInCurve) == 0x000380, "Member 'ABP_QTM_Manager_C::EaseInCurve' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, NormalizedProgress) == 0x000388, "Member 'ABP_QTM_Manager_C::NormalizedProgress' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, QTButtonPressedTag) == 0x00038C, "Member 'ABP_QTM_Manager_C::QTButtonPressedTag' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, UpdateQuickTimePercentageHandle) == 0x000390, "Member 'ABP_QTM_Manager_C::UpdateQuickTimePercentageHandle' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, UpdateQTMPercentTag) == 0x000398, "Member 'ABP_QTM_Manager_C::UpdateQTMPercentTag' has a wrong offset!");
static_assert(offsetof(ABP_QTM_Manager_C, HUDElement_Tags) == 0x0003A0, "Member 'ABP_QTM_Manager_C::HUDElement_Tags' has a wrong offset!");

}

