#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Athena_Slurp_OLD

#include "Basic.hpp"

#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Athena_Slurp_OLD.GA_Athena_Slurp_OLD_C
// 0x0028 (0x0AE0 - 0x0AB8)
class UGA_Athena_Slurp_OLD_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IncreCheck;                                        // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTicks;                                          // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle;                                       // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TickRate;                                          // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyHealthOrShield();
	void ExecuteUbergraph_GA_Athena_Slurp_OLD(int32 EntryPoint);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Athena_Slurp_OLD_C">();
	}
	static class UGA_Athena_Slurp_OLD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Athena_Slurp_OLD_C>();
	}
};
static_assert(alignof(UGA_Athena_Slurp_OLD_C) == 0x000008, "Wrong alignment on UGA_Athena_Slurp_OLD_C");
static_assert(sizeof(UGA_Athena_Slurp_OLD_C) == 0x000AE0, "Wrong size on UGA_Athena_Slurp_OLD_C");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, UberGraphFrame) == 0x000AB8, "Member 'UGA_Athena_Slurp_OLD_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, PlayerPawn) == 0x000AC0, "Member 'UGA_Athena_Slurp_OLD_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, IncreCheck) == 0x000AC8, "Member 'UGA_Athena_Slurp_OLD_C::IncreCheck' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, MaxTicks) == 0x000ACC, "Member 'UGA_Athena_Slurp_OLD_C::MaxTicks' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, TimerHandle) == 0x000AD0, "Member 'UGA_Athena_Slurp_OLD_C::TimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_Athena_Slurp_OLD_C, TickRate) == 0x000AD8, "Member 'UGA_Athena_Slurp_OLD_C::TickRate' has a wrong offset!");

}

