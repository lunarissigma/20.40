#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivityBrowserLobbyTileButton

#include "Basic.hpp"

#include "DiscoveryBrowserUI_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivityBrowserLobbyTileButton.ActivityBrowserLobbyTileButton_C
// 0x0080 (0x10D0 - 0x1050)
class UActivityBrowserLobbyTileButton_C final : public UFortActivityLobbyTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1050(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       SelectedMatchmaking;                               // 0x1058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x1060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         ButtonPromptHB;                                    // 0x1068(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_KeyArt;                                      // 0x1070(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          SizeScaleCB;                                       // 0x1078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TileSize;                                          // 0x1080(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsDisabled;                                        // 0x1088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1089[0x3];                                     // 0x1089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   KeyArtParameter;                                   // 0x108C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MissingArtParameter;                               // 0x1090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelectedMatchmakingPlayingForward;               // 0x1094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1095[0x3];                                     // 0x1095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnActivityChanged;                                 // 0x1098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FText DisplayName)> OnShowChildModeChangedNotification;      // 0x10A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnShowChildModeFirstTimeNotification;              // 0x10B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void ExecuteUbergraph_ActivityBrowserLobbyTileButton(int32 EntryPoint);
	void Finished_839C1612477AFCFDCF8BB89840A6FFE3();
	void OnDetailsUpdated();
	void OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture);
	void OnSelectedMatchmaking();
	void OnShowChildActivityChangedNotification(const class FText& DisplayName);
	void OnShowChildActivityFirstTimeNotification();
	void OnUnSelectedMatchmakingCanceled();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivityBrowserLobbyTileButton_C">();
	}
	static class UActivityBrowserLobbyTileButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityBrowserLobbyTileButton_C>();
	}
};
static_assert(alignof(UActivityBrowserLobbyTileButton_C) == 0x000010, "Wrong alignment on UActivityBrowserLobbyTileButton_C");
static_assert(sizeof(UActivityBrowserLobbyTileButton_C) == 0x0010D0, "Wrong size on UActivityBrowserLobbyTileButton_C");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, UberGraphFrame) == 0x001050, "Member 'UActivityBrowserLobbyTileButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, SelectedMatchmaking) == 0x001058, "Member 'UActivityBrowserLobbyTileButton_C::SelectedMatchmaking' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Hover) == 0x001060, "Member 'UActivityBrowserLobbyTileButton_C::Hover' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, ButtonPromptHB) == 0x001068, "Member 'UActivityBrowserLobbyTileButton_C::ButtonPromptHB' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, Image_KeyArt) == 0x001070, "Member 'UActivityBrowserLobbyTileButton_C::Image_KeyArt' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, SizeScaleCB) == 0x001078, "Member 'UActivityBrowserLobbyTileButton_C::SizeScaleCB' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, TileSize) == 0x001080, "Member 'UActivityBrowserLobbyTileButton_C::TileSize' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, IsDisabled) == 0x001088, "Member 'UActivityBrowserLobbyTileButton_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, KeyArtParameter) == 0x00108C, "Member 'UActivityBrowserLobbyTileButton_C::KeyArtParameter' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, MissingArtParameter) == 0x001090, "Member 'UActivityBrowserLobbyTileButton_C::MissingArtParameter' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, IsSelectedMatchmakingPlayingForward) == 0x001094, "Member 'UActivityBrowserLobbyTileButton_C::IsSelectedMatchmakingPlayingForward' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnActivityChanged) == 0x001098, "Member 'UActivityBrowserLobbyTileButton_C::OnActivityChanged' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnShowChildModeChangedNotification) == 0x0010A8, "Member 'UActivityBrowserLobbyTileButton_C::OnShowChildModeChangedNotification' has a wrong offset!");
static_assert(offsetof(UActivityBrowserLobbyTileButton_C, OnShowChildModeFirstTimeNotification) == 0x0010B8, "Member 'UActivityBrowserLobbyTileButton_C::OnShowChildModeFirstTimeNotification' has a wrong offset!");

}

