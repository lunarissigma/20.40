#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_ButterCakeFruitPlant

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_ButterCakeFruitPlant.BGA_ButterCakeFruitPlant_C
// 0x0070 (0x0D98 - 0x0D28)
class ABGA_ButterCakeFruitPlant_C final : public ABuildingSMActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0D28(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHierarchicalInstancedStaticMeshComponent* HierarchicalInstancedStaticMesh;                // 0x0D30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortAthenaTrackableAIObjectComponent*  FortAthenaTrackableAIObject;                       // 0x0D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   LootTierGroupName;                                 // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hasLoot;                                           // 0x0D44(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D45[0x3];                                      // 0x0D45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              LastInteractingPawn;                               // 0x0D48(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractionLabel;                                  // 0x0D50(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         RowBerriesEnabled;                                 // 0x0D68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortItemDefinition*                    WID;                                               // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void ExecuteUbergraph_BGA_ButterCakeFruitPlant(int32 EntryPoint);
	void ForceSetMeshCollision();
	void GetItemToGrant(class UFortItemDefinition** Item_Definition, int32* Count);
	void GiveItemToInventory();
	bool HasOpenInventorySlot(class APawn* Target);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnInteractAudio();
	void OnLoaded_2E92DEBB4C2CCF5CC25CF3946AD4E585(class UObject* Loaded);
	void OnReady_7ED1D9354E813FE320993C990A7CA6FD(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_hasLoot();
	void ReceiveBeginPlay();
	void SpawnLoot();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_ButterCakeFruitPlant_C">();
	}
	static class ABGA_ButterCakeFruitPlant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_ButterCakeFruitPlant_C>();
	}
};
static_assert(alignof(ABGA_ButterCakeFruitPlant_C) == 0x000008, "Wrong alignment on ABGA_ButterCakeFruitPlant_C");
static_assert(sizeof(ABGA_ButterCakeFruitPlant_C) == 0x000D98, "Wrong size on ABGA_ButterCakeFruitPlant_C");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, UberGraphFrame) == 0x000D28, "Member 'ABGA_ButterCakeFruitPlant_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, HierarchicalInstancedStaticMesh) == 0x000D30, "Member 'ABGA_ButterCakeFruitPlant_C::HierarchicalInstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, FortAthenaTrackableAIObject) == 0x000D38, "Member 'ABGA_ButterCakeFruitPlant_C::FortAthenaTrackableAIObject' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, LootTierGroupName) == 0x000D40, "Member 'ABGA_ButterCakeFruitPlant_C::LootTierGroupName' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, hasLoot) == 0x000D44, "Member 'ABGA_ButterCakeFruitPlant_C::hasLoot' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, LastInteractingPawn) == 0x000D48, "Member 'ABGA_ButterCakeFruitPlant_C::LastInteractingPawn' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, InteractionLabel) == 0x000D50, "Member 'ABGA_ButterCakeFruitPlant_C::InteractionLabel' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, RowBerriesEnabled) == 0x000D68, "Member 'ABGA_ButterCakeFruitPlant_C::RowBerriesEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_ButterCakeFruitPlant_C, WID) == 0x000D90, "Member 'ABGA_ButterCakeFruitPlant_C::WID' has a wrong offset!");

}

