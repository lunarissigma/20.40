#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QTM_Manager

#include "Basic.hpp"

#include "BP_QTM_Manager_classes.hpp"
#include "BP_QTM_Manager_parameters.hpp"


namespace SDK
{

// Function BP_QTM_Manager.BP_QTM_Manager_C.UpdateQuickTimePercentage
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::UpdateQuickTimePercentage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "UpdateQuickTimePercentage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.UpdateInputForPawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_QTM_Manager_C::UpdateInputForPawn(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "UpdateInputForPawn");

	Params::BP_QTM_Manager_C_UpdateInputForPawn Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.StartQTM
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::StartQTM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "StartQTM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.ResetListenForQTMPassed
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::ResetListenForQTMPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "ResetListenForQTMPassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_QTM_Manager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "ReceiveTick");

	Params::BP_QTM_Manager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.PawnToPlayerState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AFortPlayerPawn*>&         PlayerPawns                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class AFortPlayerStateAthena*>*  PlayerStates                                           (Parm, OutParm)

void ABP_QTM_Manager_C::PawnToPlayerState(TArray<class AFortPlayerPawn*>& PlayerPawns, TArray<class AFortPlayerStateAthena*>* PlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "PawnToPlayerState");

	Params::BP_QTM_Manager_C_PawnToPlayerState Parms{};

	Parms.PlayerPawns = std::move(PlayerPawns);

	UObject::ProcessEvent(Func, &Parms);

	PlayerPawns = std::move(Parms.PlayerPawns);

	if (PlayerStates != nullptr)
		*PlayerStates = std::move(Parms.PlayerStates);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.OnRep_RepInputStruct
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::OnRep_RepInputStruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "OnRep_RepInputStruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.OnRep_QTMActive
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::OnRep_QTMActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "OnRep_QTMActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.OnAnyKeyPressed
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      KeyName                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_QTM_Manager_C::OnAnyKeyPressed(const class FName& KeyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "OnAnyKeyPressed");

	Params::BP_QTM_Manager_C_OnAnyKeyPressed Parms{};

	Parms.KeyName = KeyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.ListenForQTMPassed
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::ListenForQTMPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "ListenForQTMPassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.ExecuteUbergraph_BP_QTM_Manager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_QTM_Manager_C::ExecuteUbergraph_BP_QTM_Manager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "ExecuteUbergraph_BP_QTM_Manager");

	Params::BP_QTM_Manager_C_ExecuteUbergraph_BP_QTM_Manager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.EventQTMPassed
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::EventQTMPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "EventQTMPassed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.EventQTMFailed
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::EventQTMFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "EventQTMFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.DisableQTM
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::DisableQTM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "DisableQTM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.DegradeFillPercentOverTime
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::DegradeFillPercentOverTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "DegradeFillPercentOverTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.ClientToServerRPCAddFillPercent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSpecialClientEvent&       ClientEventData                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_QTM_Manager_C::ClientToServerRPCAddFillPercent(const struct FSpecialClientEvent& ClientEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "ClientToServerRPCAddFillPercent");

	Params::BP_QTM_Manager_C_ClientToServerRPCAddFillPercent Parms{};

	Parms.ClientEventData = std::move(ClientEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTM_Manager.BP_QTM_Manager_C.BindListenForInput
// (BlueprintCallable, BlueprintEvent)

void ABP_QTM_Manager_C::BindListenForInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTM_Manager_C", "BindListenForInput");

	UObject::ProcessEvent(Func, nullptr);
}

}

