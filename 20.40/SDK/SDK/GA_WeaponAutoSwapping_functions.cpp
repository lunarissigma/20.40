#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_WeaponAutoSwapping

#include "Basic.hpp"

#include "GA_WeaponAutoSwapping_classes.hpp"
#include "GA_WeaponAutoSwapping_parameters.hpp"


namespace SDK
{

// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.ExecuteUbergraph_GA_WeaponAutoSwapping
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_WeaponAutoSwapping_C::ExecuteUbergraph_GA_WeaponAutoSwapping(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "ExecuteUbergraph_GA_WeaponAutoSwapping");

	Params::GA_WeaponAutoSwapping_C_ExecuteUbergraph_GA_WeaponAutoSwapping Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.FailedToActivatePassiveAbility
// (Event, Public, BlueprintEvent)

void UGA_WeaponAutoSwapping_C::FailedToActivatePassiveAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "FailedToActivatePassiveAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.GetNextWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class UClass*&                    ItemToFind                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_WeaponAutoSwapping_C::GetNextWeapon(const class UClass*& ItemToFind, int32* Index_0, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "GetNextWeapon");

	Params::GA_WeaponAutoSwapping_C_GetNextWeapon Parms{};

	Parms.ItemToFind = ItemToFind;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_WeaponAutoSwapping_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.OnOverheatChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EFortWeaponOverheatState                State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsInCooldown                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_WeaponAutoSwapping_C::OnOverheatChanged(float CurrentValue, float MaxValue, EFortWeaponOverheatState State, bool bIsInCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "OnOverheatChanged");

	Params::GA_WeaponAutoSwapping_C_OnOverheatChanged Parms{};

	Parms.CurrentValue = CurrentValue;
	Parms.MaxValue = MaxValue;
	Parms.State = State;
	Parms.bIsInCooldown = bIsInCooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.SpecialEventClient
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSpecialClientEvent&       ClientEventData                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UGA_WeaponAutoSwapping_C::SpecialEventClient(const struct FSpecialClientEvent& ClientEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "SpecialEventClient");

	Params::GA_WeaponAutoSwapping_C_SpecialEventClient Parms{};

	Parms.ClientEventData = std::move(ClientEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_WeaponAutoSwapping.GA_WeaponAutoSwapping_C.WeaponChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AFortWeapon*                      PrevWeapon                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_WeaponAutoSwapping_C::WeaponChanged(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_WeaponAutoSwapping_C", "WeaponChanged");

	Params::GA_WeaponAutoSwapping_C_WeaponChanged Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	UObject::ProcessEvent(Func, &Parms);
}

}

