#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActivityPrivacyButton

#include "Basic.hpp"

#include "DiscoveryBrowserUI_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ActivityPrivacyButton.ActivityPrivacyButton_C
// 0x00C0 (0x1070 - 0x0FB0)
class UActivityPrivacyButton_C final : public UFortActivityPrivacyButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0FB0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Pressed;                                           // 0x0FB8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x0FC0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         ContentHB;                                         // 0x0FC8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG;                                          // 0x0FD0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Text_Title;                                        // 0x0FD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextToggle_C*                          TextToggle;                                        // 0x0FE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   Button_Description;                                // 0x0FE8(0x0018)(Edit, BlueprintVisible)
	float                                         TextShearX;                                        // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextShearY;                                        // 0x1004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                TextPadding;                                       // 0x1008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDisabled;                                        // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ButtonMaterial;                                    // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonSharpnessX;                                  // 0x1028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonSharpnessY;                                  // 0x102C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseBoxScalingX;                                    // 0x1030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UseBoxScalingY;                                    // 0x1034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonBoxScaleSizeX;                               // 0x1038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonBoxScaleSizeY;                               // 0x103C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DisabledParamName;                                 // 0x1040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessVParamName;                               // 0x1044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SharpnessUParamName;                               // 0x1048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleUParamName;                             // 0x104C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   UseBoxScaleVParamName;                             // 0x1050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideButtonBackingOnGamepad;                        // 0x1054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayReversed;                                // 0x1055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1056[0x2];                                     // 0x1056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsAvailable)> OnPrivacyAvailableChanged;                      // 0x1058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BP_OnClicked();
	void BP_OnDeselected();
	void BP_OnDisabled();
	void BP_OnEnabled();
	void BP_OnHovered();
	void BP_OnSelected();
	void BP_OnUnhovered();
	void ExecuteUbergraph_ActivityPrivacyButton(int32 EntryPoint);
	void Finished_36C2CEC0400119679F9DB4ADF6A040E2();
	void OnDesiredPrivacySelectionChanged(const bool bIsSelected);
	void OnPrivacyAvailabilityChanged(const bool bIsAvailable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ActivityPrivacyButton_C">();
	}
	static class UActivityPrivacyButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivityPrivacyButton_C>();
	}
};
static_assert(alignof(UActivityPrivacyButton_C) == 0x000010, "Wrong alignment on UActivityPrivacyButton_C");
static_assert(sizeof(UActivityPrivacyButton_C) == 0x001070, "Wrong size on UActivityPrivacyButton_C");
static_assert(offsetof(UActivityPrivacyButton_C, UberGraphFrame) == 0x000FB0, "Member 'UActivityPrivacyButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, Pressed) == 0x000FB8, "Member 'UActivityPrivacyButton_C::Pressed' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, Hover) == 0x000FC0, "Member 'UActivityPrivacyButton_C::Hover' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ContentHB) == 0x000FC8, "Member 'UActivityPrivacyButton_C::ContentHB' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, Image_BG) == 0x000FD0, "Member 'UActivityPrivacyButton_C::Image_BG' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, Text_Title) == 0x000FD8, "Member 'UActivityPrivacyButton_C::Text_Title' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, TextToggle) == 0x000FE0, "Member 'UActivityPrivacyButton_C::TextToggle' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, Button_Description) == 0x000FE8, "Member 'UActivityPrivacyButton_C::Button_Description' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, TextShearX) == 0x001000, "Member 'UActivityPrivacyButton_C::TextShearX' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, TextShearY) == 0x001004, "Member 'UActivityPrivacyButton_C::TextShearY' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, TextPadding) == 0x001008, "Member 'UActivityPrivacyButton_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, IsDisabled) == 0x001018, "Member 'UActivityPrivacyButton_C::IsDisabled' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ButtonMaterial) == 0x001020, "Member 'UActivityPrivacyButton_C::ButtonMaterial' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ButtonSharpnessX) == 0x001028, "Member 'UActivityPrivacyButton_C::ButtonSharpnessX' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ButtonSharpnessY) == 0x00102C, "Member 'UActivityPrivacyButton_C::ButtonSharpnessY' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, UseBoxScalingX) == 0x001030, "Member 'UActivityPrivacyButton_C::UseBoxScalingX' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, UseBoxScalingY) == 0x001034, "Member 'UActivityPrivacyButton_C::UseBoxScalingY' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ButtonBoxScaleSizeX) == 0x001038, "Member 'UActivityPrivacyButton_C::ButtonBoxScaleSizeX' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ButtonBoxScaleSizeY) == 0x00103C, "Member 'UActivityPrivacyButton_C::ButtonBoxScaleSizeY' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, DisabledParamName) == 0x001040, "Member 'UActivityPrivacyButton_C::DisabledParamName' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, SharpnessVParamName) == 0x001044, "Member 'UActivityPrivacyButton_C::SharpnessVParamName' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, SharpnessUParamName) == 0x001048, "Member 'UActivityPrivacyButton_C::SharpnessUParamName' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, UseBoxScaleUParamName) == 0x00104C, "Member 'UActivityPrivacyButton_C::UseBoxScaleUParamName' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, UseBoxScaleVParamName) == 0x001050, "Member 'UActivityPrivacyButton_C::UseBoxScaleVParamName' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, HideButtonBackingOnGamepad) == 0x001054, "Member 'UActivityPrivacyButton_C::HideButtonBackingOnGamepad' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, ShouldPlayReversed) == 0x001055, "Member 'UActivityPrivacyButton_C::ShouldPlayReversed' has a wrong offset!");
static_assert(offsetof(UActivityPrivacyButton_C, OnPrivacyAvailableChanged) == 0x001058, "Member 'UActivityPrivacyButton_C::OnPrivacyAvailableChanged' has a wrong offset!");

}

