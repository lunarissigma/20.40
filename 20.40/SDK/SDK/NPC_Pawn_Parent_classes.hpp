#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPC_Pawn_Parent

#include "Basic.hpp"

#include "Enum_NPC_TargetSlots_structs.hpp"
#include "Enum_NPC_AlertLevel_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Struct_NPC_TargetSlots_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NPC_Pawn_Parent.NPC_Pawn_Parent_C
// 0x0760 (0x37F0 - 0x3090)
class ANPC_Pawn_Parent_C : public AFortAIPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x3090(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCapsuleComponent*                      WeaponCapsuleCollision;                            // 0x3098(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortTaggedNavFiltersComponent*         FortTaggedNavFilters;                              // 0x30A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortActorComponent_Affiliation*        FortActorComponent_Affiliation;                    // 0x30A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundLibraryComponent*                 SoundLibrary_Component;                            // 0x30B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MovementAudioComponent;                            // 0x30B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNPC_VoiceComponent_C*                  NPC_VoiceComponent;                                // 0x30C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x30C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortWidgetComponent*                   NPCStatusWidget;                                   // 0x30D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86; // 0x30D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86; // 0x30DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30DD[0x3];                                     // 0x30DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ScaleMeshInOrOut;                         // 0x30E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_RecentlyDamaged;                            // 0x30E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_NPC_AlertLevel                           NPC_AlertLevel;                                    // 0x30F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	Enum_NPC_AlertLevel                           NPC_AlertLevelPrevious;                            // 0x30F1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30F2[0x6];                                     // 0x30F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_NPC_AlertLevel, struct FGameplayTag> NPC_AlertLevelToTagMap;                           // 0x30F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_StatusWidgetHealthBarDisabled;                 // 0x3148(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3149[0x3];                                     // 0x3149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCue_PickupGrabbed;                         // 0x314C(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	EFortRarity                                   NPC_BestLootRarityInInventory;                     // 0x3150(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_DebugPawn;                                     // 0x3151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_ShowInventoryRarityVisuals;                    // 0x3152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3153[0x1];                                     // 0x3153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InventoryGlowDelay;                                // 0x3154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_NumberOfInventoryItemsToDeliverHF;             // 0x3158(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_SpawnInvisible;                                // 0x3180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_ScaleMeshInOnSpawn;                            // 0x3181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3182[0x6];                                     // 0x3182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_NPC_SpawnAbilityTag;                            // 0x3188(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  TC_NPC_AlternateSpawnAbilityTag;                   // 0x31A8(0x0020)(Edit, BlueprintVisible)
	bool                                          NPC_IsSpawning;                                    // 0x31C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C9[0x3];                                     // 0x31C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NPC_OriginalGravityScale;                          // 0x31CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NPC_OriginalRotationRate;                          // 0x31D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NPC_HasPawnGoal;                                   // 0x31E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E9[0x7];                                     // 0x31E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NPC_PawnGoalActor;                                 // 0x31F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_NumberOfInventoryItemsToConsumeBeforeFullHF;   // 0x31F8(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_PawnIsDestroyingBuildingForNavigation;         // 0x3220(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3221[0x7];                                     // 0x3221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MaxIdleVODelay;                                    // 0x3228(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinIdleVODelay;                                    // 0x3250(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         NPC_DeathDropLootDelay;                            // 0x3278(0x0028)(Edit, BlueprintVisible)
	class FName                                   NPC_DeathDropLootTierGroupName;                    // 0x32A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A4[0x4];                                     // 0x32A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  NPC_DeathDropLootRequiredDamageTags;               // 0x32A8(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  NPC_DeathDropLootForbiddenDamageTags;              // 0x32C8(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  GrantStartingItemsAbilityTC;                       // 0x32E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_HasItemInInventory;                            // 0x3308(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3309[0x3];                                     // 0x3309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           VoiceTag_FullAlertIdle;                            // 0x330C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_Idle;                                     // 0x3310(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_ReturnToIdle;                             // 0x3314(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_LostTarget;                               // 0x3318(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_Suspicious;                               // 0x331C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag_FullAlert;                                // 0x3320(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3324[0x4];                                     // 0x3324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStruct_NPC_TargetSlots>        NPC_TargetSlotsHF;                                 // 0x3328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_DamageCanCancelIntroPhase;                     // 0x3338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3339[0x7];                                     // 0x3339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      TQ_NPC_DamageTagsThatCanCancelIntroPhase;          // 0x3340(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_NPC_IntroPhaseBehaviorCooldown;                 // 0x3388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  TC_IntroBehaviorActive;                            // 0x3390(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Debug_NPC_AlertLevelForced;                        // 0x33B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_PawnCanInteractInternal;                       // 0x33B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33B2[0x6];                                     // 0x33B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NPC_PrimtiveDataFloatSetRandomlyInRange;           // 0x33B8(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatIndexHF;                      // 0x33E0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatMinRangeHF;                   // 0x3408(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PrimtiveDataFloatMaxRangeHF;                   // 0x3430(0x0028)(Edit, BlueprintVisible)
	class AActor*                                 NPC_Leader;                                        // 0x3458(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCue_LeaderSet;                             // 0x3460(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3464[0x4];                                     // 0x3464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             UnawareStateChangeSound;                           // 0x3468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AlertStateChangeSound;                             // 0x3470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AggressiveStateChangeSound;                        // 0x3478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NPC_Skeletal_Mesh_Index;                           // 0x3480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3484[0x4];                                     // 0x3484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             TamedSound;                                        // 0x3488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        StateChangeSound;                                  // 0x3490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_ShouldDespawnFromStormHF;                      // 0x3498(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_DespawnTimerHF;                                // 0x34C0(0x0028)(Edit, BlueprintVisible)
	struct FGameplayTag                           NPC_DespawnGameplayTag;                            // 0x34E8(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34EC[0x4];                                     // 0x34EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           NPC_TestIsInSafeZoneTimer;                         // 0x34F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NPC_DespawnFromStormTimer;                         // 0x34F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_isTryingToDespawn;                             // 0x3500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3501[0x3];                                     // 0x3501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NPC_ResetIntroGameplayTags;                        // 0x3504(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	float                                         SelectedPrimitiveDataFloat;                        // 0x3508(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCue_Death;                                 // 0x350C(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             OG_Materials;                                      // 0x3510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          NPC_Apply_GE_for_Swimming;                         // 0x3520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3521[0x7];                                     // 0x3521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 NPC_GE_ClassToApplyForSwimming;                    // 0x3528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Exit_Burst_GC;                                     // 0x3530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3531[0x3];                                     // 0x3531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            NPC_GE_AppliedForSwimming;                         // 0x3534(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FName                                   GoalActorBBKey;                                    // 0x353C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCueLureInterest;                           // 0x3540(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3544[0x4];                                     // 0x3544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                NPC_PreviousLureGoal;                              // 0x3548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Exit_Water;                                        // 0x3550(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Enter_Water;                                       // 0x3554(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF;   // 0x3558(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_HealthBarHideTimeAfterDeathHF;                 // 0x3580(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PlayEffectWhenLuredHF;                         // 0x35A8(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_PawnCanInteractHF;                             // 0x35D0(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowInteractOnlyWhenUnawareHF;                // 0x35F8(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowInteractWhenHasLeaderHF;                  // 0x3620(0x0028)(Edit, BlueprintVisible)
	struct FScalableFloat                         NPC_AllowDrownInShallowWaterHF;                    // 0x3648(0x0028)(Edit, BlueprintVisible)
	bool                                          NPC_IsInventoryInitialized;                        // 0x3670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isGCForLeaderSetLooping;                           // 0x3671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3672[0x2];                                     // 0x3672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NPC_DeathByStormTag;                               // 0x3674(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_TryDespawnAbility;                             // 0x3678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3679[0x3];                                     // 0x3679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            GeOutsideSafeZoneDamageHandle;                     // 0x367C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGEStormDamageInit;                               // 0x3684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_MeshScalingInProgress;                         // 0x3685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_DisableCapsuleOverlapsWhenScalingOut;          // 0x3686(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3687[0x1];                                     // 0x3687(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NPC_OriginalMeshScale;                             // 0x3688(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              NPCScaleMeshInCompleted;                           // 0x36A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              NPCScaleMeshOutCompleted;                          // 0x36B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NPC_CanDropLoot;                                   // 0x36C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C1[0x7];                                     // 0x36C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         NPC_StaleDespawnTestDistance_HF;                   // 0x36C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         NPC_StaleDespawnTimeThreshold_HF;                  // 0x36F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         NPC_LastNonStaleCheckTime;                         // 0x3718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanBeDamagedByNullInstigator;                     // 0x371C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnteringWater;                                   // 0x371D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371E[0x2];                                     // 0x371E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn)> NPCPawnInteractWithDispatcher; // 0x3720(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NPCDynamicBlockConversionOnInteract;               // 0x3730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPC_TempInteractOverride;                          // 0x3731(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3732[0x6];                                     // 0x3732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HeadShot_Sound;                                    // 0x3738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Headshot_FX_Socket;                                // 0x3740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHeadShotFX;                                     // 0x3744(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3745[0x3];                                     // 0x3745(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_WeaponTypesAllowedForHeadshotFX;                // 0x3748(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AllowHeadshot;                                     // 0x3768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3769[0x3];                                     // 0x3769(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditiveHitReactRetriggerDelay;                    // 0x376C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Additive_Hit_React_Montage;                        // 0x3770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Death_Normal_Sound;                                // 0x3778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      WeaponCapsuleCollisionBUNK;                        // 0x3780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        HeadshotFXEmitterTemplate;                         // 0x3788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundLibrary*>                  SoundLibs_Default;                                 // 0x3790(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Alert;                                   // 0x37A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundLibrary*                          CurrentSoundLib;                                   // 0x37B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundLibrary*>                  SoundLibs_Aggressive;                              // 0x37B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Foley;                                   // 0x37C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundLibrary*>                  SoundLibs_Foley_Water;                             // 0x37D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundLibrary*                          CurrentFoleyLib;                                   // 0x37E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdditiveHitReactDelay();
	void AddSoundSystemLibraries();
	void BeginMusicTracker();
	bool CanUpdateSoundLib(const TArray<class USoundLibrary*>& TargetArray);
	void CheckSoundLibraryAdded(TArray<class USoundLibrary*>& Libraries);
	void CheckSoundLibraryRemoved(TArray<class USoundLibrary*>& Libraries);
	void Debug_AlertLevel_ClearDebug();
	void Debug_AlertLevel_ForceLevel(Enum_NPC_AlertLevel NewNPC_AlertLevel);
	void Debug_ForceAlertLevel_Aggressive();
	void Debug_ForceAlertLevel_Alerted();
	void Debug_ForceAlertLevel_Invalid();
	void Debug_ForceAlertLevel_NA();
	void Debug_ForceAlertLevel_Unaware();
	void DespawnDueToStorm();
	void End_Music_Tracker();
	void ExecuteUbergraph_NPC_Pawn_Parent(int32 EntryPoint);
	void GetSoundFoleyLibrary();
	void GrantStartingItems();
	void HandleInteracts();
	void InitializeInventory();
	void InitializeTestInSafeZone();
	void LuredInterest();
	void LuredOnServer(Enum_NPC_AlertLevel AlertLevel);
	void NPC_AlertLevelChangedServer(Enum_NPC_AlertLevel NPCAlertLevel);
	void NPC_ApplyGameplayEffectWithMMRScaling(class AActor* Actor, class UClass* GE_Class);
	void NPC_ApplyRecentlyDamagedTagGE(class UClass* RecentlyDamagedOverride);
	void NPC_AttemptToSetLeader(class AActor* PossibleLeader);
	void NPC_CanBeInteractedWith(bool* CanInteract);
	void NPC_CheckForDespawnIfStaleToPlayers(class AFortPlayerPawn* ClosestFortPlayerPawn);
	void NPC_CheckIsInSafeZone(bool* TestSucceeded, bool* isInSafeZone);
	void NPC_ClearOutTargetSlots();
	void NPC_DamageAttemptDisableIntroPhaseBehavior(const struct FGameplayTagContainer& DamageTags);
	void NPC_DamageRemovesIdlePhaseTagGE();
	void NPC_DisableIntroPhaseBehavior();
	void NPC_GetAlertLevelInfo(Enum_NPC_AlertLevel* AlertLevel, struct FGameplayTag* AlertLevelTag, bool* ValidDataFound);
	void NPC_GetInventoryInformation(bool* HasItemInInventory, int32* TotalNumberOfInventoryItems, int32* LastInventoryItemIndex, bool* HasEnoughItemsToDeliver, bool* ConsumedEnoughItemsToBeConsideredFull);
	void NPC_GetSafeZonePhase(int32* SafeZonePhase);
	void NPC_GetScalableFloatHotfixValue(const struct FScalableFloat& ScalableFloatHotfix, float AtLevel, bool* AsBool, int32* AsIntRounded, float* AsFloat);
	void NPC_HandleAlertLevelVoice();
	void NPC_HasLeader_(bool* HasLeader_, class AActor** Leader);
	void NPC_InitializeIdleVO();
	void NPC_LeaderSet(bool Success_, class AActor* Leader);
	void NPC_MulticastGameplayCueDeath();
	void NPC_ParentLaunchVehicle(class AActor* Vehicle, const struct FVector& Velocity);
	void NPC_Pawn_Interact(class AFortAIPawn* AI, class AFortPlayerController* InteractingPlayerController, EInteractionBeingAttempted InteractionBeingAttempted);
	void NPC_PawnDebugMessage(const class FString& String, bool OnlyWhenDebug);
	void NPC_PickupDropped(class AFortPickup* FortPickupDropped);
	void NPC_PickupGrabbed(class AFortPickup* FortPickupGrabbed);
	void NPC_PickupGrabbed_Destroyed(class AActor* ActorGrabbed);
	void NPC_ResetOriginalGravityScale();
	void NPC_ResetOriginalRotationRate();
	void NPC_ScalableFloatIsValid(const struct FScalableFloat& ScalableFloat, bool* Valid);
	void NPC_SendGameplayCuePickupGrabbed();
	void NPC_SetBestLootRarityInInventory(EFortRarity* NPC_BestLootRarityInInventory_0);
	void NPC_SetCanDropLoot(bool CanDropLoot);
	void NPC_SetLeader(class AActor* Leader, bool* Success_, class AActor** LeaderSet);
	void NPC_SetLootCollectionPhaseCompleteToBlackboard(bool LootCollectionPhaseComplete);
	void NPC_SetReturnGatheredLootToBlackboard();
	void NPC_SetupHealthBarOnDeath();
	void NPC_TargetSlotInfo(Enum_NPC_TargetSlots TargetSlotType, class AActor* TargetWeWantToSlotOnto, int32* TargetSlotCount, int32* TargetSlotMax, int32* NPC_TargetSlotsRequired, bool* TargetSlotsMaxOrMore, bool* TargetSlotCountIsExactlyMax, bool* NPC_IsTargetSlotOwner, bool* NPC_HasSpaceToSlotOnTarget, Enum_NPC_TargetSlots* TargetSlotTypeOut, class UClass** TargetSlotCountingGE, struct FScalableFloat* AI_TargetSlotSizeHF, struct FScalableFloat* AI_TargetSlotDurationHF, class UClass** TargetSlotOverrideGE, class UClass** TargetSlotOwnerGE, class UClass** TargetSlotCountingMaxedGE);
	void NPC_TargetSlotIsUsingOverride(Enum_NPC_TargetSlots TargetSlotType, class AActor* TargetWeWantToSlotOnto, bool* Override);
	void NPC_TryToDropLootOnDeath(const struct FGameplayTagContainer& DamageTags, bool* CanDropLoot);
	void NPC_UpdateInteract(bool CanInteract, bool* EnabledInteract);
	void NPCAlertLevelChangedClient(Enum_NPC_AlertLevel NPC_AlertLevel_0);
	void NPCDisableHealthBars();
	void NPCEnableHealthBars();
	void NPCScaleMeshIn();
	void NPCScaleMeshOut();
	void On_NPC_PawnInteractedWith(class AActor* AIPawn, class AFortPlayerPawn* InteractingPlayerPawn);
	void OnBeginDance();
	void OnBeginDeepWaterInteraction(const struct FVector& WaterSurfaceLocation, float WaterDepth);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnEndDance();
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsFirstBody);
	void OnExitedWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsLastBody);
	void OnPawnHealthChanged_Event_0();
	void OnRep_NPC_BestLootRarityInInventory();
	void OnRep_NPC_Leader();
	void OnRep_NPC_AlertLevel();
	void OnRep_SelectedPrimitiveDataFloat();
	void Orphaned(bool* IsOrphaned, class AFortPawn** AttachedPawn);
	void Play_Water_Splash_at_Water_Surface(class AFortWaterBodyActor* Water_Body, bool Enter_Water_0);
	void PlayAdditiveHitReacts(const struct FVector& Hit_Direction, class UAnimMontage* Anim_Montage);
	void PlayEnterWaterSplash(class AFortWaterBodyActor* Water_Body);
	void PlayExitWaterSplash(class AFortWaterBodyActor* Water_Body);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void RemoveSoundSystemLibraries();
	void RequestUpdateNPCAlertLevel(Enum_NPC_AlertLevel NPC_AlertLevel_0);
	void ResetMaterialFromDeath();
	void SelectPrimitiveDataFloat();
	void SetPrimitiveDataFloat();
	bool ShouldUpdateSkeletalMesh();
	void StartUpdatingHleathBarWidget();
	void StopTestingIsInSafeZone();
	void StopUpdatingHealthBarWidget();
	void StoreOriginalGravityAndRotation();
	void TestIsInSafeZone();
	void TestLoot();
	void Timeline_ScaleMeshInOrOut__FinishedFunc();
	void Timeline_ScaleMeshInOrOut__UpdateFunc();
	void TriggerDeathFX();
	void TriggerDespawnAbility();
	void TriggerIdleVO();
	void TryToDespawnDueToStorm(bool Reset_Timer);
	void TryWaterInteractionDrown();
	void UpdateSoundLibFoley();
	void UpdateSoundLibrary(Enum_NPC_AlertLevel Alert_Level);
	void UserConstructionScript();
	void WidgetVisibilityChanged(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NPC_Pawn_Parent_C">();
	}
	static class ANPC_Pawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANPC_Pawn_Parent_C>();
	}
};
static_assert(alignof(ANPC_Pawn_Parent_C) == 0x000010, "Wrong alignment on ANPC_Pawn_Parent_C");
static_assert(sizeof(ANPC_Pawn_Parent_C) == 0x0037F0, "Wrong size on ANPC_Pawn_Parent_C");
static_assert(offsetof(ANPC_Pawn_Parent_C, UberGraphFrame) == 0x003090, "Member 'ANPC_Pawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, WeaponCapsuleCollision) == 0x003098, "Member 'ANPC_Pawn_Parent_C::WeaponCapsuleCollision' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, FortTaggedNavFilters) == 0x0030A0, "Member 'ANPC_Pawn_Parent_C::FortTaggedNavFilters' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, FortActorComponent_Affiliation) == 0x0030A8, "Member 'ANPC_Pawn_Parent_C::FortActorComponent_Affiliation' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibrary_Component) == 0x0030B0, "Member 'ANPC_Pawn_Parent_C::SoundLibrary_Component' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MovementAudioComponent) == 0x0030B8, "Member 'ANPC_Pawn_Parent_C::MovementAudioComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_VoiceComponent) == 0x0030C0, "Member 'ANPC_Pawn_Parent_C::NPC_VoiceComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VOAudioComponent) == 0x0030C8, "Member 'ANPC_Pawn_Parent_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCStatusWidget) == 0x0030D0, "Member 'ANPC_Pawn_Parent_C::NPCStatusWidget' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86) == 0x0030D8, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut_MeshScaleAlpha_9DAAC0B243D26E4160CEC3A458AE0E86' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86) == 0x0030DC, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut__Direction_9DAAC0B243D26E4160CEC3A458AE0E86' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Timeline_ScaleMeshInOrOut) == 0x0030E0, "Member 'ANPC_Pawn_Parent_C::Timeline_ScaleMeshInOrOut' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_NPC_RecentlyDamaged) == 0x0030E8, "Member 'ANPC_Pawn_Parent_C::GE_NPC_RecentlyDamaged' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevel) == 0x0030F0, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevel' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevelPrevious) == 0x0030F1, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevelPrevious' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AlertLevelToTagMap) == 0x0030F8, "Member 'ANPC_Pawn_Parent_C::NPC_AlertLevelToTagMap' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StatusWidgetHealthBarDisabled) == 0x003148, "Member 'ANPC_Pawn_Parent_C::NPC_StatusWidgetHealthBarDisabled' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_PickupGrabbed) == 0x00314C, "Member 'ANPC_Pawn_Parent_C::GameplayCue_PickupGrabbed' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_BestLootRarityInInventory) == 0x003150, "Member 'ANPC_Pawn_Parent_C::NPC_BestLootRarityInInventory' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DebugPawn) == 0x003151, "Member 'ANPC_Pawn_Parent_C::NPC_DebugPawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ShowInventoryRarityVisuals) == 0x003152, "Member 'ANPC_Pawn_Parent_C::NPC_ShowInventoryRarityVisuals' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, InventoryGlowDelay) == 0x003154, "Member 'ANPC_Pawn_Parent_C::InventoryGlowDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_NumberOfInventoryItemsToDeliverHF) == 0x003158, "Member 'ANPC_Pawn_Parent_C::NPC_NumberOfInventoryItemsToDeliverHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_SpawnInvisible) == 0x003180, "Member 'ANPC_Pawn_Parent_C::NPC_SpawnInvisible' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ScaleMeshInOnSpawn) == 0x003181, "Member 'ANPC_Pawn_Parent_C::NPC_ScaleMeshInOnSpawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_NPC_SpawnAbilityTag) == 0x003188, "Member 'ANPC_Pawn_Parent_C::TC_NPC_SpawnAbilityTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_NPC_AlternateSpawnAbilityTag) == 0x0031A8, "Member 'ANPC_Pawn_Parent_C::TC_NPC_AlternateSpawnAbilityTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_IsSpawning) == 0x0031C8, "Member 'ANPC_Pawn_Parent_C::NPC_IsSpawning' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalGravityScale) == 0x0031CC, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalGravityScale' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalRotationRate) == 0x0031D0, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalRotationRate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HasPawnGoal) == 0x0031E8, "Member 'ANPC_Pawn_Parent_C::NPC_HasPawnGoal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnGoalActor) == 0x0031F0, "Member 'ANPC_Pawn_Parent_C::NPC_PawnGoalActor' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_NumberOfInventoryItemsToConsumeBeforeFullHF) == 0x0031F8, "Member 'ANPC_Pawn_Parent_C::NPC_NumberOfInventoryItemsToConsumeBeforeFullHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnIsDestroyingBuildingForNavigation) == 0x003220, "Member 'ANPC_Pawn_Parent_C::NPC_PawnIsDestroyingBuildingForNavigation' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MaxIdleVODelay) == 0x003228, "Member 'ANPC_Pawn_Parent_C::MaxIdleVODelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, MinIdleVODelay) == 0x003250, "Member 'ANPC_Pawn_Parent_C::MinIdleVODelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootDelay) == 0x003278, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootTierGroupName) == 0x0032A0, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootTierGroupName' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootRequiredDamageTags) == 0x0032A8, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootRequiredDamageTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathDropLootForbiddenDamageTags) == 0x0032C8, "Member 'ANPC_Pawn_Parent_C::NPC_DeathDropLootForbiddenDamageTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GrantStartingItemsAbilityTC) == 0x0032E8, "Member 'ANPC_Pawn_Parent_C::GrantStartingItemsAbilityTC' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HasItemInInventory) == 0x003308, "Member 'ANPC_Pawn_Parent_C::NPC_HasItemInInventory' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_FullAlertIdle) == 0x00330C, "Member 'ANPC_Pawn_Parent_C::VoiceTag_FullAlertIdle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_Idle) == 0x003310, "Member 'ANPC_Pawn_Parent_C::VoiceTag_Idle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_ReturnToIdle) == 0x003314, "Member 'ANPC_Pawn_Parent_C::VoiceTag_ReturnToIdle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_LostTarget) == 0x003318, "Member 'ANPC_Pawn_Parent_C::VoiceTag_LostTarget' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_Suspicious) == 0x00331C, "Member 'ANPC_Pawn_Parent_C::VoiceTag_Suspicious' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, VoiceTag_FullAlert) == 0x003320, "Member 'ANPC_Pawn_Parent_C::VoiceTag_FullAlert' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TargetSlotsHF) == 0x003328, "Member 'ANPC_Pawn_Parent_C::NPC_TargetSlotsHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DamageCanCancelIntroPhase) == 0x003338, "Member 'ANPC_Pawn_Parent_C::NPC_DamageCanCancelIntroPhase' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TQ_NPC_DamageTagsThatCanCancelIntroPhase) == 0x003340, "Member 'ANPC_Pawn_Parent_C::TQ_NPC_DamageTagsThatCanCancelIntroPhase' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GE_NPC_IntroPhaseBehaviorCooldown) == 0x003388, "Member 'ANPC_Pawn_Parent_C::GE_NPC_IntroPhaseBehaviorCooldown' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_IntroBehaviorActive) == 0x003390, "Member 'ANPC_Pawn_Parent_C::TC_IntroBehaviorActive' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Debug_NPC_AlertLevelForced) == 0x0033B0, "Member 'ANPC_Pawn_Parent_C::Debug_NPC_AlertLevelForced' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnCanInteractInternal) == 0x0033B1, "Member 'ANPC_Pawn_Parent_C::NPC_PawnCanInteractInternal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatSetRandomlyInRange) == 0x0033B8, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatSetRandomlyInRange' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatIndexHF) == 0x0033E0, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatIndexHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatMinRangeHF) == 0x003408, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatMinRangeHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PrimtiveDataFloatMaxRangeHF) == 0x003430, "Member 'ANPC_Pawn_Parent_C::NPC_PrimtiveDataFloatMaxRangeHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Leader) == 0x003458, "Member 'ANPC_Pawn_Parent_C::NPC_Leader' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_LeaderSet) == 0x003460, "Member 'ANPC_Pawn_Parent_C::GameplayCue_LeaderSet' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, UnawareStateChangeSound) == 0x003468, "Member 'ANPC_Pawn_Parent_C::UnawareStateChangeSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AlertStateChangeSound) == 0x003470, "Member 'ANPC_Pawn_Parent_C::AlertStateChangeSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AggressiveStateChangeSound) == 0x003478, "Member 'ANPC_Pawn_Parent_C::AggressiveStateChangeSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Skeletal_Mesh_Index) == 0x003480, "Member 'ANPC_Pawn_Parent_C::NPC_Skeletal_Mesh_Index' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TamedSound) == 0x003488, "Member 'ANPC_Pawn_Parent_C::TamedSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, StateChangeSound) == 0x003490, "Member 'ANPC_Pawn_Parent_C::StateChangeSound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ShouldDespawnFromStormHF) == 0x003498, "Member 'ANPC_Pawn_Parent_C::NPC_ShouldDespawnFromStormHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnTimerHF) == 0x0034C0, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnTimerHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnGameplayTag) == 0x0034E8, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnGameplayTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TestIsInSafeZoneTimer) == 0x0034F0, "Member 'ANPC_Pawn_Parent_C::NPC_TestIsInSafeZoneTimer' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DespawnFromStormTimer) == 0x0034F8, "Member 'ANPC_Pawn_Parent_C::NPC_DespawnFromStormTimer' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_isTryingToDespawn) == 0x003500, "Member 'ANPC_Pawn_Parent_C::NPC_isTryingToDespawn' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_ResetIntroGameplayTags) == 0x003504, "Member 'ANPC_Pawn_Parent_C::NPC_ResetIntroGameplayTags' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SelectedPrimitiveDataFloat) == 0x003508, "Member 'ANPC_Pawn_Parent_C::SelectedPrimitiveDataFloat' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCue_Death) == 0x00350C, "Member 'ANPC_Pawn_Parent_C::GameplayCue_Death' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, OG_Materials) == 0x003510, "Member 'ANPC_Pawn_Parent_C::OG_Materials' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_Apply_GE_for_Swimming) == 0x003520, "Member 'ANPC_Pawn_Parent_C::NPC_Apply_GE_for_Swimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_GE_ClassToApplyForSwimming) == 0x003528, "Member 'ANPC_Pawn_Parent_C::NPC_GE_ClassToApplyForSwimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Exit_Burst_GC) == 0x003530, "Member 'ANPC_Pawn_Parent_C::Exit_Burst_GC' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_GE_AppliedForSwimming) == 0x003534, "Member 'ANPC_Pawn_Parent_C::NPC_GE_AppliedForSwimming' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GoalActorBBKey) == 0x00353C, "Member 'ANPC_Pawn_Parent_C::GoalActorBBKey' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GameplayCueLureInterest) == 0x003540, "Member 'ANPC_Pawn_Parent_C::GameplayCueLureInterest' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PreviousLureGoal) == 0x003548, "Member 'ANPC_Pawn_Parent_C::NPC_PreviousLureGoal' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Exit_Water) == 0x003550, "Member 'ANPC_Pawn_Parent_C::Exit_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Enter_Water) == 0x003554, "Member 'ANPC_Pawn_Parent_C::Enter_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF) == 0x003558, "Member 'ANPC_Pawn_Parent_C::NPC_MaxDistanceFromDamagedNPCToDrawHeallthBarHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_HealthBarHideTimeAfterDeathHF) == 0x003580, "Member 'ANPC_Pawn_Parent_C::NPC_HealthBarHideTimeAfterDeathHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PlayEffectWhenLuredHF) == 0x0035A8, "Member 'ANPC_Pawn_Parent_C::NPC_PlayEffectWhenLuredHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_PawnCanInteractHF) == 0x0035D0, "Member 'ANPC_Pawn_Parent_C::NPC_PawnCanInteractHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowInteractOnlyWhenUnawareHF) == 0x0035F8, "Member 'ANPC_Pawn_Parent_C::NPC_AllowInteractOnlyWhenUnawareHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowInteractWhenHasLeaderHF) == 0x003620, "Member 'ANPC_Pawn_Parent_C::NPC_AllowInteractWhenHasLeaderHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_AllowDrownInShallowWaterHF) == 0x003648, "Member 'ANPC_Pawn_Parent_C::NPC_AllowDrownInShallowWaterHF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_IsInventoryInitialized) == 0x003670, "Member 'ANPC_Pawn_Parent_C::NPC_IsInventoryInitialized' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, isGCForLeaderSetLooping) == 0x003671, "Member 'ANPC_Pawn_Parent_C::isGCForLeaderSetLooping' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DeathByStormTag) == 0x003674, "Member 'ANPC_Pawn_Parent_C::NPC_DeathByStormTag' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TryDespawnAbility) == 0x003678, "Member 'ANPC_Pawn_Parent_C::NPC_TryDespawnAbility' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, GeOutsideSafeZoneDamageHandle) == 0x00367C, "Member 'ANPC_Pawn_Parent_C::GeOutsideSafeZoneDamageHandle' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, IsGEStormDamageInit) == 0x003684, "Member 'ANPC_Pawn_Parent_C::IsGEStormDamageInit' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_MeshScalingInProgress) == 0x003685, "Member 'ANPC_Pawn_Parent_C::NPC_MeshScalingInProgress' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_DisableCapsuleOverlapsWhenScalingOut) == 0x003686, "Member 'ANPC_Pawn_Parent_C::NPC_DisableCapsuleOverlapsWhenScalingOut' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_OriginalMeshScale) == 0x003688, "Member 'ANPC_Pawn_Parent_C::NPC_OriginalMeshScale' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCScaleMeshInCompleted) == 0x0036A0, "Member 'ANPC_Pawn_Parent_C::NPCScaleMeshInCompleted' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCScaleMeshOutCompleted) == 0x0036B0, "Member 'ANPC_Pawn_Parent_C::NPCScaleMeshOutCompleted' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_CanDropLoot) == 0x0036C0, "Member 'ANPC_Pawn_Parent_C::NPC_CanDropLoot' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StaleDespawnTestDistance_HF) == 0x0036C8, "Member 'ANPC_Pawn_Parent_C::NPC_StaleDespawnTestDistance_HF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_StaleDespawnTimeThreshold_HF) == 0x0036F0, "Member 'ANPC_Pawn_Parent_C::NPC_StaleDespawnTimeThreshold_HF' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_LastNonStaleCheckTime) == 0x003718, "Member 'ANPC_Pawn_Parent_C::NPC_LastNonStaleCheckTime' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, bCanBeDamagedByNullInstigator) == 0x00371C, "Member 'ANPC_Pawn_Parent_C::bCanBeDamagedByNullInstigator' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, IsEnteringWater) == 0x00371D, "Member 'ANPC_Pawn_Parent_C::IsEnteringWater' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCPawnInteractWithDispatcher) == 0x003720, "Member 'ANPC_Pawn_Parent_C::NPCPawnInteractWithDispatcher' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPCDynamicBlockConversionOnInteract) == 0x003730, "Member 'ANPC_Pawn_Parent_C::NPCDynamicBlockConversionOnInteract' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, NPC_TempInteractOverride) == 0x003731, "Member 'ANPC_Pawn_Parent_C::NPC_TempInteractOverride' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, HeadShot_Sound) == 0x003738, "Member 'ANPC_Pawn_Parent_C::HeadShot_Sound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Headshot_FX_Socket) == 0x003740, "Member 'ANPC_Pawn_Parent_C::Headshot_FX_Socket' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, UseHeadShotFX) == 0x003744, "Member 'ANPC_Pawn_Parent_C::UseHeadShotFX' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, TC_WeaponTypesAllowedForHeadshotFX) == 0x003748, "Member 'ANPC_Pawn_Parent_C::TC_WeaponTypesAllowedForHeadshotFX' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AllowHeadshot) == 0x003768, "Member 'ANPC_Pawn_Parent_C::AllowHeadshot' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, AdditiveHitReactRetriggerDelay) == 0x00376C, "Member 'ANPC_Pawn_Parent_C::AdditiveHitReactRetriggerDelay' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Additive_Hit_React_Montage) == 0x003770, "Member 'ANPC_Pawn_Parent_C::Additive_Hit_React_Montage' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, Death_Normal_Sound) == 0x003778, "Member 'ANPC_Pawn_Parent_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, WeaponCapsuleCollisionBUNK) == 0x003780, "Member 'ANPC_Pawn_Parent_C::WeaponCapsuleCollisionBUNK' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, HeadshotFXEmitterTemplate) == 0x003788, "Member 'ANPC_Pawn_Parent_C::HeadshotFXEmitterTemplate' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Default) == 0x003790, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Default' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Alert) == 0x0037A0, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Alert' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CurrentSoundLib) == 0x0037B0, "Member 'ANPC_Pawn_Parent_C::CurrentSoundLib' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Aggressive) == 0x0037B8, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Aggressive' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Foley) == 0x0037C8, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Foley' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, SoundLibs_Foley_Water) == 0x0037D8, "Member 'ANPC_Pawn_Parent_C::SoundLibs_Foley_Water' has a wrong offset!");
static_assert(offsetof(ANPC_Pawn_Parent_C, CurrentFoleyLib) == 0x0037E8, "Member 'ANPC_Pawn_Parent_C::CurrentFoleyLib' has a wrong offset!");

}

